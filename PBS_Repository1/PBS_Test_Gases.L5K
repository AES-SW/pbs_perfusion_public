(*********************************************

  Import-Export
  Version   := RSLogix 5000 v32.04
  Owner     := , 
  Exported  := Tue Aug 15 09:23:15 2023

  Note:  File encoded in UTF-8.  Only edit file in a program 
         which supports UTF-8 (like Notepad, not Wordpad).

**********************************************)
IE_VER := 2.23;

CONTROLLER COLIS2004P (Description := "Corning Deluxe Rocker",
                       ProcessorType := "5069-L320ER",
                       Major := 32,
                       RedundancyEnabled := 0,
                       KeepTestEditsOnSwitchOver := 0,
                       SecurityCode := 0,
                       ChangesToDetect := 16#ffff_ffff_ffff_ffff,
                       SFCExecutionControl := "CurrentActive",
                       SFCRestartPosition := "MostRecent",
                       SFCLastScan := "DontScan",
                       SerialNumber := 16#d021_cb27,
                       MatchProjectToController := No,
                       CanUseRPIFromProducer := No,
                       InhibitAutomaticFirmwareUpdate := 0,
                       PassThroughConfiguration := EnabledWithAppend,
                       DownloadProjectDocumentationAndExtendedProperties := Yes,
                       ReportMinorOverflow := 0,
                       EtherNetIPMode := "A1/A2: Dual-IP")
	DATATYPE DateTime (Description := "Date and TimeOfDay (absolute) or Time (duration/interval)",
	                   FamilyType := NoFamily)
		DINT Yr (Description := "Year(s)");
		DINT Mo (Description := "Month(s)");
		DINT Da (Description := "Day(s)");
		DINT Hr (Description := "Hour(s)");
		DINT Min (Description := "Minute(s)");
		DINT Sec (Description := "Second(s)");
		DINT uSec (Description := "Microsecond(s)");
	END_DATATYPE

	DATATYPE EM (FamilyType := NoFamily)
		SINT ZZZZZZZZZZEM0 (Hidden := 1);
		BIT Inp_Reset ZZZZZZZZZZEM0 : 0 (Description := "Program Command to Reset all Alarms requiring Reset");
		BIT Cmd_Aquire ZZZZZZZZZZEM0 : 1 (Description := "Aquire Control Modules");
		BIT Cmd_Release ZZZZZZZZZZEM0 : 2 (Description := "Command to Release EM from Ownership");
		STRING_40 Cfg_Desc;
		STRING_20 Cfg_Label;
		STRING_20 Cfg_Tag;
		SINT ZZZZZZZZZZEM7 (Hidden := 1,
		                   ExternalAccess := Read Only);
		BIT Sts_Disabled ZZZZZZZZZZEM7 : 0 (Description := "1=Output is Disabled",
		              ExternalAccess := Read Only);
		BIT Sts_Prog ZZZZZZZZZZEM7 : 1 (Description := "1=Mode is Program",
		          ExternalAccess := Read Only);
		BIT Sts_Oper ZZZZZZZZZZEM7 : 2 (Description := "1=Mode is Operator",
		          ExternalAccess := Read Only);
		BIT Sts_Locked ZZZZZZZZZZEM7 : 3 (Description := "1=Program has requested Mode Lock",
		            ExternalAccess := Read Only);
		BIT Sts_Ready ZZZZZZZZZZEM7 : 4 (Description := "Ready for Program operation",
		           ExternalAccess := Read Only);
		BIT Sts_Active ZZZZZZZZZZEM7 : 5 (Description := "1=Active Mode");
		BIT Sts_Running ZZZZZZZZZZEM7 : 6 (ExternalAccess := Read Only);
		BIT Sts_Faulted ZZZZZZZZZZEM7 : 7 (ExternalAccess := Read Only);
		SINT ZZZZZZZZZZEM16 (Hidden := 1,
		                    ExternalAccess := Read Only);
		BIT Sts_EmOwned ZZZZZZZZZZEM16 : 0 (Description := "EM is Owned by a phase");
		BIT Sts_Err ZZZZZZZZZZEM16 : 1 (Description := "Error Status",
		         ExternalAccess := Read Only);
		BIT Sts_InState ZZZZZZZZZZEM16 : 2 (Description := "EM in State");
		BIT Sts_CMInlksOK ZZZZZZZZZZEM16 : 3 (Description := "All Owned CM Interlocks and Okay");
		BIT Sts_CMPermsOK ZZZZZZZZZZEM16 : 4 (Description := "All Owned CM Permissives are Okay");
		BIT OCmd_Oper ZZZZZZZZZZEM16 : 5;
		BIT OCmd_Prog ZZZZZZZZZZEM16 : 6;
		BIT Sts_ProgOper ZZZZZZZZZZEM16 : 7 (Description := "0 = Operator Mode Active$N1 = Program Mode Active");
		REAL OSet_SP1 (Description := "Operator Setpoint From HMI");
		REAL OSet_SP2 (Description := "Operator Setpoint From HMI");
		REAL OSet_SP3 (Description := "Operator Setpoint From HMI");
		SINT ZZZZZZZZZZEM28 (Hidden := 1);
		BIT PCmd_Oper ZZZZZZZZZZEM28 : 0;
		BIT PCmd_Prog ZZZZZZZZZZEM28 : 1;
		BIT PCmd_Lock ZZZZZZZZZZEM28 : 2;
		DINT PSet_OwnerSel (Description := "Program Owner Request ID (non-zero) or Release (zero)");
		DINT PSet_State (Description := "Step Command");
		REAL PSet_SP1 (Description := "Program Setpoint");
		REAL PSet_SP2 (Description := "Program Setpoint");
		REAL PSet_SP3 (Description := "Program Setpoint");
		DINT Val_Mode (Description := "Mode enum: 0=No, 1=H, 2=M, 3=!, 4=P Lock, 5=O Lock, 6=P (O Def), 7=O (P Def), 8=P (P Def), 9=O (O def)",
		              ExternalAccess := Read Only);
		DINT Val_Owner (Description := "Current Object Owner ID (0=not owned)",
		               ExternalAccess := Read Only);
		DINT Val_State (Description := "Active EM Step");
		REAL Val_SP1 (Description := "Actual Setpoint Value");
		REAL Val_SP2 (Description := "Often Ramp Time");
		REAL Val_SP3 (Description := "Often Dev_SP");
		DINT LastState (Description := "Last Active Running State of the EM");
	END_DATATYPE

	DATATYPE PIDE_Config (Description := "Configuration tag for a PIDE",
	                      FamilyType := NoFamily)
		STRING_8 Cfg_PVEU (Description := "PV engineering units for HMI display");
		STRING_8 Cfg_CVEU (Description := "CV engineering units for HMI display");
		STRING_20 Cfg_Tagname (Description := "Tagname for HMI display");
		SINT ZZZZZZZZZZPIDE_Confi3 (Hidden := 1);
		BIT Alm ZZZZZZZZZZPIDE_Confi3 : 0 (Description := "Alarm Active");
		BIT Intlk ZZZZZZZZZZPIDE_Confi3 : 1 (Description := "Interlock Active");
		BIT Cntl_Mode ZZZZZZZZZZPIDE_Confi3 : 2 (Description := "0 = Operator Mode $N1 = Program Mode");
		DINT Loop_Mode (Description := "0 = Cascade $N1 = Auto $N2 = Manual");
	END_DATATYPE

	DATATYPE ProcData (FamilyType := NoFamily)
		DINT LocalDateTime[7] (Description := "Local Date and Time");
		INT ProcStatus (Description := "Controller Status");
		INT ProcForceStatus (Description := "Processor Forces Enabled");
		DINT ProcMinorFaultBits (Description := "Processor Minor Fault Bits");
		DINT ProcMajorFaultBits (Description := "Processor Major Fault Bits");
		SINT ZZZZZZZZZZProcData5 (Hidden := 1);
		BIT RunMode ZZZZZZZZZZProcData5 : 0 (Description := "Controller in RUN mode");
		BIT ProgramMode ZZZZZZZZZZProcData5 : 1 (Description := "Controller in PROGRAM mode");
		BIT DebugMode ZZZZZZZZZZProcData5 : 2 (Description := "Controller in DEBUG mode");
		BIT KeySwitchRun ZZZZZZZZZZProcData5 : 3 (Description := "Key Switch in RUN");
		BIT KeySwitchProgram ZZZZZZZZZZProcData5 : 4 (Description := "Key Switch in PROGRAM");
		BIT KeySwitchRemote ZZZZZZZZZZProcData5 : 5 (Description := "Key Switch in REMOTE");
		BIT Faulted ZZZZZZZZZZProcData5 : 6 (Description := "Controller Faulted");
		BIT ForcesInstalled ZZZZZZZZZZProcData5 : 7 (Description := "Forces Installed");
		SINT ZZZZZZZZZZProcData14 (Hidden := 1);
		BIT ForcesEnabled ZZZZZZZZZZProcData14 : 0 (Description := "Forces Enabled");
		BIT LogicFault ZZZZZZZZZZProcData14 : 1 (Description := "Controller Logic Minor Fault");
		BIT LowBattery ZZZZZZZZZZProcData14 : 2 (Description := "Low Battery Minor Fault");
		DINT MinorFaultBits (Description := "Minor Faults Status Word");
		DINT MajorFaultBits (Description := "Major Faults Status Word");
		DINT MinorFaultRecord[11] (Description := "Minor Faults for this program");
		DINT MajorFaultRecord[11] (Description := "Major Faults for this program");
	END_DATATYPE

	DATATYPE P_DescList (Description := "Code / Description List Entry",
	                     FamilyType := NoFamily)
		DINT Code (Description := "Code for which to look up Description");
		STRING_40 Desc (Description := "Description for given Code");
	END_DATATYPE

	DATATYPE P_PromptCfg (Description := "Prompt Instance Configuration Data",
	                      FamilyType := NoFamily)
		STRING Cfg_Message (Description := "Message to display to operator");
		STRING_20 Cfg_Label (Description := "Title of this instance for prompt list displays");
		STRING_20 Cfg_InpValLabel[4] (Description := "Labels for numeric entry fields");
		STRING_20 Cfg_DispValLabel[4] (Description := "Labels for numeric display fields");
		STRING_20 Cfg_SelectLabel[4] (Description := "Labels for operator selection radio buttons");
		STRING_20 Cfg_RespLabel[4] (Description := "Labels for response string entry fields");
		STRING_8 Cfg_DispValEU[4] (Description := "Engineering units text for numeric display fields");
		STRING_8 Cfg_InpValEU[4] (Description := "Engineering units text for numeric entry fields");
		REAL Cfg_DispVal[4] (Description := "Values for numeric display fields");
		SINT Cfg_DispValDecPlcs[4] (Description := "Number of decimal places for numeric display fields (0..6)");
		REAL Cfg_InpValLoLim[4] (Description := "Minimum allowed numeric entry values");
		REAL Cfg_InpValHiLim[4] (Description := "Maximum allowed numeric entry values");
		SINT Cfg_InpValDecPlcs[4] (Description := "Number of decimal places for numeric entry fields (0..6)");
		SINT Cfg_HasDispVal (Description := "Bits enable (make visible) numeric display fields");
		SINT Cfg_DispValUsesInp (Description := "Bits=1=Use AOI Input for display value, 0=use configuration for display value");
		SINT Cfg_DispValScl (Description := "Bits=1=Apply scaling input to display value, 0=use value as is");
		SINT Cfg_DispValVrfy (Description := "Bits=1=User must he has read the display value");
		SINT Cfg_HasSelect (Description := "Bits enable (make visible) individual selection buttons");
		SINT Cfg_SelectDef (Description := "Bit chooses default operator selection (pre-selects radio button)");
		SINT Cfg_HasInpVal (Description := "Bits enable (make visible) numeric entry fields");
		SINT Cfg_InpValNotReqd (Description := "Bits=1=Operator numeric entry is not required, 0=operator must enter value");
		SINT Cfg_InpValDefMax (Description := "If not required, bits=1=sets default value to Max, 0=sets to Min");
		SINT Cfg_HasResp (Description := "Bits enable (make visible) response string entry fields");
		SINT Cfg_RespNotReqd (Description := "Bits=1=Operator response string entry is not required, 0=operator must enter response");
		SINT ZZZZZZZZZZP_PromptCf24 (Hidden := 1);
		BIT Cfg_AlertDefeat ZZZZZZZZZZP_PromptCf24 : 0 (Description := "1=Disables the Alert icon (orange (!) ) for standalone use");
	END_DATATYPE

	DATATYPE P_PromptResp (Description := "Operator-Entered Prompt Response Data (as Strings)",
	                       FamilyType := NoFamily)
		STRING_20 Selection (Description := "Text of operator-selected option");
		STRING_16_UDT NumericInput[4] (Description := "Text of operator$'s numeric entries");
		STRING_40 CharInput[4] (Description := "Text of operator$'s response strings");
	END_DATATYPE

	DATATYPE P_SeqSt (Description := "Data for one P_Seq State",
	                  FamilyType := NoFamily)
		STRING_20 Cfg_Name (Description := "Name");
		INT NumStepsInState;
		INT StepStartAbs;
		INT StepEndAbs;
	END_DATATYPE

	DATATYPE P_SeqStep (Description := "Data for one P_Seq sequencer Step",
	                    FamilyType := NoFamily)
		STRING_20 Cfg_Name (Description := "Step Name");
		DINT Cfg_FaultT (Description := "Step TO Fault Preset");
		DINT Cfg_MinT (Description := "Step Timer Preset");
		DINT Cfg_InputMask (Description := "D Inputs Used",
		                   Radix := Binary);
		DINT Cfg_InputState (Description := "D Input State",
		                    Radix := Binary);
		DINT Cfg_OutputMask (Description := "D Outputs Used",
		                    Radix := Binary);
		DINT Cfg_OutputState (Description := "D Output State",
		                     Radix := Binary);
		DINT Cfg_RealMask (Description := "R Outputs Used",
		                  Radix := Binary);
		REAL Cfg_RealOut[8] (Description := "R Output Values");
		DINT Cfg_BranchInputMask (Description := "D Inputs Used For Branching Conditions");
		DINT Cfg_BranchInputState (Description := "D Input States for Branching Condition");
		SINT Cfg_TmrHoldAction (Description := "Timer Action on Hold");
		SINT Cfg_TmrDisqualifyAction (Description := "Timer Action on Disqualify");
		SINT Cfg_StepTOHoldAction (Description := "Step Timeout Timer Action on Hold");
		SINT ZZZZZZZZZZP_SeqStep14 (Hidden := 1);
		BIT Cfg_DeferMinT ZZZZZZZZZZP_SeqStep14 : 0 (Description := "Load Step Timer at Beginning of Step From Entry");
		BIT Cfg_NOTTmrAfterQualify ZZZZZZZZZZP_SeqStep14 : 1 (Description := "Timer Beginning/After Qualify");
		BIT Cfg_TmrAQDefeat ZZZZZZZZZZP_SeqStep14 : 2 (Description := "Timer AQ Defeat if qualified on entry");
		BIT Cfg_ManPromptEN ZZZZZZZZZZP_SeqStep14 : 3 (Description := "Step Has Manual Prompt");
		BIT Cfg_NotResAdd ZZZZZZZZZZP_SeqStep14 : 4 (Description := "Update the Restart Address (NOT)");
		BIT Cfg_NotIntlkAdd ZZZZZZZZZZP_SeqStep14 : 5 (Description := "Update the Interlock Address (NOT)");
		BIT Cfg_ResSeqFaultT ZZZZZZZZZZP_SeqStep14 : 6 (Description := "Reset Sequence Fault Timer");
		BIT Cfg_Pausable ZZZZZZZZZZP_SeqStep14 : 7 (Description := "Pauable After This Step");
		SINT Cfg_Branching (Description := "Branching Configuration");
		INT Cfg_CountLimit (Description := "Loop Count Limit");
		INT MsgRef (Description := "Msg Number to Use in Manual Prompt");
		SINT Val_State;
		INT Val_EStep;
		INT Val_ptrENext;
		INT Val_VStep;
		INT Val_ptrVNext;
		INT Val_ptrVPrevious;
		INT Val_Count;
	END_DATATYPE

	DATATYPE STRING_12 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[12] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING_16 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[16] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING_16_UDT (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[16] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING_20 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[20] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING_40 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[40] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING_8 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[8] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING_Area (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[8] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING_Cond (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[20] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING_NavTag (Description := "Navigation Tag",
	                        FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[20] (Radix := ASCII);
	END_DATATYPE

	MODULE Local (Parent := "Local",
	              ParentModPortId := 1,
	              CatalogNumber := "5069-L320ER",
	              Vendor := 1,
	              ProductType := 14,
	              ProductCode := 217,
	              Major := 32,
	              Minor := 14,
	              PortLabel := "RxBACKPLANE",
	              ChassisSize := 17,
	              Slot := 0,
	              Mode := 2#0000_0000_0000_0001,
	              CompatibleModule := 0,
	              KeyMask := 2#0000_0000_0000_0000)
	END_MODULE

	MODULE $NoName (Parent := "Local",
	            ParentModPortId := 1,
	            CatalogNumber := "5069-SERIAL/A",
	            Vendor := 1,
	            ProductType := 12,
	            ProductCode := 320,
	            Major := 2,
	            Minor := 1,
	            PortLabel := "RxBACKPLANE",
	            Slot := 1,
	            Mode := 2#0000_0000_0000_0000,
	            CompatibleModule := 1,
	            KeyMask := 2#0000_0000_0001_1111,
	            SafetyEnabled := 0)
			ExtendedProp := [[[___<public><Vendor></Vendor><CatNum></CatNum><ConfigID>140</ConfigID><InputSize00>308</InputSize00><OutputSize00>120</OutputSize00><InputSize01>8</InputSize01><OutputSize01>12</OutputSize01><ChannelData>&lt;Data&gt;A0 0D 00 00 BF 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 03 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 03 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 01 00 00 00 34 01 78 00 00 00 00 00 01 03 00 00 01 02 0C 00 01 0B 14 00 01 02 40 00 01 01 48 00 01 01 4C 00 01 01 50 00 01 01 54 00 01 02 58 00 01 01 60 00 01 08 64 00 01 01 84 00 01 02 88 00 01 01 90 00 00 00 00 00 01 03 94 00 01 02 A0 00 01 0D A8 00 01 02 DC 00 01 01 E4 00 01 01 E8 00 01 01 EC 00 01 06 F0 00 01 01 08 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 02 0C 01 01 02 14 01 00 00 00 00 00 00 00 00 01 03 1C 01 01 01 28 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00 01 02 04 00 01 02 0C 00 01 01 14 00 00 00 00 00 01 07 18 00 00 00 00 00 01 01 34 00 00 00 00 00 01 01 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 02 3C 00 01 02 44 00 01 05 4C 00 00 00 00 00 01 01 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 02 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 03 04 00 AC 0D 00 00 C8 00 00 00 C8 00 00 00 00 00 00 00 09 01 03 00 04 00 00 00 00 00 2B 08 00 00 00 00 01 01 03 00 02 00 00 00 00 00 2D 08 00 00 00 00 09 01 03 00 14 00 00 00 00 00 1F 13 00 00 00 00 01 01 03 00 02 00 00 00 00 00 2B 13 00 00 00 00 02 01 10 00 02 00 00 00 00 00 29 08 00 00 00 00 0A 01 10 00 04 00 00 00 00 00 6B 09 00 00 00 00 02 01 10 00 04 00 00 00 00 00 A9 0D 00 00 00 00 02 01 10 00 02 00 00 00 00 00 8D 15 00 00 00 00 01 01 03 00 02 00 00 00 00 00 8D 15 00 00 00 00 0A 01 10 00 0E 00 00 00 00 00 91 15 00 00 00 00 09 01 03 00 0E 00 00 00 00 00 91 15 00 00 00 00 02 01 10 00 01 00 00 00 00 00 9F 15 00 00 00 00 01 01 03 00 01 00 00 00 00 00 9F 15 00 00 00 00 02 01 10 00 02 00 00 00 00 00 28 23 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 09 02 03 00 04 00 00 00 00 00 2B 08 00 00 00 00 01 02 03 00 02 00 00 00 00 00 2D 08 00 00 00 00 09 02 03 00 18 00 00 00 00 00 1F 13 00 00 00 00 01 02 03 00 02 00 00 00 00 00 2B 13 00 00 00 00 0A 02 10 00 04 00 00 00 00 00 6B 09 00 00 00 00 02 02 10 00 04 00 00 00 00 00 A9 0D 00 00 00 00 0A 02 10 00 0A 00 00 00 00 00 E7 09 00 00 00 00 09 02 03 00 0A 00 00 00 00 00 E7 09 00 00 00 00 02 02 10 00 02 00 00 00 00 00 28 23 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 01 03 00 02 00 00 00 00 00 FF 0F 00 00 00 00 01 02 03 00 02 00 00 00 00 00 FF 0F 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 09 02 03 00 04 00 00 00 00 00 3D 13 00 00 00 00 0A 02 10 00 04 00 00 00 00 00 3D 13 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 03 04 00 AC 0D 00 00 C8 00 00 00 C8 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 03 04 01 AC 0D 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 03 04 01 AC 0D 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 03 04 00 00 01 00 03 03 32 00 0D 0A 05 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 03 04 00 00 01 01 03 00 05 00 00 00 32 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 03 04 00 00 01 03 B8 0B 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 04 00 00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 05 04 00 00 03 00 1F 01&lt;/Data&gt;$N</ChannelData></public>___]]]
			ConfigData := [3488,191,1,0,0,1,262912,0,0,0,256,0,1,0,0,1,262912,0,0,0,256,0,1,7864628,0,769,786945,1313537,4194817,4718849,4980993
		,5243137,5505281,5767681,6291713,6555649,8651009,8913409,9437441,0,9700097,10486273,11013377,14418433
		,14942465,15204609,15466753,15730177,17301761,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17564161,18088449,0,0,18612993
		,19398913,0,0,0,0,0,0,0,0,257,262657,786945,1310977,0,1574657,0,3408129,0,3670273,0,0,0,0,0,3932673,4456961
		,4982017,0,6291713,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6554113,0,0,0,0,514,0,0,1,262912,3500,200,200,0,196873,4,137035776
		,0,196865,2,137166848,0,196873,20,320798720,0,196865,2,321585152,0,1048834,2,136904704,0,1048842,4,158007296
		,0,1048834,4,229179392,0,1048834,2,361562112,0,196865,2,361562112,0,1048842,14,361824256,0,196873,14
		,361824256,0,1048834,1,362741760,0,196865,1,362741760,0,1048834,2,589824000,0,256,1,0,0,197129,4,137035776
		,0,197121,2,137166848,0,197129,24,320798720,0,197121,2,321585152,0,1049098,4,158007296,0,1049090,4,229179392
		,0,1049098,10,166133760,0,197129,10,166133760,0,1049090,2,589824000,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256
		,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,196865,2,268369920
		,0,197121,2,268369920,0,256,1,0,0,256,1,0,0,197129,4,322764800,0,1049098,4,322764800,0,256,1,0,0,256,1,0,0,256,1
		,0,0,256,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,262912,3500,200,200,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0
		,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256
		,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0
		,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256
		,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,256,1,0,0,3,0,0,1,17040128,3500,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1
		,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,3,0,0,1,17040128,3500,0,1,0,0,1,0,0,1,0,0,1,0,0
		,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,4,0,0,1
		,1027,50528257,168624178,5,0,0,1,1027,196865,5,50,0,6,0,0,1,1027,196608769,7,0,0,0,1027,1,0,8,0,0,1,1029,18808835
		];
			ConfigScript (Size := 1372) := [88,5,0,0,4,0,0,0,0,0,0,0,0,0,0,0,70,5,0,0,11,0,0,0,0,1,0,0,0,2,0,0,0,-90,1,0,0,16,4,32,4,37,0,103,3,48,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-32,12,0,0,-128,2,0,0,80
		,0,0,0,2,0,0,0,-66,1,0,0,16,4,32,4,37,0,105,3,48,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-96,13,0,0,96,15,0,0,80,0,0,0,2,0
		,0,0,-102,1,0,0,16,4,32,4,37,0,107,3,48,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-128,12,0,0,0,29,0,0,80,0,0,0,0,0];
			CONNECTION Channel0ModbusMaster (Rate := 80000,
			                                 InputSize := 308,
			                                 OutputSize := 120,
			                                 EventID := 0,
			                                 Priority := Scheduled,
			                                 InputConnectionType := Multicast,
			                                 InputProductionTrigger := Cyclic,
			                                 ConnectionPath := "20 04 24 bf 2d 00 f2 03 2d 00 18 04",
			                                 InputTagSuffix := "I00",
			                                 OutputTagSuffix := "O00")
					InputData (COMMENT.COMMAND00 := "DO Probe - 402091 - O2 Value Raw",
            COMMENT.COMMAND01 := "DO Probe - 402093",
            COMMENT.COMMAND02 := "DO Probe - 404895",
            COMMENT.COMMAND03 := "DO Probe - 404907",
            COMMENT.COMMAND04 := "DO Probe - 402089",
            COMMENT.COMMAND05 := "DO Probe - 402411",
            COMMENT.COMMAND06 := "DO Probe - 403497",
            COMMENT.COMMAND07 := "DO Probe - 405517",
            COMMENT.COMMAND08 := "DO Probe - 405517",
            COMMENT.COMMAND09 := "DO Probe - 405521",
            COMMENT.COMMAND10 := "DO Probe - 405521",
            COMMENT.COMMAND11 := "DO Probe - 405535",
            COMMENT.COMMAND12 := "DO Probe - 405535",
            COMMENT.COMMAND13 := "DO Probe - 409000",
            COMMENT.COMMAND15 := "pH Probe - 402091 - pH Value Raw",
            COMMENT.COMMAND16 := "pH Probe - 402093",
            COMMENT.COMMAND17 := "pH Probe - 404895",
            COMMENT.COMMAND18 := "pH Probe - 404907",
            COMMENT.COMMAND19 := "pH Probe - 402411",
            COMMENT.COMMAND20 := "pH Probe - 403497",
            COMMENT.COMMAND21 := "pH Probe - 402535",
            COMMENT.COMMAND22 := "pH Probe - 402535",
            COMMENT.COMMAND23 := "pH Probe - 409000",
            COMMENT.COMMAND40 := "DO Probe - 404095",
            COMMENT.COMMAND41 := "pH Probe - 404095",
            COMMENT.COMMAND44 := "pH Probe - 404925",
            COMMENT.COMMAND45 := "pH Probe - 404925") := [2,0,0,2,16,0,[2,0,69,0,3.26334786e+000,0.00000000e+000],[2,0,74,0,0,0],[2,0,88,0,1.00813000e+003,4.94232109e+004
		,4.25465273e+004,5.53829994e+001,2.29820000e+001,3.26334786e+000,0.00000000e+000,0.00000000e+000
		,8.11999977e-001,-7.31000006e-002],[2,0,75,0,0,0],[2,0,0,0],[2,0,0,0],[2,0,0,0],[2,0,0,0],[2,0,80,0,0,0],[2,0,1,0],[2,0,77,0,5.90000000e+001
		,2.00000000e+001,0.00000000e+000,1.00000000e+002,2.60000000e+001,2.00000000e+001,1.00000000e+003
		],[2,0,0,0],[2,0,81,0,32,0,0],[2,0,0,0],[34,0,-118,0,-9.99900000e+003,2.80259693e-045],[2,0,80,0,2,0],[2,0,85,0,1.00866998e+003
		,4.93114727e+004,3.24061050e+001,-2.09799995e+001,2.29820000e+001,-9.99900000e+003,2.80259693e-045
		,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[2,0,73,0,2
		,0],[2,0,0,0],[2,0,0,0],[2,0,1,0],[2,0,76,0,1.40000000e+001,5.90000000e+001,3.49999994e-001,7.00000000e+000,3.70000000e+001
		],[2,0,0,0],[2,0,63,0,1,0],[2,0,-54,0,2,0],[2,0,80,0,2.66246708e-044,0.00000000e+000],[2,0,0,0]];
					OutputData (COMMENT.COMMAND04 := "DO Probe - 402089",
            COMMENT.COMMAND05 := "DO Probe - 402411",
            COMMENT.COMMAND06 := "DO Probe - 403497",
            COMMENT.COMMAND07 := "DO Probe - 405517",
            COMMENT.COMMAND09 := "DO Probe - 405521",
            COMMENT.COMMAND11 := "DO Probe - 405535",
            COMMENT.COMMAND13 := "DO Probe - 409000",
            COMMENT.COMMAND19 := "pH Probe - 402411",
            COMMENT.COMMAND20 := "pH Probe - 403497",
            COMMENT.COMMAND21 := "pH Probe - 402535",
            COMMENT.COMMAND23 := "pH Probe - 409000") := [1,0,0,0,0,[0,0],[0.00000000e+000,0.00000000e+000],[0,0,0,0],[0,0],[5.90000000e+001,2.00000000e+001,0.00000000e+000
		,1.00000000e+002,2.60000000e+001,2.00000000e+001,1.00000000e+003],[0,0,0],[0,0],[0.00000000e+000,0.00000000e+000
		],[0,0,0,0],[1.40000000e+001,5.90000000e+001,3.49999994e-001,7.00000000e+000,3.70000000e+001],[0,0
		],[0.00000000e+000,0.00000000e+000]];
			END_CONNECTION

	END_MODULE

	MODULE Wago_RIO (Description := "Wago IO via Ethernet",
	                 Parent := "Local",
	                 ParentModPortId := 3,
	                 CatalogNumber := "ETHERNET-MODULE",
	                 Vendor := 1,
	                 ProductType := 0,
	                 ProductCode := 18,
	                 Major := 1,
	                 Minor := 1,
	                 PortLabel := "A1",
	                 NodeAddress := "192.168.1.19",
	                 CommMethod := 536870916,
	                 ConfigMethod := 8388612,
	                 Mode := 2#0000_0000_0000_0000,
	                 CompatibleModule := 0,
	                 KeyMask := 2#0000_0000_0000_0000,
	                 PrimCxnInputSize := 14,
	                 PrimCxnOutputSize := 15,
	                 SecCxnInputSize := 0,
	                 SecCxnOutputSize := 0)
			ConfigData  := [4,1,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
			CONNECTION Standard (Rate := 10000,
			                     InputCxnPoint := 107,
			                     InputSize := 14,
			                     OutputCxnPoint := 101,
			                     OutputSize := 15,
			                     EventID := 0,
			                     Unicast := Yes)
					InputData (COMMENT.DATA[0] := "WAGO IO AI Low Byte Slot 1 Ch1",
            COMMENT.DATA[1] := "WAGO IO AI High Byte Slot 1 Ch1",
            COMMENT.DATA[2] := "WAGO IO AI Low Byte Slot 1 Ch2",
            COMMENT.DATA[3] := "WAGO IO AI High Byte Slot 1 Ch2",
            COMMENT.DATA[4] := "WAGO IO AI Low Byte Slot 1 Ch3",
            COMMENT.DATA[5] := "WAGO IO AI High Byte Slot 1 Ch3",
            COMMENT.DATA[6] := "WAGO IO AI Low Byte Slot 1 Ch4",
            COMMENT.DATA[7] := "WAGO IO AI High Byte Slot 1 Ch4",
            COMMENT.DATA[8] := "WAGO IO AI Low Byte Slot 2 Ch1",
            COMMENT.DATA[9] := "WAGO IO AI High Byte Slot 2 Ch1",
            COMMENT.DATA[10] := "WAGO IO AI Low Byte Slot 2 Ch2",
            COMMENT.DATA[11] := "WAGO IO AI High Byte Slot 2 Ch2",
            COMMENT.DATA[12] := "WAGO IO DI Slot 6 Ch 1-8",
            COMMENT.DATA[13] := "WAGO IO DI Slot 6 Ch 9-16") := [[0,0,0,0,0,0,3,0,57,4,52,33,0,0]];
					OutputData (COMMENT.DATA[0] := "WAGO IO AO Low Byte Slot 3 Ch1",
            COMMENT.DATA[1] := "WAGO IO AO High Byte Slot 3 Ch1",
            COMMENT.DATA[2] := "WAGO IO AO Low Byte Slot 3 Ch2",
            COMMENT.DATA[3] := "WAGO IO AO High Byte Slot 3 Ch2",
            COMMENT.DATA[4] := "WAGO IO AO Low Byte Slot 5 Ch1",
            COMMENT.DATA[5] := "WAGO IO AO High Byte Slot 5 Ch1",
            COMMENT.DATA[6] := "WAGO IO AO Low Byte Slot 5 Ch2",
            COMMENT.DATA[7] := "WAGO IO AO High Byte Slot 5 Ch2",
            COMMENT.DATA[8] := "WAGO IO AO Low Byte Slot 5 Ch3",
            COMMENT.DATA[9] := "WAGO IO AO High Byte Slot 5 Ch3",
            COMMENT.DATA[10] := "WAGO IO AO Low Byte Slot 5 Ch4",
            COMMENT.DATA[11] := "WAGO IO AO High Byte Slot 5 Ch4",
            COMMENT.DATA[12] := "WAGO IO DO Slot 7 Ch1-8",
            COMMENT.DATA[12].0 := "Wago IO Slot 2 Ch1 Air Valve",
            COMMENT.DATA[12].1 := "Wago IO Slot 2 Ch2 O2 Valve",
            COMMENT.DATA[12].2 := "Wago IO Slot 2 Ch3 CO2 Valve",
            COMMENT.DATA[12].3 := "Wago IO Slot 2 Ch4 Relay",
            COMMENT.DATA[12].4 := "Wago IO Slot 2 Ch5",
            COMMENT.DATA[12].5 := "HMI VPN Enable Output (Wago IO Slot 2 Ch6)",
            COMMENT.DATA[12].6 := "Wago IO Slot 2 Ch7",
            COMMENT.DATA[12].7 := "Wago IO Slot 2 Ch 8",
            COMMENT.DATA[13] := "WAGO IO DO Slot 7 Ch9-16",
            COMMENT.DATA[13].0 := "Wago IO Slot 2 Ch9",
            COMMENT.DATA[13].1 := "Wago IO Slot 2 Ch10",
            COMMENT.DATA[13].2 := "Wago IO Slot 2 Ch11",
            COMMENT.DATA[13].3 := "Wago IO Slot 2 Ch12",
            COMMENT.DATA[13].4 := "Wago IO Slot 2 Ch13",
            COMMENT.DATA[13].5 := "Wago IO Slot 2 Ch14",
            COMMENT.DATA[13].6 := "Wago IO Slot 2 Ch15",
            COMMENT.DATA[13].7 := "Wago IO Slot 2 Ch16",
            COMMENT.DATA[14] := "WAGO IO DO Slot 8, Slot 9",
            COMMENT.DATA[14].0 := "Wago IO Slot 5 Ch1 Pump 1 Start",
            COMMENT.DATA[14].1 := "Wago IO Slot 5 Ch2 Pump 1 FWD/REV",
            COMMENT.DATA[14].2 := "Wago IO Slot 5 Ch3 Pump 2 Start",
            COMMENT.DATA[14].3 := "Wago IO Slot 5 Ch4 Pump 2 FWD/REV",
            COMMENT.DATA[14].4 := "Wago IO Slot 6 Ch1 Filter Heater Supply",
            COMMENT.DATA[14].5 := "Wago IO Slot 6 Ch2",
            COMMENT.DATA[14].6 := "Wago IO Slot 6 Ch3",
            COMMENT.DATA[14].7 := "Wago IO Slot 6 Ch4") := [[0,0,0,64,0,0,0,0,0,0,0,0,0,0,0]];
			END_CONNECTION

	END_MODULE

	ADD_ON_INSTRUCTION_DEFINITION P_Alarm (Description := "Alarm",
	                                       Revision := "4.10",
	                                       RevisionExtension := ".00 Release",
	                                       RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                       Vendor := "Rockwell Automation",
	                                       ExecutePrescan := Yes,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := Yes,
	                                       CreatedDate := "2008-02-29T20:40:04.200Z",
	                                       CreatedBy := "Not Available",
	                                       EditedDate := "2020-12-08T03:29:55.213Z",
	                                       EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                       SoftwareRevision := "v32.02",
	                                       AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis instruction monitors one input condition and provides one Alarm with:$N  * configurable latching (reset required) and acknowledgement requirement$N  * configurable alarm severity$N      1 to 250       = Low  (blue, typ. informational)$N      251 to 500   = Medium  (yelllow, typ. warning)$N      501 to 750   = High  (red, typ. process exception)$N      751 to 1000 = Urgent  (magenta, typ. equip. fault)$N  * configurable minimum ON time (e.g., to ensure it is seen by the HMI)$N  * commands to suppress/unsuppress (Prog), shelve/unshelve (Oper)$N        and disable/enable (Maint) the alarm.$N  * configurable amount of time shelved to automatically unshelve an alarm$N  * FTA&E support for suppressed, shelved and disabled states (V7.0)$N  * a Maintenance $QTest$Q command, which triggers the alarm for the minimum$N     alarm time for testing purposes.$N$NNOTE regarding parameter naming:$N  FTAE names (same as ALMD instruction) are used instead$N  of the ANSI/ISA 18.2-2009 names, as follows:$N   $QDisabled$Q is the equivalent of $QOut of Service$Q in ISA 18.2.$N      (The Disabled state is owned by Maintenance.)$N   $QSuppressed$Q is the equivalent of $QSuppressed by Design$Q in$N      ISA 18.2. (The Suppressed state is owned by Program logic.)$N   $QShelved$Q is the same as in ISA 18.2.$N      (The Shelved state is owned by Operator, but may be cleared$N      by Program logic based on time, shift change, etc.)$N$NThis instruction is usually nested within other instructions, with one instance$Nused for each Alarm generated by the containing instruction.  It may also be$Nused as a standalone instruction for Alarm conditions generated by custom logic.$N$NFTAE Alarm Setup:$N  (object).(alarm).Com_AE.0:  Alarm to FTAE$N    .Com_AE.1:   Ack to/from FTAE$N    .Com_AE.3:   Shelved from FTAE Status$N    .Com_AE.4:   Shelve/Reshelve to FTAE Control (auto reset)$N    .Com_AE.5:   Unshelve to FTAE Control (auto reset)$N    .Com_AE.6:   Suppressed from FTAE Status$N    .Com_AE.7:   Suppress to FTAE Control (auto reset)$N    .Com_AE.8:   Unsuppress to FTAE Control (auto reset)$N    .Com_AE.9:   Disabled from FTAE Status$N    .Com_AE.10: Disable to FTAE Control (auto reset)$N    .Com_AE.11: Enable to FTAE Control (auto reset)$N   all other bits unused$N    .Cfg_MaxShelfT is also used in FTAE config.$N    .Cfg_Severity is used in FTAE for FTView 8.x and later.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Unmodified, up-rev only for Library 4.10.00$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-07 Patch01)$NSee 4.00 Release Notes for details.$N* Changed Inf_Lib and Inf_Type to HMI_Lib and HMI_Type.$N* Deleted Cfg_PCmdClear.  All Program Commands are now self-clearing.$N* Aligned ready bit naming with command bit names.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by containing objects.$N* Modified to remove Suppressed from the conditions which show the$N    $QInhibited$Q breadcrumb.$N* Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp : BOOL (Description := "Alarm Condition Input 1=Alarm",
			               Usage := Input,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               DefaultData := 1);
			Inp_OoS OF Com_AE.2 (Description := "1=Out of Service (from object$'s P_CmdSrc)",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No);
			Inp_Reset : BOOL (Description := "1=Reset Alarm requiring reset",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Cfg_Exists : BOOL (Description := "1=Alarm configured to exist, 0=Does not exist, don$'t scan",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 1);
			Cfg_ResetReqd : BOOL (Description := "1=Latched Alarm, a Reset is required to clear this Alarm",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_AckReqd : BOOL (Description := "1=Acknowledge required for this Alarm",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1);
			Cfg_AllowShelve : BOOL (Description := "1=Allow Operator to Shelve this Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 1);
			Cfg_AllowDisable : BOOL (Description := "1=Allow Maintenance to Disable this Alarm",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 1);
			Cfg_Severity : DINT (Description := "Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 750);
			Cfg_MaxShelfT : DINT (Description := "Auto unshelve after shelved this long (1..32767 minutes)",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 480);
			Cfg_AlmMinOnT : DINT (Description := "Minimum time Alm output stays on (sec)",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 5);
			PCfg_AllowExist : BOOL (Description := "1=Alarm can be configured to exist, 0=other configs make alarm meaningless",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 1);
			PCmd_Reset : BOOL (Description := "Program Command to Reset latched alarm",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_Ack : BOOL (Description := "Program Command to Acknowledge alarm",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			PCmd_Suppress : BOOL (Description := "Program Command to Suppress by Design (inhibits new alarm)",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			PCmd_Unsuppress : BOOL (Description := "Program Command to Unsuppress (allows new alarm)",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			PCmd_Unshelve : BOOL (Description := "Program Command to Unshelve (e.g., on shift change)",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Val_Notify : DINT (Description := "Current Alarm Severity and Acknowledgement (enumeration)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Val_SecToUnshelve : DINT (Description := "Number of Seconds until this alarm unshelves itself (mmm:ss)",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			Val_MinToUnshelve : DINT (Description := "Number of minutes until this alarm unshelves itself (mmm:ss)",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			Alm OF Com_AE.0 (Description := "Alarm output 1=In Alarm",
			               Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read/Write);
			Ack OF Com_AE.1 (Description := "Alarm acknowledged status: 1=Ack rcvd",
			               Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read/Write);
			Shelved OF Com_AE.3 (Description := "1=Alarm has been Shelved by Operator (inhibits new alarm)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read/Write);
			Suppressed OF Com_AE.6 (Description := "1=Alarm has been Suppressed by Program (inhibits new alarm)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write);
			Disabled OF Com_AE.9 (Description := "1=Alarm has been Disabled by Maintanance (inhibits new alarm)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read/Write);
			Sts_AlmInh : BOOL (Description := "1=Alarm has been suppressed, shelved or disabled, display $QI$Q icon",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck OF ORdy_Ack (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail Err_ bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time (use 0 to 2147483)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_Severity : BOOL (Description := "1=Error in Config: Invalid Severity (use 1 to 4)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			P_Alarm : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Wrk_Alm : BOOL (Description := "Internal Alarm Status",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Suppressed : BOOL (Description := "Internal Alarm Suppressed Status",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			Wrk_AlmMinOnT : TIMER (Description := "Alarm output minimum ON time to be seen by alarm server",
			                        ExternalAccess := None,
			                        DefaultData := "[0,5000,0]");
			Wrk_AutoAckT : TIMER (Description := "Time to clear Ack bit when Ack not required",
			                       ExternalAccess := None,
			                       DefaultData := "[0,5000,0]");
			Wrk_ShelfT : TIMER (Description := "Time to auto Unshelve a Shelved Alarm",
			                     ExternalAccess := Read Only,
			                     DefaultData := "[0,0,0]");
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Com_AE : INT (Description := "Communication with HMI / Alarm/Event Server (see bit descriptions)",
			                 COMMENT.0 := "Alarm to AE",
			                 COMMENT.1 := "Acked from AE Status, Ack to AE Control",
			                 COMMENT.2 := "Out of Service (from parent object$'s P_CmdSrc)",
			                 COMMENT.3 := "Shelved from AE Status",
			                 COMMENT.4 := "Shelve to AE Control",
			                 COMMENT.5 := "Unshelve to AE Control",
			                 COMMENT.6 := "Suppressed from AE Status",
			                 COMMENT.7 := "Suppress to AE Control",
			                 COMMENT.8 := "Unsuppress to AE Control",
			                 COMMENT.9 := "Disabled from AE Status",
			                 COMMENT.10 := "Disable to AE Control",
			                 COMMENT.11 := "Enable to AE Control",
			                 COMMENT.12 := "(not used)",
			                 COMMENT.13 := "(not used)",
			                 COMMENT.14 := "(not used)",
			                 COMMENT.15 := "(not used)",
			                 RADIX := Binary,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 2);
			Cfg_Tag : STRING_20 (Description := "Alarm Tag Text (e.g., $QLAHH-101$Q)",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Cond : STRING_20 (Description := "Alarm Condition Text (e.g., $QHigh-High PV$Q)",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[15,'Alarm Condition$00$00$00$00$00']");
			Wrk_SecToUnshelve : DINT (Description := "Number of seconds until this alarm unshelves itself",
			                            RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			HMI_Type : STRING_16 (Description := "Must contain AOI name, used for HMI and Information S/W",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[7,'P_Alarm$00$00$00$00$00$00$00$00$00']");
			ORdy_Unshelve : BOOL (Description := "1=Ready for OCmd_Unshelve (enables HMI button)",
			                        RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			ORdy_Shelve : BOOL (Description := "1=Ready for OCmd_Shelve (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			MRdy_Test : BOOL (Description := "1=Ready for MCmd_Test (enables HMI button)",
			                    RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			MRdy_Enable : BOOL (Description := "1=Ready for MCmd_Enable (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			MRdy_Disable : BOOL (Description := "1=Ready for MCmd_Disable (enables HMI button)",
			                       RADIX := Decimal,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			OCmd_Unshelve : BOOL (Description := "Operator Command to Unshelve alarm (allows new alarm)",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			OCmd_Shelve : BOOL (Description := "Operator Command to Shelve Alarm (inhibits new alarm)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			OCmd_Ack : BOOL (Description := "Operator Command to Acknowledge alarm",
			                   RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Operator Command to Reset latched alarm",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Test : BOOL (Description := "Maintenance Command to Test alarm (issued for minimum alarm time)",
			                    RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			MCmd_Enable : BOOL (Description := "Maintenance Command to Enable alarm (allows new alarm)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			MCmd_Disable : BOOL (Description := "Maintenance Command to Disable alarm (inhibits new alarm)",
			                       RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			ORdy_Ack : BOOL (Description := "1=Ready for OCmd_Ack (enables HMI button)",
			                   RADIX := Decimal,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Perform Alarm processing, but Invert Alarm Input ($QInp$Q) for use on LD rung (EnableIn False)")
				RC: "============================================================$N"
				    "P_Alarm: EnableInFalse (False Rung) Handling$N"
				    "============================================================$N"
				    "When EnableIn is FALSE (False Rung), the Input$N"
				    "($QInp$Q) is inverted.  This allows the P_Alarm instruction$N"
				    "to be used on a simple Ladder Diagram rung:$N"
				    "$N"
				    "XIC  (condition)   P_Alarm (Alarm)$N"
				    "$N"
				    "All processing is identical to the normal Logic$N"
				    "routine, except references to Inp are inverted!$N"
				    "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "In the object containing this alarm, other configuration (such as not having$N"
				    "any limit switches) may make this particular alarm meaningless.$N"
				    "The Program Configuration $QAllow Exist$Q is used to hide this alarm$N"
				    "on the object$'s faceplate and other graphics, and forces the Cfg_Exist to 0.";
				N: XIO(PCfg_AllowExist)OTU(Cfg_Exists);
				RC: "$N"
				    "This rung gets the Alarm Minimum ON Time Configuration$N"
				    "and the Auto Unshelve Time Configuration$N"
				    "values and sets the corresponding timer presets.$N"
				    "If the Minimum ON Time Configuration results in a timer preset$N"
				    "less than 5 seconds, the preset is set to 5 seconds.$N"
				    "If the Auto Unshelve Time Configuration results in a negative$N"
				    "timer preset, the preset is set to 28800 seconds (8 hours).$N"
				    "Either bad Config is flagged (Err_Timer).$N"
				    "Bad Config is also flagged if the Cfg_Severity is out of range (valid = 1..1000) (Err_Severity).";
				N: XIC(Cfg_Exists)[[MUL(Cfg_AlmMinOnT,1000,Wrk_AlmMinOnT.PRE) LES(Wrk_AlmMinOnT.PRE,5000) MOV(5,Cfg_AlmMinOnT) MOV(5000,Wrk_AlmMinOnT.PRE) ,MUL(Cfg_MaxShelfT,60000,Wrk_ShelfT.PRE) XIC(Wrk_ShelfT.PRE.31) MOV(480,Cfg_MaxShelfT) MOV(28800000,Wrk_ShelfT.PRE) ] OTE(Err_Timer) ,LIM(1001,Cfg_Severity,0) MOV(1000,Cfg_Severity) OTE(Err_Severity) ]OTE(Sts_Err);
				RC: "The Auto Ack time is ALWAYS five seconds.";
				N: MOV(5000,Wrk_AutoAckT.PRE);
				RC: "When the Alarm initially occurs, the Auto Ack timer is started.$N"
				    "If this Alarm is set for $QAck Not Required$Q, it is automatically $N"
				    "Acknowledged after the AutoAck time expires.$N"
				    "$N"
				    "This pulsing of the Ack bit OFF then ON allows the $QAck Not Required$Q$N"
				    "configuration to be used with View 32, View ME and other legacy$N"
				    "alarm systems that don$'t support optional ack.";
				N: XIO(Ack)TON(Wrk_AutoAckT,?,?);
				RC: "If this alarm does not exist, set it to its default state (no alarm, acknowleded,$N"
				    "uninhibited, unsuppressed, enabled) and clear any received commands.$N"
				    "Then jump over the remainder of the Logic and return.";
				N: XIO(Cfg_Exists)[XIC(Wrk_AutoAckT.DN) OTL(Ack) ,OTU(Wrk_Alm) OTU(Shelved) OTU(Wrk_Suppressed) OTU(Disabled) OTU(Sts_AlmInh) ,OTU(PCmd_Reset) OTU(PCmd_Ack) OTU(PCmd_Unshelve) OTU(PCmd_Suppress) OTU(PCmd_Unsuppress) ,OTU(OCmd_Reset) OTU(OCmd_Ack) OTU(OCmd_Shelve) OTU(OCmd_Unshelve) ,OTU(MCmd_Disable) OTU(MCmd_Enable) RES(Wrk_AlmMinOnT) RES(Wrk_ShelfT) ]JMP(End);
				RC: "============================================================$N"
				    "COMMAND PROCESSING$N"
				    "============================================================$N"
				    "These rungs handle received Commands:$N"
				    "Operator Commands (OCmd_xx) and Maintenance Commands$N"
				    "(MCmd_xx) from the HMI and$N"
				    "Program Command (PCmd_xx) from other objects.$N"
				    "$N"
				    "NOTE:  ALARM COMMANDS ARE ACCEPTED REGARDLESS OF MODE.$N"
				    "$N"
				    "This rung receives the Program Alarm Inhibit Command.$N"
				    "If configured for EDGE, the Command is cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: XIC(PCmd_Suppress)OTU(PCmd_Suppress)OTL(Wrk_Suppressed)OTL(Com_AE.7)OTU(Com_AE.8);
				RC: "This rung receives the Program Alarm Unsuppress Command (Unsuppress wins over Suppress).$N"
				    "If configured for LEVEL, Suppressed is cleared if PCmd_Suppress is cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: XIC(PCmd_Unsuppress)OTU(PCmd_Unsuppress)OTU(Wrk_Suppressed)OTU(Com_AE.7)OTL(Com_AE.8);
				RC: "This rung receives the Operator Shelve Command.$N"
				    "If the command is received while shelved, the shelf timer starts over (reset).";
				N: XIC(OCmd_Shelve)OTU(OCmd_Shelve)XIC(Cfg_AllowShelve)OTL(Shelved)OTL(Com_AE.4)OTU(Com_AE.5)RES(Wrk_ShelfT);
				RC: "This rung times how long the alarm has been shelved.$N"
				    "If the Shelf Timer expires (and its preset > 0), automatically unshelve the alarm.";
				N: XIC(Shelved)TON(Wrk_ShelfT,?,?);
				RC: "This rung receives the Operator Unshelve Command (Unshelve wins over Shelve)$N"
				    "and the Program Unshelve Command$N"
				    "Also Unshelve the alarm if the Shelf Timer expires (if preset > 0).$N"
				    "$N"
				    "NOTE: Shelved can also be set/cleared directly by the HMI (FTA&E support).";
				N: [XIC(OCmd_Unshelve) OTU(OCmd_Unshelve) ,XIC(PCmd_Unshelve) OTU(PCmd_Unshelve) ,XIC(Wrk_ShelfT.DN) NEQ(Wrk_ShelfT.PRE,0) ,XIO(Cfg_AllowShelve) ]OTU(Shelved)OTU(Com_AE.4)OTL(Com_AE.5);
				RC: "This rung receives the Maintenance Alarm Disable Command.";
				N: XIC(MCmd_Disable)OTU(MCmd_Disable)XIC(Cfg_AllowDisable)OTL(Disabled)OTL(Com_AE.10)OTU(Com_AE.11);
				RC: "This rung receives the Maintenance Alarm Enable Command (Enable wins over Disable)$N"
				    "$N"
				    "NOTE: Disabled can also be set/cleared directly by the HMI (FTA&E support).";
				N: [XIC(MCmd_Enable) ,XIO(Cfg_AllowDisable) ]OTU(MCmd_Enable)OTU(Disabled)OTU(Com_AE.10)OTL(Com_AE.11);
				RC: "If the Alarm is Disabled (Maint), or Shelved (Oper),$N"
				    "then post the $Qalarm inhibited$Q breadcrumb and do not$N"
				    "allow a new alarm to be issued.$N"
				    "$N"
				    "NOTE:  If the Alarm is Suppressed (Prog), this is assumed to be $QSuppressed by Design$Q$N"
				    "(ANSI/ISA-18.2-2016) and NOT shown to the operator with an $Qinhibited$Q$N"
				    "breadcrumb!  He just never sees the point as being In Alarm!$N"
				    "$N"
				    "@@@@@  Unlatch and Latch are used to avoid a verification  @@@@@$N"
				    "@@@@@  warning in combination with Rung 2$'s OTU (above)!  @@@@@$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Modified to remove Suppressed from the conditions to show the $QInhibited$Q breadcrumb.  #####";
				N: OTU(Sts_AlmInh)[XIC(Disabled) ,XIC(Shelved) ]OTL(Sts_AlmInh);
				RC: "This rung receives the Alarm Acknowledge Commands$N"
				    "$N"
				    "NOTE: Acknowledge can also be set/cleared directly by the HMI.";
				N: [XIC(PCmd_Ack) OTU(PCmd_Ack) ,XIC(OCmd_Ack) OTU(OCmd_Ack) ,XIO(Wrk_AutoAckT.TT) XIO(Cfg_AckReqd) ]OTL(Ack);
				RC: "This rung receives the Alarm Reset Commands.$N"
				    "$N"
				    "If the Alarm Reset Command is received and, either, the Input condition has returned$N"
				    "to normal, or the alarm is out of service, disabled, suppressed or shelved,$N"
				    "the Alarm is CLEARED and ACKNOWLEDGED (to match ALMD behavior!!!).$N"
				    "$N"
				    "@@@@@  $QInp$Q is Inverted in the EnableInFalse Routine!  @@@@@$N"
				    "$N"
				    "#####  Modified to remove Suppressed from the conditions to show the $QInhibited$Q breadcrumb.  #####$N"
				    "#####  Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.  #####";
				N: XIO(Wrk_AutoAckT.TT)[XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ][XIC(Inp) ,XIC(Sts_AlmInh) ,XIC(Wrk_Suppressed) ,XIC(Inp_OoS) ]OTL(Ack)OTU(Wrk_Alm);
				RC: "============================================================$N"
				    "ALARM GENERATION$N"
				    "============================================================$N"
				    "This rung CLEARS the Alarm when the alarm condition clears and its$N"
				    "Minimum On Time has expired, IF Reset is NOT Required.$N"
				    "$N"
				    "@@@@@  $QInp$Q is Inverted in the EnableInFalse Routine!  @@@@@$N"
				    "$N"
				    "#####  Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.  #####";
				N: [[XIC(Inp) ,XIC(Inp_OoS) ] XIO(Cfg_ResetReqd) XIO(Wrk_AlmMinOnT.TT) ,XIC(Disabled) XIO(Wrk_AutoAckT.TT) ]OTU(Wrk_Alm);
				RC: "If the Alarm Input (Inp) is true (inverted in EnableInFalse) and the alarm is (or becomes)$N"
				    "In Service, Enabled, Unsuppressed and Unshelved, this rung sets the Alarm (Alm) bit.$N"
				    "The Acknowledge (Ack) bit is cleared when the Alarm initially occurs.$N"
				    "$N"
				    "@@@@@  $QInp$Q is Inverted in the EnableInFalse Routine!  @@@@@$N"
				    "$N"
				    "#####  Modified to remove Suppressed from the conditions to show the $QInhibited$Q breadcrumb.  #####$N"
				    "#####  Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.  #####";
				N: [XIO(Inp) XIO(Sts_AlmInh) XIO(Wrk_Suppressed) XIO(Inp_OoS) ,XIC(MCmd_Test) OTU(MCmd_Test) ][XIO(Wrk_Alm) OTU(Ack) ,OTL(Wrk_Alm) ];
				RC: "============================================================$N"
				    "OPERATOR COMMAND READIES$N"
				    "============================================================$N"
				    "This Alarm is ready for (requires) an Acknowledgement if the Alarm$N"
				    "is not Acknowledged (an Acknowledge was Required when the alarm occurred).$N"
				    "$N"
				    "This Alarm is ready for (requires) a Reset if there is an Alarm, Reset is Required,$N"
				    "and either the alarm condition has CLEARED or the alarm is$N"
				    "Out of Service, Shelved, Suppressed or Disabled.$N"
				    ".$N"
				    "If the Alarm is NOT Shelved, it is ready for Shelve.$N"
				    "$N"
				    "If the Alarm IS Shelved, it is ready for Unshelve.$N"
				    "$N"
				    "If the Alarm is NOT Disabled, it is ready for Disable.$N"
				    "$N"
				    "If the Alarm IS Disabled, it is ready for Enable.$N"
				    "$N"
				    "NOTE: This rung appears before the Values/Status rung because the Rdy_Reset$N"
				    "condition is used to eliminate redundant logic in the rung below for Val_Notify.0.$N"
				    "$N"
				    "@@@@@  $QInp$Q is Inverted in the EnableInFalse Routine!  @@@@@$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by containing objects.  #####$N"
				    "#####  Modified to remove Suppressed from the conditions to show the $QInhibited$Q breadcrumb.  #####$N"
				    "#####  Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.  #####";
				N: LBL(End)XIC(Cfg_Exists)[XIO(Wrk_AutoAckT.TT) [XIO(Ack) OTE(ORdy_Ack) ,XIC(Wrk_Alm) XIC(Cfg_ResetReqd) [XIC(Inp) ,XIC(Sts_AlmInh) ,XIC(Wrk_Suppressed) ,XIC(Inp_OoS) ] OTE(ORdy_Reset) ] ,XIC(Cfg_AllowShelve) OTE(ORdy_Shelve) ,XIC(Shelved) OTE(ORdy_Unshelve) ,XIO(Disabled) XIC(Cfg_AllowDisable) OTE(MRdy_Disable) ,XIC(Disabled) OTE(MRdy_Enable) ,XIO(Wrk_Alm) OTE(MRdy_Test) ];
				RC: "============================================================$N"
				    "VALUE / STATUS GENERATION$N"
				    "============================================================$N"
				    "This rung copies the internal working status (Suppressed, In Alarm)$N"
				    "to public Status bits.  Note that internal working bits are used so that$N"
				    "outside objects cannot manipulate the state of this object$N"
				    "by setting/clearing its Status and Alarm bits.$N"
				    "$N"
				    "Public Status is generated for:$N"
				    "Alarm (with minimum ON time to be seen by polling)$N"
				    "Alarm Suppressed$N"
				    "Unsuppressed, Unshelved and Enabled are generated for HMI (FTVSE 7).$N"
				    "$N"
				    "(Ack, Shelved and Disabled can be set/cleared by the HMI directly.$N"
				    "Note that these bits are $Qread/write$Q outputs in the parameter definition.)";
				N: [XIC(Wrk_Alm) OTE(Alm) TON(Wrk_AlmMinOnT,?,?) ,XIC(Wrk_Suppressed) OTE(Suppressed) ];
				RC: "Notify Level (color, blink) is determined here.$N"
				    "@@@@@  Note how the bottom 3 bits of the Severity are shifted left 1 for Val_Notify.  @@@@@$N"
				    "$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "$N"
				    "NOTE that the alarm bell icon will blink, even though the alarm is Acknowledged,$N"
				    "if an Alarm Reset is required (to get the Operator$'s attention).";
				N: [[XIO(Ack) ,XIC(ORdy_Reset) ] OTE(Val_Notify.0) ,XIC(Wrk_Alm) [[LIM(1,Cfg_Severity,250) ,LIM(501,Cfg_Severity,750) ] OTE(Val_Notify.1) ,LIM(251,Cfg_Severity,750) OTE(Val_Notify.2) ,LIM(751,Cfg_Severity,1000) OTE(Val_Notify.3) ] ,OTU(Val_Notify.4) OTU(Val_Notify.5) OTU(Val_Notify.6) OTU(Val_Notify.7) ];
				RC: "This rung calculates the number of seconds until this alarm $Qunshelves$Q itself.$N"
				    "If the alarm is already unshelved, clear this number.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Modified to optimize scan time.  ####";
				N: XIO(Shelved)CLR(Val_MinToUnshelve)CLR(Val_SecToUnshelve);
				RC: "This rung takes the time remaining until the alarm will be automatically unshelved (milliseconds),$N"
				    "converts it to seconds, then reports it in  minutes : seconds format for display on the HMI.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Modified to optimize scan time.  ####";
				N: XIC(Shelved)CPT(Wrk_SecToUnshelve,(Wrk_ShelfT.PRE-Wrk_ShelfT.ACC)/1000)DIV(Wrk_SecToUnshelve,60,Val_MinToUnshelve)MOD(Wrk_SecToUnshelve,60,Val_SecToUnshelve);
		END_ROUTINE

		ROUTINE Logic (Description := "Perform Alarm processing: delay, latch/reset, acknowledge, enable/disable, inhibit/uninhibit, suppress/unsuppress")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_Alarm:  PROCESS -- ALARM (sub-block)$N"
				    "============================================================$N"
				    "Revision 4.10.00 Release  2019-03-08:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, and V3.x: Revision History archived.$N"
				    "V4.00.00  2018-06-07:  Changed Inf_ items to HMI_. Deleted Cfg_PCmdClear.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyAck and Sts_RdyReset for use by containing objects.$N"
				    "Modified to remove Suppressed from the conditions which show$N"
				    "the $QInhibited$Q breadcrumb.$N"
				    "Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.$N"
				    "V4.10.00  2019-03-08:  Unmodified, up-rev only for Library 4.10.00$N"
				    "============================================================$N"
				    "This instruction monitors one input condition and provides one Alarm with:$N"
				    "  * configurable latching (reset required) and acknowledgement requirement$N"
				    "  * configurable alarm severity$N"
				    "1..250 = Low  (blue, typ. informational)$N"
				    "251-500 = Medium  (yelllow, typ. warning)$N"
				    "501-750 = High  (red, typ. process exception)$N"
				    "751-1000 = Urgent  (magenta, typ. equip. fault)$N"
				    "* configurable minimum ON time (e.g., to ensure it is seen by the HMI)$N"
				    "* commands to suppress/unsuppress (Prog), shelve/unshelve (Oper)$N"
				    "and disable/enable (Maint) the alarm.$N"
				    "* configurable amount of time shelved to automatically unshelve an alarm$N"
				    "* FTA&E support for suppressed, shelved and disabled states (V7.0)$N"
				    "$N"
				    "NOTE regarding parameter naming:$N"
				    "FTA&E names (same as ALMD instruction) are used instead$N"
				    "of the ANSI/ISA 18.2-2016 names, as follows:$N"
				    "$QDisabled$Q is the equivalent of $QOut of Service$Q in ISA 18.2.$N"
				    "(the Disabled state is owned by Maintenance)$N"
				    "$QSuppressed$Q is the equivalent of $QSuppressed by Design$Q in ISA 18.2.$N"
				    "(the Suppressed state is owned by Program logic)$N"
				    "$QShelved$Q is the same as in ISA 18.2.$N"
				    "(the Shelved state is owned by Operator, but may be cleared$N"
				    "by Program logic based on time, shift change, etc.)$N"
				    "$N"
				    "This instruction is usually nested within other instructions, with one instance$N"
				    "used for each Alarm generated by the containing instruction.  It may also be$N"
				    "used as a standalone instruction for Alarm conditions generated by custom logic.$N"
				    "________________________________________$N"
				    "$N"
				    "FTAE Alarm Setup:$N"
				    "________________________________________$N"
				    "$N"
				    "(object).(alarm).Com_AE.0:  Alarm to FTAE$N"
				    ".Com_AE.1:   Ack to/from FTAE$N"
				    ".Com_AE.2:  Out of Service (from object$'s P_CmdSrc)$N"
				    ".Com_AE.3:   Shelved from FTAE Status$N"
				    ".Com_AE.4:   Shelve/Reshelve to FTAE Control (auto reset)$N"
				    ".Com_AE.5:   Unshelve to FTAE Control (auto reset)$N"
				    ".Com_AE.6:   Suppressed from FTAE Status$N"
				    ".Com_AE.7:   Suppress to FTAE Control (auto reset)$N"
				    ".Com_AE.8:   Unsuppress to FTAE Control (auto reset)$N"
				    ".Com_AE.9:   Disabled from FTAE Status$N"
				    ".Com_AE.10: Disable to FTAE Control (auto reset)$N"
				    ".Com_AE.11: Enable to FTAE Control (auto reset)$N"
				    "all other bits unused$N"
				    "    .Cfg_MaxShelfT is also used in FTAE config.$N"
				    ".Cfg_Severity is used by FTAE in FTView 8.x.$N"
				    "============================================================$N"
				    "POWERUP / INVALID STATE HANDLING$N"
				    "============================================================$N"
				    "All internal Work (state) bits maintain states through a power cycle and are$N"
				    "independent.  No first-scan logic is required.  See the Prescan routine for$N"
				    "powerup / prescan code.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.";
				N: JMP(SkipText)LOWER(Cfg_Tag,Cfg_Cond)LOWER(HMI_Lib,HMI_Type);
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "In the object containing this alarm, other configuration (such as not having$N"
				    "any limit switches) may make this particular alarm meaningless.$N"
				    "The Program Configuration $QAllow Exist$Q is used to hide this alarm$N"
				    "on the object$'s faceplate and other graphics, and forces the Cfg_Exist to 0.";
				N: LBL(SkipText)XIO(PCfg_AllowExist)OTU(Cfg_Exists);
				RC: "$N"
				    "This rung gets the Alarm Minimum ON Time Configuration$N"
				    "and the Auto Unshelve Time Configuration$N"
				    "values and sets the corresponding timer presets.$N"
				    "If the Minimum ON Time Configuration results in a timer preset$N"
				    "less than 5 seconds, the preset is set to 5 seconds.$N"
				    "If the Auto Unshelve Time Configuration results in a negative$N"
				    "timer preset, the preset is set to 28800 seconds (8 hours).$N"
				    "Either bad Config is flagged (Err_Timer).$N"
				    "Bad Config is also flagged if the Cfg_Severity is out of range (valid = 1..1000) (Err_Severity).";
				N: XIC(Cfg_Exists)[[MUL(Cfg_AlmMinOnT,1000,Wrk_AlmMinOnT.PRE) LES(Wrk_AlmMinOnT.PRE,5000) MOV(5,Cfg_AlmMinOnT) MOV(5000,Wrk_AlmMinOnT.PRE) ,MUL(Cfg_MaxShelfT,60000,Wrk_ShelfT.PRE) XIC(Wrk_ShelfT.PRE.31) MOV(480,Cfg_MaxShelfT) MOV(28800000,Wrk_ShelfT.PRE) ] OTE(Err_Timer) ,LIM(1001,Cfg_Severity,0) MOV(1000,Cfg_Severity) OTE(Err_Severity) ]OTE(Sts_Err);
				RC: "The Auto Ack time is ALWAYS five seconds.";
				N: MOV(5000,Wrk_AutoAckT.PRE);
				RC: "When the Alarm initially occurs, the Auto Ack timer is started.$N"
				    "If this Alarm is set for $QAck Not Required$Q, it is automatically $N"
				    "Acknowledged after the AutoAck time expires.$N"
				    "$N"
				    "This pulsing of the Ack bit OFF then ON allows the $QAck Not Required$Q$N"
				    "configuration to be used with View 32, View ME and other legacy$N"
				    "alarm systems that don$'t support optional ack.";
				N: XIO(Ack)TON(Wrk_AutoAckT,?,?);
				RC: "If this alarm does not exist, set it to its default state (no alarm, acknowleded,$N"
				    "uninhibited, unsuppressed, enabled) and clear any received commands.$N"
				    "Then jump over the remainder of the Logic and return.";
				N: XIO(Cfg_Exists)[XIC(Wrk_AutoAckT.DN) OTL(Ack) ,OTU(Wrk_Alm) OTU(Shelved) OTU(Wrk_Suppressed) OTU(Disabled) OTU(Sts_AlmInh) ,OTU(PCmd_Reset) OTU(PCmd_Ack) OTU(PCmd_Unshelve) OTU(PCmd_Suppress) OTU(PCmd_Unsuppress) ,OTU(OCmd_Reset) OTU(OCmd_Ack) OTU(OCmd_Shelve) OTU(OCmd_Unshelve) ,OTU(MCmd_Disable) OTU(MCmd_Enable) RES(Wrk_AlmMinOnT) RES(Wrk_ShelfT) ]JMP(End);
				RC: "============================================================$N"
				    "COMMAND PROCESSING$N"
				    "============================================================$N"
				    "These rungs handle received Commands:$N"
				    "Operator Commands (OCmd_xx) and Maintenance Commands$N"
				    "(MCmd_xx) from the HMI and$N"
				    "Program Command (PCmd_xx) from other objects.$N"
				    "$N"
				    "NOTE:  ALARM COMMANDS ARE ACCEPTED REGARDLESS OF MODE.$N"
				    "$N"
				    "This rung receives the Program Alarm Inhibit Command.$N"
				    "If configured for EDGE, the Command is cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: XIC(PCmd_Suppress)OTU(PCmd_Suppress)OTL(Wrk_Suppressed)OTL(Com_AE.7)OTU(Com_AE.8);
				RC: "This rung receives the Program Alarm Unsuppress Command (Unsuppress wins over Suppress).$N"
				    "If configured for LEVEL, Suppressed is cleared if PCmd_Suppress is cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: XIC(PCmd_Unsuppress)OTU(PCmd_Unsuppress)OTU(Wrk_Suppressed)OTU(Com_AE.7)OTL(Com_AE.8);
				RC: "This rung receives the Operator Shelve Command.$N"
				    "If the command is received while shelved, the shelf timer starts over (reset).";
				N: XIC(OCmd_Shelve)OTU(OCmd_Shelve)XIC(Cfg_AllowShelve)OTL(Shelved)OTL(Com_AE.4)OTU(Com_AE.5)RES(Wrk_ShelfT);
				RC: "This rung times how long the alarm has been shelved.$N"
				    "If the Shelf Timer expires (and its preset > 0), automatically unshelve the alarm.";
				N: XIC(Shelved)TON(Wrk_ShelfT,?,?);
				RC: "This rung receives the Operator Unshelve Command (Unshelve wins over Shelve)$N"
				    "and the Program Unshelve Command$N"
				    "Also Unshelve the alarm if the Shelf Timer expires (if preset > 0).$N"
				    "$N"
				    "NOTE: Shelved can also be set/cleared directly by the HMI (FTA&E support).";
				N: [XIC(OCmd_Unshelve) OTU(OCmd_Unshelve) ,XIC(PCmd_Unshelve) OTU(PCmd_Unshelve) ,XIC(Wrk_ShelfT.DN) NEQ(Wrk_ShelfT.PRE,0) ,XIO(Cfg_AllowShelve) ]OTU(Shelved)OTU(Com_AE.4)OTL(Com_AE.5);
				RC: "This rung receives the Maintenance Alarm Disable Command.";
				N: XIC(MCmd_Disable)OTU(MCmd_Disable)XIC(Cfg_AllowDisable)OTL(Disabled)OTL(Com_AE.10)OTU(Com_AE.11);
				RC: "This rung receives the Maintenance Alarm Enable Command (Enable wins over Disable)$N"
				    "$N"
				    "NOTE: Disabled can also be set/cleared directly by the HMI (FTA&E support).";
				N: [XIC(MCmd_Enable) ,XIO(Cfg_AllowDisable) ]OTU(MCmd_Enable)OTU(Disabled)OTU(Com_AE.10)OTL(Com_AE.11);
				RC: "If the Alarm is Disabled (Maint), or Shelved (Oper),$N"
				    "then post the $Qalarm inhibited$Q breadcrumb and do not$N"
				    "allow a new alarm to be issued.$N"
				    "$N"
				    "NOTE:  If the Alarm is Suppressed (Prog), this is assumed to be $QSuppressed by Design$Q$N"
				    "(ANSI/ISA-18.2-2016) and NOT shown to the operator with an $Qinhibited$Q$N"
				    "breadcrumb!  He just never sees the point as being In Alarm!$N"
				    "$N"
				    "@@@@@  Unlatch and Latch are used to avoid a verification  @@@@@$N"
				    "@@@@@  warning in combination with Rung 2$'s OTU (above)!  @@@@@$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Modified to remove Suppressed from the conditions to show the $QInhibited$Q breadcrumb.  #####";
				N: OTU(Sts_AlmInh)[XIC(Disabled) ,XIC(Shelved) ]OTL(Sts_AlmInh);
				RC: "This rung receives the Alarm Acknowledge Commands$N"
				    "$N"
				    "NOTE: Acknowledge can also be set/cleared directly by the HMI.";
				N: [XIC(PCmd_Ack) OTU(PCmd_Ack) ,XIC(OCmd_Ack) OTU(OCmd_Ack) ,XIO(Wrk_AutoAckT.TT) XIO(Cfg_AckReqd) ]OTL(Ack);
				RC: "This rung receives the Alarm Reset Commands.$N"
				    "$N"
				    "If the Alarm Reset Command is received and, either, the Input condition has returned$N"
				    "to normal, or the alarm is out of service, disabled, suppressed or shelved,$N"
				    "the Alarm is CLEARED and ACKNOWLEDGED (to match ALMD behavior!!!).$N"
				    "$N"
				    "#####  Modified to remove Suppressed from the conditions to show the $QInhibited$Q breadcrumb.  #####$N"
				    "#####  Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.  #####";
				N: XIO(Wrk_AutoAckT.TT)[XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ][XIO(Inp) ,XIC(Sts_AlmInh) ,XIC(Wrk_Suppressed) ,XIC(Inp_OoS) ]OTL(Ack)OTU(Wrk_Alm);
				RC: "============================================================$N"
				    "ALARM GENERATION$N"
				    "============================================================$N"
				    "This rung CLEARS the Alarm when the alarm condition clears and its$N"
				    "Minimum On Time has expired, IF Reset is NOT Required.$N"
				    "$N"
				    "#####  Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.  #####";
				N: [[XIO(Inp) ,XIC(Inp_OoS) ] XIO(Cfg_ResetReqd) XIO(Wrk_AlmMinOnT.TT) ,XIC(Disabled) XIO(Wrk_AutoAckT.TT) ]OTU(Wrk_Alm);
				RC: "If the Alarm Input (Inp) is true (inverted in EnableInFalse) and the alarm is (or becomes)$N"
				    "In Service, Enabled, Unsuppressed and Unshelved, this rung sets the Alarm (Alm) bit.$N"
				    "The Acknowledge (Ack) bit is cleared when the Alarm initially occurs.$N"
				    "$N"
				    "#####  Modified to remove Suppressed from the conditions to show the $QInhibited$Q breadcrumb.  #####$N"
				    "#####  Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.  #####";
				N: [XIC(Inp) XIO(Sts_AlmInh) XIO(Wrk_Suppressed) XIO(Inp_OoS) ,XIC(MCmd_Test) OTU(MCmd_Test) ][XIO(Wrk_Alm) OTU(Ack) ,OTL(Wrk_Alm) ];
				RC: "============================================================$N"
				    "OPERATOR COMMAND READIES$N"
				    "============================================================$N"
				    "This Alarm is ready for (requires) an Acknowledgement if the Alarm$N"
				    "is not Acknowledged (an Acknowledge was Required when the alarm occurred).$N"
				    "$N"
				    "This Alarm is ready for (requires) a Reset if there is an Alarm, Reset is Required,$N"
				    "and either the alarm condition has CLEARED or the alarm is $N"
				    "Out of Service, Shelved, Suppressed or Disabled.$N"
				    ".$N"
				    "If the Alarm is NOT Shelved, it is ready for Shelve.$N"
				    "$N"
				    "If the Alarm IS Shelved, it is ready for Unshelve.$N"
				    "$N"
				    "If the Alarm is NOT Disabled, it is ready for Disable.$N"
				    "$N"
				    "If the Alarm IS Disabled, it is ready for Enable.$N"
				    "$N"
				    "NOTE: This rung appears before the Values/Status rung because the Rdy_Reset$N"
				    "condition is used to eliminate redundant logic in the rung below for Val_Notify.0.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by containing objects.  #####$N"
				    "#####  Modified to remove Suppressed from the conditions to show the $QInhibited$Q breadcrumb.  #####$N"
				    "#####  Added Inp_OoS for Out of Service from parent object$'s P_CmdSrc.  #####";
				N: LBL(End)XIC(Cfg_Exists)[XIO(Wrk_AutoAckT.TT) [XIO(Ack) OTE(ORdy_Ack) ,XIC(Wrk_Alm) XIC(Cfg_ResetReqd) [XIO(Inp) ,XIC(Sts_AlmInh) ,XIC(Wrk_Suppressed) ,XIC(Inp_OoS) ] OTE(ORdy_Reset) ] ,XIC(Cfg_AllowShelve) OTE(ORdy_Shelve) ,XIC(Shelved) OTE(ORdy_Unshelve) ,XIO(Disabled) XIC(Cfg_AllowDisable) OTE(MRdy_Disable) ,XIC(Disabled) OTE(MRdy_Enable) ,XIO(Wrk_Alm) OTE(MRdy_Test) ];
				RC: "============================================================$N"
				    "VALUE / STATUS GENERATION$N"
				    "============================================================$N"
				    "This rung copies the internal working status (Suppressed, In Alarm)$N"
				    "to public Status bits.  Note that internal working bits are used so that$N"
				    "outside objects cannot manipulate the state of this object$N"
				    "by setting/clearing its Status and Alarm bits.$N"
				    "$N"
				    "Public Status is generated for:$N"
				    "Alarm (with minimum ON time to be seen by polling)$N"
				    "Alarm Suppressed$N"
				    "Unsuppressed, Unshelved and Enabled are generated for HMI (FTVSE 7).$N"
				    "$N"
				    "(Ack, Shelved and Disabled can be set/cleared by the HMI directly.$N"
				    "Note that these bits are $Qread/write$Q outputs in the parameter definition.)";
				N: [XIC(Wrk_Alm) OTE(Alm) TON(Wrk_AlmMinOnT,?,?) ,XIC(Wrk_Suppressed) OTE(Suppressed) ];
				RC: "Notify Level (color, blink) is determined here.$N"
				    "@@@@@  Note how the bottom 3 bits of the Severity are shifted left 1 for Val_Notify.  @@@@@$N"
				    "$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "$N"
				    "NOTE that the alarm bell icon will blink, even though the alarm is Acknowledged,$N"
				    "if an Alarm Reset is required (to get the Operator$'s attention).";
				N: [[XIO(Ack) ,XIC(ORdy_Reset) ] OTE(Val_Notify.0) ,XIC(Wrk_Alm) [[LIM(1,Cfg_Severity,250) ,LIM(501,Cfg_Severity,750) ] OTE(Val_Notify.1) ,LIM(251,Cfg_Severity,750) OTE(Val_Notify.2) ,LIM(751,Cfg_Severity,1000) OTE(Val_Notify.3) ] ,OTU(Val_Notify.4) OTU(Val_Notify.5) OTU(Val_Notify.6) OTU(Val_Notify.7) ];
				RC: "This rung calculates the number of seconds until this alarm $Qunshelves$Q itself.$N"
				    "If the alarm is already unshelved, clear this number.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Modified to optimize scan time.  ####";
				N: XIO(Shelved)CLR(Val_MinToUnshelve)CLR(Val_SecToUnshelve);
				RC: "This rung takes the time remaining until the alarm will be automatically unshelved (milliseconds),$N"
				    "converts it to seconds, then reports it in  minutes : seconds format for display on the HMI.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Modified to optimize scan time.  ####";
				N: XIC(Shelved)CPT(Wrk_SecToUnshelve,(Wrk_ShelfT.PRE-Wrk_ShelfT.ACC)/1000)DIV(Wrk_SecToUnshelve,60,Val_MinToUnshelve)MOD(Wrk_SecToUnshelve,60,Val_SecToUnshelve);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, clear any $Qlurking$Q Commands.$N"
				    "Unshelve and Unsuppress all alarms, but$N"
				    "only Enable alarms for which Disable is not allowed.$N"
				    "(Let Maintenance Disable persist through a power cycle...)$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [OTU(PCmd_Reset) OTU(PCmd_Ack) OTU(PCmd_Suppress) OTU(PCmd_Unsuppress) OTU(PCmd_Unshelve) ,OTU(OCmd_Reset) OTU(OCmd_Ack) OTU(OCmd_Shelve) OTU(OCmd_Unshelve) ,OTU(MCmd_Disable) OTU(MCmd_Enable) ,OTU(Shelved) OTU(Com_AE.4) OTL(Com_AE.5) ,OTU(Wrk_Suppressed) OTU(Suppressed) OTU(Com_AE.7) OTL(Com_AE.8) ,XIO(Cfg_AllowDisable) OTU(Disabled) OTU(Com_AE.10) OTL(Com_AE.11) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_CmdSrc (Description := "Command Source",
	                                        Revision := "4.10",
	                                        RevisionExtension := ".01 Release",
	                                        RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                        Vendor := "Rockwell Automation",
	                                        ExecutePrescan := Yes,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := Yes,
	                                        CreatedDate := "2008-06-11T19:19:37.168Z",
	                                        CreatedBy := "Not Available",
	                                        EditedDate := "2020-10-30T17:37:57.872Z",
	                                        EditedBy := "AB-Rockwell-PC\AB-Rockwell",
	                                        SoftwareRevision := "v30.00",
	                                        AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis instruction provides selection of Command Source for a Device-$Nlevel object  (from highest priority to lowest):$N* Not Initialized$N* Hand (hardwired control, not controllable from I/O)$N* POoS (Programmed Out of Service) (EnableIn is false)$N* MOoS (Maintenance Out of Service)$N* Maint (Maintenance)$N* Ovrd (Override) (typically used for process overrides)$N* External (e.g.: local/field devices or upstream SCADA)$N* Prog (Program) (automated control, and default if Cfg_ProgDefault = 1)$N* Oper (Operator (manual control, and default if Cfg_ProgDefault = 0)$N$N(Program and Operator have the same priority.)$N$NThe current command source is shown with individual Status bits$Nand also a bit field (Sts_bSrc) and an enumeration (Sts_eSrc).$N$NWhen EnableIn is false, all source acquire/release and lock/unlock$NCommands are processed $Qbehind the scenes$Q, but the source$N$QProgram Out of Service$Q (POoS) is selected.  When EnableIn$Nbecomes true, the source selection takes into account the$NCommands received -- in other words, the command source$Nbecomes the one that would have been in effect had the EnableIn$NFalse / Out of Service condition never occurred.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$NSee 4.10 Release Notes for details.$N* Added clear of internal $QExt$Q latch if Ext does not exist.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.01)$NSee 4.10 Release Notes for details.$N* Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.$N* Added XRdy_Acq, XRdy_Rel so XCmd_Acq, XCmd_Rel can be used on HMI.$N* Corrected parameter external access.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.00 Release Notes for details.$NMinor change to initialization, handling of level commands in EnableInFalse. $N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (P_Mode V3.5-01)$NSee 4.00 Release Notes for details.$N* Derived from P_Mode V3.5-01. P_Mode version history archived.$N* Added Out of Service (OoS), External (Ext); removed $QNoMode$Q$N* Added configuration for sources to exist, commands for $Qopposite$Q source.$N* Aligned ready bit naming with command bit names.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_Hand : BOOL (Description := "1=Acquire Hand (typ. hardwired local), 0=Release Hand",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			Inp_Ovrd : BOOL (Description := "1=Acquire Override (higher priority program logic), 0=Release Override",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			Inp_ExtInh : BOOL (Description := "1=Inhibit External Acquisition, 0=Allow External Acquisition",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			Cfg_HasOper : BOOL (Description := "1=Operator (unlocked) exists, can be selected",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1);
			Cfg_HasOperLocked : BOOL (Description := "1=Operator Locked exists, can be selected",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1);
			Cfg_HasProg : BOOL (Description := "1=Program (unlocked) exists, can be selected",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1);
			Cfg_HasProgLocked : BOOL (Description := "1=Program Locked exists, can be selected",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1);
			Cfg_HasExt : BOOL (Description := "1=External exists, can be selected",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_HasMaint : BOOL (Description := "1=Maintenance exists, can be selected",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1);
			Cfg_HasMOoS : BOOL (Description := "1=Maintenance Out of Service exists, can be selected",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1);
			Cfg_OvrdOverLock : BOOL (Description := "1=Override supersedes Prog/Oper Lock, 0=don$'t override Lock",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 1);
			Cfg_ExtOverLock : BOOL (Description := "1=External supersedes Prog/Oper Lock, 0=don$'t override Lock",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_ProgPwrUp : BOOL (Description := "1=Power Up to Prog, 0=Power Up to Oper",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_ProgNormal : BOOL (Description := "Normal Source: 1=Program if no requests; 0=Operator if no requests",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_PCmdPriority : BOOL (Description := "Command Priority: 1=Program Cmds Win; 0=Operator Cmds Win",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_PCmdProgAsLevel : BOOL (Description := "1=PCmd_Prog used as a Level (1=Prog, 0=Oper)",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 0);
			Cfg_PCmdLockAsLevel : BOOL (Description := "1=PCmd_Lock used as a Level (1=Lock, 0=Unlock)",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 0);
			Cfg_ExtAcqAsLevel : BOOL (Description := "1=XCmd_Acq used as Level (1=Acq, 0=Rel)",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			PCmd_Oper : BOOL (Description := "Program Command to select Operator (Prog to Oper)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			PCmd_Prog : BOOL (Description := "Program Command to select Program (Oper to Prog)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			PCmd_Lock : BOOL (Description := "Program Command to Lock Program (disallow Operator)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			PCmd_Unlock : BOOL (Description := "Program Command to Unlock Program (allow Oper to acquire)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			PCmd_Normal : BOOL (Description := "Program Command to select Normal (Oper or Prog)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			MCmd_OoS : BOOL (Description := "Maintenance Command to select Out Of Service",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			MCmd_IS : BOOL (Description := "Maintenance Command to select In Service",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			MCmd_Acq : BOOL (Description := "Maintenance Command to Acquire (Oper/Prog/Ovrd to Maint)",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			MCmd_Rel : BOOL (Description := "Maintenance Command to Release (Maint to Oper/Prog/Ovrd)",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			XCmd_Acq : BOOL (Description := "External Command to Acquire",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			XCmd_Rel : BOOL (Description := "External Command to Release",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			OCmd_Oper : BOOL (Description := "Operator Command to select Operator (Prog to Oper)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			OCmd_Prog : BOOL (Description := "Operator Command to select Program (Oper to Prog)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			OCmd_Lock : BOOL (Description := "Operator Command to Lock Operator (disallow Program)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			OCmd_Unlock : BOOL (Description := "Operator Command to Unlock Operator (allow Prog to acquire)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			OCmd_Normal : BOOL (Description := "Operator Command to select Normal (Oper or Prog)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Sts_eSrc : INT (Description := "Selection enum: .8=Ext, .7=OoS, .6=Oper, .5=Prog, .4=Ovrd, .3=Maint, .2=Hand, .1=Norm, .0=Lock",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_bSrc : INT (Description := "Active Selection bitmap (for HMI totem pole)",
			                    COMMENT.0 := "Hand",
			                    COMMENT.1 := "Programmable Out of Service",
			                    COMMENT.2 := "Maintenance Out of Service",
			                    COMMENT.3 := "Maintenance",
			                    COMMENT.4 := "Override",
			                    COMMENT.5 := "External",
			                    COMMENT.6 := "Program Locked",
			                    COMMENT.7 := "Program",
			                    COMMENT.8 := "Operator Locked",
			                    COMMENT.9 := "Operator",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_Hand : BOOL (Description := "1=Hand is selected (supersedes OoS, Maint, Ovrd, Ext, Prog, Oper)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_OoS : BOOL (Description := "1=Out of Service is selected (supersedes Maint, Ovrd, Ext, Prog, Oper)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Sts_Maint : BOOL (Description := "1=Maintenance is selected (supersedes Ovrd, Ext, Prog, Oper)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Ovrd : BOOL (Description := "1=Override is selected (supersedes Ext, Prog, Oper)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_Ext : BOOL (Description := "1=External is selected (supersedes Prog, Oper)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Sts_Prog : BOOL (Description := "1=Program is selected",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_ProgLocked : BOOL (Description := "1=Program is selected and Locked",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_Oper : BOOL (Description := "1=Operator is selected",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_OperLocked : BOOL (Description := "1=Operator is selected and Locked",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_ProgOperSel : BOOL (Description := "Prog/Oper selection (latch) state, 1=Program, 0=Operator",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Sts_ProgOperLock : BOOL (Description := "Prog/Oper lock (latch) state, 1=Locked, 0=Unlocked",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Sts_Normal : BOOL (Description := "1=Selection equals the Normal (Prog or Oper)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_ProgReqInh : BOOL (Description := "1=Program request inhibited, cannot Get to Program from Current State",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_ExtReqInh : BOOL (Description := "1=External request inhibited",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_MAcqRcvd : BOOL (Description := "1=Maintenance Acquire command received this scan",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			MRdy_OoS : BOOL (Description := "1=Ready for MCmd_OoS (enables HMI button)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			MRdy_IS : BOOL (Description := "1=Ready for MCmd_IS (enables HMI button)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			MRdy_Acq : BOOL (Description := "1=Ready for MCmd_Acq (enables HMI button)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			MRdy_Rel : BOOL (Description := "1=Ready for MCmd_Rel (enables HMI button)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			XRdy_Acq : BOOL (Description := "1=Ready for XCmd_Acq (enables HMI button)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			XRdy_Rel : BOOL (Description := "1=Ready for XCmd_Rel (enables HMI button)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			ORdy_Oper : BOOL (Description := "1=Ready for OCmd_Oper (enables HMI button)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			ORdy_Prog : BOOL (Description := "1=Ready for OCmd_Prog (enables HMI button)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			ORdy_Lock : BOOL (Description := "1=Ready for OCmd_Lock (enables HMI button)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			ORdy_Unlock : BOOL (Description := "1=Ready for OCmd_Unlock (enables HMI button)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			ORdy_Normal : BOOL (Description := "1=Ready for OCmd_Normal (enables HMI button)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			P_CmdSrc : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Wrk_ProgOperSel : BOOL (Description := "Internal Program (1) / Operator (0) selection result",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_ProgOperLock : BOOL (Description := "Internal Prog/Oper Lock (1) / Unlock (0) selection result",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_Prog : BOOL (Description := "Internal Program (1) / Operator (0) selection progress",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_MOoS : BOOL (Description := "Internal Maintenance Out of Service (1) / In Service (0) latch",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_Maint : BOOL (Description := "Internal Maintenance Acquire (1) / Release (0) latch",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_Lock : BOOL (Description := "Internal Prog/Oper Lock (1) / Unlock (0) selection progress",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_Init : BOOL (Description := "1=Initialized, 0=Initialization is required (e.g., powerup)",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_HasProgLocked : BOOL (Description := "Stored copy of Cfg_HasProgLocked",
			                            RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			Wrk_HasProg : BOOL (Description := "Stored copy of Cfg_HasProg",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_HasOperLocked : BOOL (Description := "Stored copy of Cfg_HasOperLocked",
			                            RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			Wrk_HasOper : BOOL (Description := "Stored copy of Cfg_HasOper",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			HMI_Type : STRING_12 (Description := "Must contain AOI name, used for HMI and Information S/W",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[8,'P_CmdSrc$00$00$00$00']");
			HMI_Lib : STRING_8 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00']");
			Wrk_Ext : BOOL (Description := "Internal latch of External selection (1=Ext acquired)",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Processes received Commands, but shows $QProgrammed Out of Service$Q")
				RC: "============================================================$N"
				    "P_CmdSrc:  EnableInFalse Handling$N"
				    "============================================================$N"
				    "When EnableIn is False, this Routine is scanned instead of the $QLogic$Q Routine.$N"
				    "All Commands are processed $Qbehind the scenes$Q, but the Command Source$N"
				    "is shown as $QOut of Service$Q.  When EnableIn becomes true, the AOI$N"
				    "takes into account the Commands received -- in other words, the Command$N"
				    "Source becomes the one that would have been in effect had the EnableIn$N"
				    "False / Out of Service condition never occurred.$N"
				    "============================================================$N"
				    "INITIALIZATION$N"
				    "============================================================$N"
				    "If initialization has been completed, skip the following few rungs.";
				N: XIO(S:FS)XIC(Wrk_Init)JMP(SkipInit);
				RC: "Initialization:  This rung clears any $Qlurking$Q commands and releases External source.$N"
				    "$N"
				    "#####  V4.00.01  2018-08-23:  Added PCmd_Prog, PCmd_Lock to commands cleared.  #####$N"
				    "#####  V4.10.00  2018-01-14:  Added XCmd_Acq, XCmd_Rel, Ext latch to items cleared.  #####";
				N: [OTU(MCmd_Acq) OTU(MCmd_Rel) OTU(MCmd_OoS) OTU(MCmd_IS) ,OTU(Inp_ExtInh) OTU(XCmd_Acq) OTU(XCmd_Rel) OTU(Wrk_Ext) ,OTU(PCmd_Prog) OTU(PCmd_Lock) ];
				N: LBL(SkipInit)[OTU(OCmd_Oper) OTU(OCmd_Prog) OTU(OCmd_Lock) OTU(OCmd_Unlock) OTU(OCmd_Normal) ,OTU(PCmd_Oper) OTU(PCmd_Unlock) OTU(PCmd_Normal) ];
				RC: "Initialization:  This rung processes the Configuration (.Cfg_) bits to be$N"
				    "sure the configuration is valid.  It sets the initial states of the$N"
				    "Program / Operator (selection) latch and the Prog/Oper Lock latch.$N"
				    "$N"
				    "#####  V4.00.01  2018-08-23:  Corrected selection of Normal when no HasOper/HasProg.  #####";
				N: [OTU(Wrk_Lock) OTU(Wrk_ProgOperLock) OTU(Wrk_Prog) OTU(Wrk_ProgOperSel) ,XIO(Cfg_HasOper) XIO(Cfg_HasProg) [XIC(Cfg_ProgPwrUp) OTL(Cfg_ProgNormal) OTL(Cfg_HasProg) ,XIO(Cfg_ProgPwrUp) OTU(Cfg_ProgNormal) OTL(Cfg_HasOper) ] ,XIO(Cfg_HasOper) XIO(Cfg_HasOperLocked) OTL(Cfg_ProgNormal) OTL(Cfg_ProgPwrUp) ,XIO(Cfg_HasProg) XIO(Cfg_HasProgLocked) OTU(Cfg_ProgNormal) OTU(Cfg_ProgPwrUp) ,[XIO(Cfg_ProgPwrUp) XIO(Cfg_HasOper) ,XIC(Cfg_ProgPwrUp) OTL(Wrk_ProgOperSel) OTL(Wrk_Prog) XIO(Cfg_HasProg) ] OTL(Wrk_ProgOperLock) OTL(Wrk_Lock) ];
				RC: "The Prog/Oper existence options are stored on initialization and enforced thereafter.$N"
				    "Changes must be made with controller in PROG mode to take effect.$N"
				    "-----  Initialization complete.  -----";
				N: [OTU(Wrk_HasOper) XIC(Cfg_HasOper) OTL(Wrk_HasOper) ,OTU(Wrk_HasOperLocked) XIC(Cfg_HasOperLocked) OTL(Wrk_HasOperLocked) ,OTU(Wrk_HasProg) XIC(Cfg_HasProg) OTL(Wrk_HasProg) ,OTU(Wrk_HasProgLocked) XIC(Cfg_HasProgLocked) OTL(Wrk_HasProgLocked) ,OTL(Wrk_Init) ];
				RC: "This rung restores the saved initial Program / Operator existence configurations,$N"
				    "overwriting any changes made while in controller RUN mode.";
				N: [XIC(Wrk_HasOper) OTL(Cfg_HasOper) ,XIO(Wrk_HasOper) OTU(Cfg_HasOper) ,XIC(Wrk_HasOperLocked) OTL(Cfg_HasOperLocked) ,XIO(Wrk_HasOperLocked) [OTU(Cfg_HasOperLocked) ,XIO(Wrk_HasOper) OTL(Cfg_ProgPwrUp) OTL(Cfg_ProgNormal) OTL(Cfg_PCmdPriority) ] ,XIC(Wrk_HasProg) OTL(Cfg_HasProg) ,[XIO(Wrk_HasProg) OTU(Cfg_HasProg) ,XIO(Wrk_HasOper) ] OTU(Cfg_PCmdProgAsLevel) ,XIC(Wrk_HasProgLocked) OTL(Cfg_HasProgLocked) ,XIO(Wrk_HasProgLocked) [[OTU(Cfg_HasProgLocked) ,OTU(Cfg_PCmdLockAsLevel) ] ,XIO(Wrk_HasProg) OTU(Cfg_ProgPwrUp) OTU(Cfg_ProgNormal) OTU(Cfg_PCmdPriority) ] ];
				RC: "Commands configured as level are preserved;$N"
				    "commands configured as edge are cleared.$N"
				    "$N"
				    "#####  V4.00.01  2018-08-23:  Added 2 rungs.  #####";
				N: XIO(Cfg_PCmdProgAsLevel)OTU(PCmd_Prog);
				N: XIO(Cfg_PCmdLockAsLevel)OTU(PCmd_Lock);
				RC: "Cfg_OvrdOverLock=0, Cfg_ExtOverLock=1 is an illegal combination.$N"
				    "$N"
				    "#####  V4.00.01  2018-08-23:  Added check for Cfg_HasExt.  #####";
				N: XIO(Cfg_OvrdOverLock)XIC(Cfg_HasExt)XIC(Cfg_ExtOverLock)OTL(Cfg_OvrdOverLock);
				RC: "Release External if:$N"
				    "* XCmd_Rel is received and External is EDGE;$N"
				    "* XCmd_Acq is cleared and External is LEVEL; or$N"
				    "* External is inhibited by logic.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Added clear of internal Ext latch if Ext does not exist.  #####";
				N: [XIC(XCmd_Rel) OTU(XCmd_Rel) XIO(Cfg_ExtAcqAsLevel) ,XIC(Cfg_HasExt) XIC(Cfg_ExtAcqAsLevel) XIO(XCmd_Acq) ,XIC(Inp_ExtInh) ,XIO(Cfg_HasExt) ]OTU(Wrk_Ext);
				RC: "If an External Acquire command is received:$N"
				    "* If External is configured to exist and it is NOT inhibited, acquire External;$N"
				    "* If the External commands are configured as EDGE, clear the command.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.  #####";
				N: XIC(XCmd_Acq)[XIC(Cfg_HasExt) XIO(Inp_ExtInh) OTL(Wrk_Ext) ,XIO(Cfg_ExtAcqAsLevel) OTU(XCmd_Acq) ];
				RC: "If a Maintenance Release command is received, or if Maintenance is configured$N"
				    "to not exist, release Maintenance.";
				N: [XIC(MCmd_Rel) ,XIO(Cfg_HasMaint) ]OTU(MCmd_Rel)OTU(Wrk_Maint);
				RC: "If a Maintenance Acquire command is received, set the $QMaintenance Acquire$N"
				    "Received$Q status bit.  If Maintenance is configured to exist, go to Maintenance.";
				N: XIC(MCmd_Acq)OTU(MCmd_Acq)OTE(Sts_MAcqRcvd)XIC(Cfg_HasMaint)OTL(Wrk_Maint);
				RC: "If a Maintenance In Service command is received, or if Maintenance Out of Service$N"
				    "is configured to not exist, place In Service (release MOoS).";
				N: [XIC(MCmd_IS) ,XIO(Cfg_HasMOoS) ]OTU(MCmd_IS)OTU(Wrk_MOoS);
				RC: "If a Maintenance Out of Service command is received, and if Maintenance Out of Service$N"
				    "is configured to exist, place Out of Service (acquire MOoS).";
				N: XIC(MCmd_OoS)OTU(MCmd_OoS)XIC(Cfg_HasMOoS)OTL(Wrk_MOoS);
				RC: "============================================================$N"
				    "MAINTENANCE, EXTERNAL AND OPERATOR COMMAND READIES$N"
				    "============================================================$N"
				    "This rung generates the $QORdy_$Q, $QMRdy_$Q and $QXRdy_$Q bits that signify to the$N"
				    "HMI that the corresponding command should $Qdo$Q something$N"
				    "and the command button should be enabled on the display.$N"
				    "$N"
				    "NOTE ON MAINTENANCE ACQUIRE: Ready for MCmd_Acq if Maintenance$N"
				    "is allowed and the internal Maintenance latch is NOT set.  However,$N"
				    "we need to display Ready even if latch IS set so that Sts_MAcqRcvd$N"
				    "can blink to reset an external Maintenance expiration timer!!!$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XRdy_Acq, XRdy_Rel so External Acq/Rel can be used on HMI .  #####";
				N: [XIC(Cfg_HasMaint) [OTE(MRdy_Acq) ,XIC(Wrk_Maint) OTE(MRdy_Rel) ] ,XIC(Cfg_HasMOoS) [XIC(Wrk_MOoS) OTE(MRdy_IS) ,XIO(Wrk_MOoS) OTE(MRdy_OoS) ] ,XIC(Cfg_HasExt) XIO(Cfg_ExtAcqAsLevel) [XIC(Wrk_Ext) OTE(XRdy_Rel) ,XIO(Wrk_Ext) XIO(Inp_ExtInh) OTE(XRdy_Acq) ] ,OTU(ORdy_Lock) OTU(ORdy_Unlock) OTU(ORdy_Oper) OTU(ORdy_Prog) OTU(ORdy_Normal) ];
				RC: "============================================================$N"
				    "STATUS AND ENUMERATED STATUS$N"
				    "============================================================$N"
				    "This rung provides the various Status bits and Enumerated Status value$N"
				    "for the valid selections when on a false rung, as follows:$N"
				    "$N"
				    "HAND:  Sts_Hand if Inp_Hand is set$N"
				    "POoS: Sts_OOS if Inp_Hand is NOT set.$N"
				    "$N"
				    "Enum:$N"
				    "= 4  if HAND$N"
				    "= 129 if POoS";
				N: [OTU(Sts_Maint) OTU(Sts_Ovrd) OTU(Sts_Ext) OTU(Sts_ProgLocked) OTU(Sts_Prog) OTU(Sts_OperLocked) OTU(Sts_Oper) ,OTU(Sts_eSrc.1) OTU(Sts_eSrc.3) OTU(Sts_eSrc.4) OTU(Sts_eSrc.5) OTU(Sts_eSrc.6) OTU(Sts_eSrc.8) ,XIC(Inp_Hand) OTE(Sts_Hand) OTE(Sts_eSrc.2) ,XIO(Inp_Hand) OTE(Sts_OoS) OTE(Sts_eSrc.7) OTE(Sts_eSrc.0) ];
				RC: "Adjust O/P state based on level and power up configurations and input conditions$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Modified handling of PCmd_Lock, PCmd_Prog when configured as LEVEL.  #####";
				N: [XIC(Wrk_Prog) ,XIO(Wrk_Lock) ][XIC(Cfg_PCmdLockAsLevel) [XIO(PCmd_Lock) OTU(Wrk_Lock) OTU(Wrk_Prog) XIC(Cfg_HasProg) XIC(Cfg_ProgPwrUp) ,XIC(PCmd_Lock) OTL(Wrk_Lock) ] OTL(Wrk_Prog) ,XIC(Cfg_PCmdProgAsLevel) XIO(Wrk_Lock) [XIO(PCmd_Prog) OTU(Wrk_Prog) ,XIC(PCmd_Prog) OTL(Wrk_Prog) ] ];
				RC: "============================================================$N"
				    "STATUS AND ENUMERATED STATUS GENERATION$N"
				    "============================================================$N"
				    "This rung provides bitmapped status for use on the HMI $QTotem Pole$Q object:$N"
				    ".0 = Hand$N"
				    ".1 = Programmed Out of Service (always set here)$N"
				    ".2 = Maintenance Out of Service$N"
				    ".3 = Maintenance$N"
				    ".4= Override$N"
				    ".5 = External$N"
				    ".6 = Program Locked$N"
				    ".7 = Program$N"
				    ".8 = Operator Locked$N"
				    ".9 = Operator$N"
				    "In addition, the final selections of the Program / Operator selection latch$N"
				    "and the Prog/Oper lock latch are captured for use next scan.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.  #####";
				N: [XIC(Inp_Hand) OTE(Sts_bSrc.0) ,OTL(Sts_bSrc.1) ,XIC(Wrk_MOoS) OTE(Sts_bSrc.2) ,XIC(Wrk_Maint) OTE(Sts_bSrc.3) ,XIC(Inp_Ovrd) [XIC(Cfg_OvrdOverLock) ,XIO(Cfg_OvrdOverLock) [XIO(Wrk_Lock) ,XIC(Sts_bSrc.4) ] ] OTE(Sts_bSrc.4) ,XIC(Wrk_Ext) XIC(Cfg_HasExt) XIO(Inp_ExtInh) OTE(Sts_bSrc.5) ,XIC(Wrk_Prog) OTL(Wrk_ProgOperSel) [XIC(Wrk_Lock) OTE(Sts_bSrc.6) ,XIO(Wrk_Lock) OTE(Sts_bSrc.7) ] ,XIO(Wrk_Prog) OTU(Wrk_ProgOperSel) [XIC(Wrk_Lock) OTE(Sts_bSrc.8) ,XIO(Wrk_Lock) OTE(Sts_bSrc.9) ] ,XIC(Wrk_Lock) OTL(Wrk_ProgOperLock) ,XIO(Wrk_Lock) OTU(Wrk_ProgOperLock) ];
				RC: "The final states of the internal Program / Operator selection latch and the$N"
				    "Prog/Oper Lock latch are made available as Status bits.";
				N: [XIC(Wrk_ProgOperSel) OTE(Sts_ProgOperSel) ,XIC(Wrk_ProgOperLock) OTE(Sts_ProgOperLock) ];
				RC: "Because the final selection is either Hand or Programmed Out of Service,$N"
				    "the selection is not the normal one (Program or Operator) and it is not possible$N"
				    "to command the selection to Program from here.";
				N: OTU(Sts_Normal)OTL(Sts_ProgReqInh)OTL(Sts_ExtReqInh);
		END_ROUTINE

		ROUTINE Logic (Description := "Selects Hand, OOS, Maint, Ovrd, Ext, Oper, Prog based on Inputs and Commands")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_CmdSrc:  PROCESS -- COMMAND SOURCE SELECTOR$N"
				    "============================================================$N"
				    "Revision 4.10.01 Release  2019-10-16:  See V4.10.xx Release Notes for details.$N"
				    "V4.00.00  2018-03-15:  New instruction for V4.0 Library of Process Objects.$N"
				    "(Derived from P_Mode V3.5-01. P_Mode version history archived.)$N"
				    "Added Out of Service (OoS), External (Ext); removed $QNoMode$Q$N"
				    "Added configuration for sources to exist, commands for $Qopposite$Q source.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "V4.00.01  2018-08-23:  Minor change to initialization, handling of level commands in EIF. $N"
				    "V4.10.00  2019-03-08:  Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.$N"
				    "Added XRdy_Acq, XRdy_Rel so XCmd_Acq, XCmd_Rel can be used on HMI.$N"
				    "Corrected parameter external access.$N"
				    "V4.10.01  2019-10-16:  Added clear of internal $QExt$Q latch if Ext does not exist.$N"
				    "============================================================$N"
				    "This instruction provides selection of Command Source for a$N"
				    "Device-level object  (from highest priority to lowest):$N"
				    "* Not Initialized$N"
				    "* Hand (hardwired control, not controllable from I/O)$N"
				    "* POoS (programmed Out of Service) (EnableIn is false)$N"
				    "* MOoS (maintenance Out of Service)$N"
				    "* Maint (Maintenance)$N"
				    "*  Ovrd (Override) (typically used for process overrides)$N"
				    "* External (e.g.: field pilot controls or upstream SCADA)$N"
				    "*  Prog  (Program) (automated control, and default if Cfg_ProgNormal = 1)$N"
				    "*  Oper (Operator (manual control, and default if Cfg_ProgNormal = 0)$N"
				    "$N"
				    "The current command source is shown with individual Status bits$N"
				    "and also a bit field (Sts_bSrc) and an enumeration (Sts_eSrc).$N"
				    "$N"
				    "============================================================$N"
				    "INITIALIZATION$N"
				    "============================================================$N"
				    "If initialization has been completed, skip the following few rungs.";
				N: XIO(S:FS)XIC(Wrk_Init)JMP(SkipInit);
				RC: "Initialization:  This rung clears any $Qlurking$Q commands.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.  #####";
				N: [OTU(PCmd_Prog) OTU(PCmd_Oper) OTU(PCmd_Lock) OTU(PCmd_Unlock) OTU(PCmd_Normal) ,OTU(MCmd_Acq) OTU(MCmd_Rel) OTU(MCmd_OoS) OTU(MCmd_IS) ,OTU(OCmd_Oper) OTU(OCmd_Prog) OTU(OCmd_Lock) OTU(OCmd_Unlock) OTU(OCmd_Normal) ,OTU(Wrk_Ext) OTU(Inp_ExtInh) OTU(XCmd_Acq) OTU(XCmd_Rel) ];
				RC: "Initialization:  This rung processes the Configuration (.Cfg_) bits to be$N"
				    "sure the configuration is valid.  It sets the initial states of the$N"
				    "Program / Operator (selection) latch and the Prog/Oper Lock latch.$N"
				    "$N"
				    "#####  V4.00.01  2018-08-23:  Selection of Normal when HasOper/HasProg both 0.  #####";
				N: [OTU(Wrk_Lock) OTU(Wrk_ProgOperLock) OTU(Wrk_Prog) OTU(Wrk_ProgOperSel) ,XIO(Cfg_HasOper) XIO(Cfg_HasProg) [XIC(Cfg_ProgPwrUp) OTL(Cfg_ProgNormal) OTL(Cfg_HasProg) ,XIO(Cfg_ProgPwrUp) OTU(Cfg_ProgNormal) OTL(Cfg_HasOper) ] ,XIO(Cfg_HasOper) XIO(Cfg_HasOperLocked) OTL(Cfg_ProgNormal) OTL(Cfg_ProgPwrUp) ,XIO(Cfg_HasProg) XIO(Cfg_HasProgLocked) OTU(Cfg_ProgNormal) OTU(Cfg_ProgPwrUp) ,[XIO(Cfg_ProgPwrUp) XIO(Cfg_HasOper) ,XIC(Cfg_ProgPwrUp) OTL(Wrk_ProgOperSel) OTL(Wrk_Prog) XIO(Cfg_HasProg) ] OTL(Wrk_ProgOperLock) OTL(Wrk_Lock) ];
				RC: "The Prog/Oper existence options are stored on initialization and enforced thereafter.$N"
				    "Changes must be made with controller in PROG mode to take effect.$N"
				    "-----  Initialization complete.  -----";
				N: [OTU(Wrk_HasOper) XIC(Cfg_HasOper) OTL(Wrk_HasOper) ,OTU(Wrk_HasOperLocked) XIC(Cfg_HasOperLocked) OTL(Wrk_HasOperLocked) ,OTU(Wrk_HasProg) XIC(Cfg_HasProg) OTL(Wrk_HasProg) ,OTU(Wrk_HasProgLocked) XIC(Cfg_HasProgLocked) OTL(Wrk_HasProgLocked) ,OTL(Wrk_Init) ];
				RC: "This rung restores the saved initial Program / Operator existence configurations,$N"
				    "overwriting any changes made while in controller RUN mode.";
				N: LBL(SkipInit)[XIC(Wrk_HasOper) OTL(Cfg_HasOper) ,XIO(Wrk_HasOper) OTU(Cfg_HasOper) ,XIC(Wrk_HasOperLocked) OTL(Cfg_HasOperLocked) ,XIO(Wrk_HasOperLocked) [OTU(Cfg_HasOperLocked) ,XIO(Wrk_HasOper) OTL(Cfg_ProgPwrUp) OTL(Cfg_ProgNormal) OTL(Cfg_PCmdPriority) ] ,XIC(Wrk_HasProg) OTL(Cfg_HasProg) ,[XIO(Wrk_HasProg) OTU(Cfg_HasProg) ,XIO(Wrk_HasOper) ] OTU(Cfg_PCmdProgAsLevel) ,XIC(Wrk_HasProgLocked) OTL(Cfg_HasProgLocked) ,XIO(Wrk_HasProgLocked) [[OTU(Cfg_HasProgLocked) ,OTU(Cfg_PCmdLockAsLevel) ] ,XIO(Wrk_HasProg) OTU(Cfg_ProgPwrUp) OTU(Cfg_ProgNormal) OTU(Cfg_PCmdPriority) ] ];
				RC: "Cfg_OvrdOverLock=0, Cfg_RemOverLock=1 is an illegal combination";
				N: XIO(Cfg_OvrdOverLock)XIC(Cfg_HasExt)XIC(Cfg_ExtOverLock)OTL(Cfg_OvrdOverLock);
				RC: "Release External if:$N"
				    "* XCmd_Rel is received and External is EDGE;$N"
				    "* XCmd_Acq is cleared and External is LEVEL; or$N"
				    "* External is inhibited by logic.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Added clear of internal Ext latch if Ext does not exist.  #####";
				N: [XIC(XCmd_Rel) OTU(XCmd_Rel) XIO(Cfg_ExtAcqAsLevel) ,XIC(Cfg_HasExt) XIC(Cfg_ExtAcqAsLevel) XIO(XCmd_Acq) ,XIC(Inp_ExtInh) ,XIO(Cfg_HasExt) ]OTU(Wrk_Ext);
				RC: "If an External Acquire command is received:$N"
				    "* If External is configured to exist and it is NOT inhibited, acquire External;$N"
				    "* If the External commands are configured as EDGE, clear the command.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.  #####";
				N: XIC(XCmd_Acq)[XIC(Cfg_HasExt) XIO(Inp_ExtInh) OTL(Wrk_Ext) ,XIO(Cfg_ExtAcqAsLevel) OTU(XCmd_Acq) ];
				RC: "If a Maintenance Release command is received, or if Maintenance is configured$N"
				    "to not exist, release Maintenance.";
				N: [XIC(MCmd_Rel) ,XIO(Cfg_HasMaint) ]OTU(MCmd_Rel)OTU(Wrk_Maint);
				RC: "If a Maintenance Acquire command is received, set the $QMaintenance Acquire$N"
				    "Received$Q status bit.  If Maintenance is configured to exist, go to Maintenance.";
				N: XIC(MCmd_Acq)OTU(MCmd_Acq)OTE(Sts_MAcqRcvd)XIC(Cfg_HasMaint)OTL(Wrk_Maint);
				RC: "If a Maintenance In Service command is received, or if Maintenance Out of Service$N"
				    "is configured to not exist, place In Service (release MOoS).";
				N: [XIC(MCmd_IS) ,XIO(Cfg_HasMOoS) ]OTU(MCmd_IS)OTU(Wrk_MOoS);
				RC: "If a Maintenance Out of Service command is received, and if Maintenance Out of Service$N"
				    "is configured to exist, place Out of Service (acquire MOoS).";
				N: XIC(MCmd_OoS)OTU(MCmd_OoS)XIC(Cfg_HasMOoS)OTL(Wrk_MOoS);
				RC: "Change PCmd_Normal or OCmd_Normal to the appropriate Prog or Oper command.";
				N: [XIC(OCmd_Normal) OTU(OCmd_Normal) [XIO(Cfg_ProgNormal) XIC(Wrk_ProgOperSel) OTL(OCmd_Oper) ,XIC(Cfg_ProgNormal) XIO(Wrk_ProgOperSel) OTL(OCmd_Prog) ] ,XIC(PCmd_Normal) OTU(PCmd_Normal) [XIO(Cfg_ProgNormal) XIC(Wrk_ProgOperSel) OTL(PCmd_Oper) ,XIC(Cfg_ProgNormal) XIO(Wrk_ProgOperSel) [XIO(Cfg_PCmdProgAsLevel) OTL(PCmd_Prog) ,XIC(Cfg_PCmdProgAsLevel) XIO(Cfg_PCmdLockAsLevel) OTL(PCmd_Lock) ] ] ];
				N: XIO(OCmd_Oper)XIO(OCmd_Prog)XIO(OCmd_Lock)XIO(OCmd_Unlock)XIO(PCmd_Oper)XIO(PCmd_Unlock)[XIO(PCmd_Prog) ,XIC(Cfg_PCmdProgAsLevel) ][XIO(PCmd_Lock) ,XIC(Cfg_PCmdLockAsLevel) XIC(PCmd_Lock) XIC(Wrk_Lock) ]JMP(AfterOPCmnds);
				RC: "If a Program Unlock command is received, and if Program is selected,$N"
				    "unlock.  Then, if Program exists, keep in Program; if not, go to Operator.";
				N: XIC(PCmd_Unlock)OTU(PCmd_Unlock)XIC(Wrk_ProgOperSel)OTU(Wrk_Lock)[XIC(Cfg_HasProg) OTL(Wrk_Prog) ,XIO(Cfg_HasProg) OTU(Wrk_Prog) ];
				RC: "If an Operator Unlock command is received and if Operator is selected, unlock.$N"
				    "Then, if Oper Unlocked exists, keep in Operator; if not, go to Program.";
				N: XIC(OCmd_Unlock)OTU(OCmd_Unlock)XIO(Wrk_ProgOperSel)OTU(Wrk_Lock)[XIC(Cfg_HasOper) OTU(Wrk_Prog) ,[XIO(Cfg_HasOper) ,XIC(Cfg_PCmdProgAsLevel) XIC(PCmd_Prog) ,XIC(Cfg_PCmdLockAsLevel) XIC(PCmd_Lock) OTL(Wrk_Lock) ] OTL(Wrk_Prog) ];
				RC: "PCmd_Oper when Operator Commands have priority over Program Commands:$N"
				    "If Operator (unlocked) exists, go there.  If Operator (unlocked) does not$N"
				    "exist, but Operator Locked exists, then go there.$N"
				    "";
				N: XIC(PCmd_Oper)[XIO(OCmd_Prog) ,XIC(Cfg_PCmdPriority) ]XIC(Wrk_ProgOperSel)[XIO(Cfg_PCmdLockAsLevel) ,XIO(PCmd_Lock) ][XIC(Cfg_HasOper) [XIO(Cfg_PCmdProgAsLevel) ,XIO(PCmd_Prog) ] OTU(Wrk_Lock) ,XIO(Cfg_HasOper) XIC(Cfg_HasOperLocked) OTL(Wrk_Lock) ]OTU(Wrk_Prog);
				RC: "If an Operator Command to go to Program is received, if Program (unlocked) exits, go there.$N"
				    "If Program (unlocked) does NOT exist, but Program Locked exits, go there so long as$N"
				    "a PCmd_Lock as level is not low, so as to take us OUT of Program Locked.";
				N: XIC(OCmd_Prog)[XIO(PCmd_Oper) ,XIO(Cfg_PCmdPriority) ]XIO(Wrk_ProgOperSel)[XIC(Cfg_HasProg) [XIO(Cfg_PCmdProgAsLevel) ,XIC(PCmd_Prog) ] OTU(Wrk_Lock) ,XIC(Cfg_HasProgLocked) [XIO(Cfg_HasProg) XIO(Cfg_PCmdLockAsLevel) ,XIC(Cfg_PCmdLockAsLevel) XIC(PCmd_Lock) ,XIC(Cfg_PCmdProgAsLevel) XIO(PCmd_Prog) ] OTL(Wrk_Lock) ]OTL(Wrk_Prog);
				RC: "Clear both processed commands for next scan.";
				N: OTU(PCmd_Oper)OTU(OCmd_Prog);
				RC: "If a Program Command to go to Program is received, if NOT locked or if in Program Locked,$N"
				    "then if Program (unlocked) exits, go there; if Program (unlocked) does NOT exist, but$N"
				    "Program Locked exits, go there so long as a PCmd_Lock as level is not low,$N"
				    "so as to take us OUT of Program Locked.";
				N: XIC(PCmd_Prog)[XIC(Cfg_PCmdPriority) ,XIO(OCmd_Oper) ][XIO(Wrk_ProgOperLock) ,XIC(Wrk_ProgOperSel) XIO(Cfg_PCmdProgAsLevel) ][XIC(Cfg_HasProg) OTU(Wrk_Lock) ,XIO(Cfg_HasProg) XIC(Cfg_HasProgLocked) OTL(Wrk_Lock) ]OTL(Wrk_Prog);
				RC: "OCmd_Oper when Program Commands have priority over Operator Commands:$N"
				    "If NOT locked, or if Operator and Locked, then if Operator (unlocked) exists, go there.$N"
				    "if Operator (unlocked) does NOT exist, but Operator Locked exists, then go there.$N"
				    "";
				N: XIC(OCmd_Oper)[XIO(Cfg_PCmdPriority) ,XIO(PCmd_Prog) ][XIO(Wrk_ProgOperLock) ,XIO(Wrk_ProgOperSel) ][XIO(Cfg_PCmdLockAsLevel) ,XIO(PCmd_Lock) ][XIC(Cfg_HasOper) OTU(Wrk_Lock) ,XIC(Cfg_HasOperLocked) [XIO(Cfg_HasOper) ,XIC(Cfg_PCmdProgAsLevel) XIC(PCmd_Prog) ] OTL(Wrk_Lock) ]OTU(Wrk_Prog);
				RC: "Clear both processed commands for next scan. Do not clear PCmd_Prog if Cfg_PCmdProgAsLevel is set.";
				N: OTU(OCmd_Oper)XIO(Cfg_PCmdProgAsLevel)OTU(PCmd_Prog);
				RC: "OCmd_Lock when Program Commands have priority over Operator Commands:$N"
				    "If in Operator or not Locked, go to Operator Locked, but next rung wins.$N"
				    "";
				N: XIC(OCmd_Lock)[XIO(Cfg_PCmdPriority) ,XIO(PCmd_Lock) ]XIC(Cfg_HasOperLocked)[XIO(Wrk_ProgOperSel) ,XIO(Wrk_ProgOperLock) ]OTU(Wrk_Prog)OTL(Wrk_Lock);
				RC: "If a Program Lock Command is received, if Program Locked exists and in Program$N"
				    "or NOT Locked, go to Program Locked.";
				N: XIC(PCmd_Lock)[XIC(Cfg_PCmdPriority) ,XIO(OCmd_Lock) ]XIC(Cfg_HasProgLocked)[XIC(Wrk_ProgOperSel) ,XIO(Wrk_ProgOperLock) ]OTL(Wrk_Prog)OTL(Wrk_Lock);
				RC: "Clear both processed commands for next scan. Do not clear PCmd_Lock is Cfg_PCmdLockAsLevel is set.";
				N: OTU(OCmd_Lock)XIO(Cfg_PCmdLockAsLevel)OTU(PCmd_Lock);
				RC: "Level signal state correction. Verifying signal low final states.";
				N: LBL(AfterOPCmnds)XIC(Wrk_Prog)[XIC(Cfg_PCmdProgAsLevel) XIO(Wrk_Lock) XIO(PCmd_Prog) ,XIC(Cfg_PCmdLockAsLevel) XIO(PCmd_Lock) XIC(Wrk_Lock) OTU(Wrk_Lock) [XIC(Cfg_PCmdProgAsLevel) XIO(PCmd_Prog) ,XIO(Cfg_HasProg) ] ]OTU(Wrk_Prog);
				RC: "Level signal state correction. Verifying signal high final states.";
				N: XIC(Cfg_PCmdProgAsLevel)XIC(PCmd_Prog)XIO(Wrk_Prog)XIO(Wrk_Lock)OTL(Wrk_Prog);
				RC: "============================================================$N"
				    "MAINTENANCE AND OPERATOR COMMAND READIES$N"
				    "============================================================$N"
				    "This rung generates the $QORdy_$Q and $QMRdy_$Q bits that signify to the$N"
				    "HMI that the corresponding command should $Qdo$Q something$N"
				    "and the command button should be enabled on the display.$N"
				    "$N"
				    "NOTE ON MAINTENANCE ACQUIRE: Ready for MCmd_Acq if Maintenance$N"
				    "is allowed and the internal Maintenance latch is NOT set.  However,$N"
				    "we need to display Ready even if latch IS set so that Sts_MAcqRcvd$N"
				    "can blink to reset an external Maintenance expiration timer!!!$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XRdy_Acq, XRdy_Rel so External Acq/Rel can be used on HMI .  #####";
				N: [XIC(Cfg_HasMaint) [OTE(MRdy_Acq) ,XIC(Wrk_Maint) OTE(MRdy_Rel) ] ,XIC(Cfg_HasMOoS) [XIC(Wrk_MOoS) OTE(MRdy_IS) ,XIO(Wrk_MOoS) OTE(MRdy_OoS) ] ,XIC(Cfg_HasExt) XIO(Cfg_ExtAcqAsLevel) [XIC(Wrk_Ext) OTE(XRdy_Rel) ,XIO(Wrk_Ext) XIO(Inp_ExtInh) OTE(XRdy_Acq) ] ,XIO(Wrk_Lock) XIC(Cfg_HasOperLocked) OTE(ORdy_Lock) ,[XIO(Wrk_Lock) XIC(Wrk_Prog) [XIC(Cfg_HasOper) XIO(Cfg_PCmdProgAsLevel) ,XIC(Cfg_HasOperLocked) [XIO(Cfg_PCmdProgAsLevel) ,XIC(PCmd_Prog) XIO(Cfg_PCmdPriority) ] ] ,XIC(Wrk_Lock) XIO(Wrk_Prog) XIC(Cfg_HasOper) [XIO(Cfg_PCmdLockAsLevel) ,XIO(PCmd_Lock) ] [XIO(Cfg_PCmdProgAsLevel) ,XIO(PCmd_Prog) ] ] OTE(ORdy_Oper) ,XIO(Wrk_Prog) [XIC(Wrk_Lock) OTE(ORdy_Unlock) ,[XIC(Cfg_HasProg) [XIO(Cfg_PCmdProgAsLevel) ,XIC(PCmd_Prog) ] ,XIC(Cfg_HasProgLocked) [XIO(Cfg_PCmdLockAsLevel) ,XIC(PCmd_Lock) ] ] OTE(ORdy_Prog) ] ,[XIO(Cfg_ProgNormal) XIC(ORdy_Oper) XIC(Wrk_Prog) ,XIC(Cfg_ProgNormal) XIC(ORdy_Prog) XIO(Wrk_Prog) ] OTE(ORdy_Normal) ];
				RC: "============================================================$N"
				    "STATUS AND ENUMERATED STATUS GENERATION$N"
				    "============================================================$N"
				    "This rung provides bitmapped status for use on the HMI $QTotem Pole$Q object:$N"
				    ".0 = Hand$N"
				    ".1 = Programmed Out of Service (always cleared here)$N"
				    ".2 = Maintenance Out of Service$N"
				    ".3 = Maintenance$N"
				    ".4= Override$N"
				    ".5 = External$N"
				    ".6 = Program Locked$N"
				    ".7 = Program$N"
				    ".8 = Operator Locked$N"
				    ".9 = Operator$N"
				    "In addition, the final selections of the Program / Operator selection latch$N"
				    "and the Prog/Oper lock latch are captured for use next scan.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Added XCmd_Acq, XCmd_Rel, Cfg_ExtAcqAsLevel, removed Inp_Ext.  #####";
				N: [XIC(Inp_Hand) OTE(Sts_bSrc.0) ,OTU(Sts_bSrc.1) ,XIC(Wrk_MOoS) OTE(Sts_bSrc.2) ,XIC(Wrk_Maint) OTE(Sts_bSrc.3) ,XIC(Inp_Ovrd) [XIC(Cfg_OvrdOverLock) ,XIO(Cfg_OvrdOverLock) [XIO(Wrk_Lock) ,XIC(Sts_bSrc.4) ] ] OTE(Sts_bSrc.4) ,XIC(Wrk_Ext) XIC(Cfg_HasExt) XIO(Inp_ExtInh) OTE(Sts_bSrc.5) ,XIC(Wrk_Prog) OTL(Wrk_ProgOperSel) [XIC(Wrk_Lock) OTE(Sts_bSrc.6) ,XIO(Wrk_Lock) OTE(Sts_bSrc.7) ] ,XIO(Wrk_Prog) OTU(Wrk_ProgOperSel) [XIC(Wrk_Lock) OTE(Sts_bSrc.8) ,XIO(Wrk_Lock) OTE(Sts_bSrc.9) ] ,XIC(Wrk_Lock) OTL(Wrk_ProgOperLock) ,XIO(Wrk_Lock) OTU(Wrk_ProgOperLock) ];
				RC: "This rung and the next determine the final Command Source based on the$N"
				    "states of the inputs and internal working bits.  Individual Command Source$N"
				    "Status bits and an enumerated Status value are generated.$N"
				    "$N"
				    "Between the internal working bits used above and the rules implemented here,$N"
				    "outside objects cannot manipulate the state of this object by setting/clearing its Status bits.$N"
				    "$N"
				    "Public Status is generated for:$N"
				    "* Hand 4$N"
				    "* Out of Service 129$N"
				    "* Maintenance 8$N"
				    "* Override 16$N"
				    "* External 256$N"
				    "* Program 32$N"
				    "* Operator 64$N"
				    "* Program / Operator Lock status 33/65$N"
				    "* Command Source = Normal 34/66";
				N: XIC(Inp_Hand)OTE(Sts_Hand)OTE(Sts_eSrc.2);
				RC: "This rung determines the final Command Source based on requests and priorities.";
				N: XIO(Inp_Hand)[XIC(Wrk_MOoS) OTE(Sts_OoS) OTE(Sts_eSrc.7) ,XIO(Wrk_MOoS) [XIC(Wrk_Maint) OTE(Sts_Maint) OTE(Sts_eSrc.3) ,XIO(Wrk_Maint) [XIC(Inp_Ovrd) [XIO(Wrk_Lock) ,XIC(Cfg_OvrdOverLock) ,XIC(Sts_Ovrd) ] OTE(Sts_Ovrd) OTE(Sts_eSrc.4) ,XIO(Sts_Ovrd) [XIC(Sts_bSrc.5) [XIO(Wrk_Lock) ,XIC(Cfg_ExtOverLock) ] OTE(Sts_Ext) OTE(Sts_eSrc.8) ,XIO(Sts_Ext) [XIC(Wrk_Prog) OTE(Sts_Prog) OTE(Sts_eSrc.5) ,XIO(Wrk_Prog) OTE(Sts_Oper) OTE(Sts_eSrc.6) ] [XIC(Wrk_Lock) OTE(Sts_eSrc.0) [XIC(Wrk_Prog) OTE(Sts_ProgLocked) ,XIO(Wrk_Prog) OTE(Sts_OperLocked) ] ,[XIC(Wrk_Prog) XIC(Cfg_ProgNormal) ,XIO(Wrk_Prog) XIO(Cfg_ProgNormal) ] OTE(Sts_Normal) XIO(Wrk_Lock) OTE(Sts_eSrc.1) ] ] ] ] ];
				RC: "The final states of the internal Program / Operator selection latch and the$N"
				    "Prog/Oper Lock latch are made available as Status bits.";
				N: [XIC(Wrk_ProgOperSel) OTE(Sts_ProgOperSel) ,XIC(Wrk_ProgOperLock) OTE(Sts_ProgOperLock) ];
				RC: "Sts_ProgReqInh is set if it is not possible to go from the current selection$N"
				    "to Program (or Program Locked) by a request to go to Program (or Program Locked).";
				N: [XIO(Sts_Prog) [XIO(Sts_Oper) ,XIC(Sts_OperLocked) ] [XIO(Sts_Ext) ,XIO(Cfg_HasProgLocked) ,XIC(Cfg_ExtOverLock) ] ,XIO(Cfg_HasProg) XIO(Cfg_HasProgLocked) ]OTE(Sts_ProgReqInh);
				RC: "Sts_ExtReqInh is set if it is not possible to go from the current selection$N"
				    "to External by a request to go to External.";
				N: [XIO(Cfg_HasExt) ,XIC(Inp_ExtInh) ,XIO(Sts_Ext) [XIO(Sts_Oper) XIO(Sts_Prog) ,XIO(Cfg_ExtOverLock) [XIC(Sts_OperLocked) ,XIC(Sts_ProgLocked) ] ] ]OTE(Sts_ExtReqInh);
		END_ROUTINE

		ROUTINE Prescan (Description := "Sets internal state and enumerated / bit status to $Qnot initialized$Q.")
				RC: "============================================================$N"
				    "P_CmdSrc:  Prescan Handling$N"
				    "============================================================$N"
				    "On powerup / prescan::$N"
				    "* Set the enumerated selection Status to $QNot initialized$Q (zero);$N"
				    "* Set the bitmapped selection Status to $QNot initializer$Q (bit .0);$N"
				    "* Flag the instruction to execute the initialization rungs when run.";
				N: CLR(Sts_eSrc)CLR(Sts_bSrc)OTU(Wrk_Init);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ENCODED_DATA (EncodedType := ADD_ON_INSTRUCTION_DEFINITION,
	              Name := "P_Seq",
	              Description := "Simple Sequencer",
	              Revision := "4.10",
	              RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	              RevisionExtension := ".01 Release",
	              Vendor := "Rockwell Automation",
	              EditedDate := "2019-10-17T21:08:28.760Z",
	              AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis instruction executes a user-defined sequence using$N32 BOOL outputs to drive equipment / operations, 32 REAL$Noutput to issue setpoints / parameters, and 32 BOOL inputs$Nfor feedback checking in order to satisfy conditions to go$Nfrom step to step.$N$NThe steps of the sequence are stored in a separate array.$NThis allows any number of steps to be allocated for a given$Nsequence, allowing optimum use of memory.  The array must$Nhave at least TWO elements.  (Element 0 is used internally,$Nand Step 1 must exist.)$N$N     IMPORTANT:     Use of a sequence array with more$Nthan 500 elements will result in large scan time bumps when$Nediting from the HMI and is STRONGLY discouraged!$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$NSee 4.10 Release Notes for details.$N* No changes, uprevved because P_CmdSrc 4.10.01 is used.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.01)$NSee 4.10 Release Notes for details.$N* Added Stopping state and steps, Abort state.$N* Corrected parameter/local tag external access.$N* Added Cfg_HasMoreObj.$N* Updated to use P_CmdSrc V4.10.00.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.00 Release Notes for details.$N* Modified to not clear SingleStep operation at end of sequence.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-07)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added notify and unack count rollup.$N* Changed $QMode$Q to $QCommand Source$Q using P_CmdSrc 4.00.00.$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N* Aligned ready bit naming with command bit names.$N* Added configurable decimal places for display on HMI.$N",
	              EncryptionConfig := 9) 
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_00 OF Wrk_Inputs.0 (Description := "Sequencer Input bit #00",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			Inp_01 OF Wrk_Inputs.1 (Description := "Sequencer Input bit #01",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			Inp_02 OF Wrk_Inputs.2 (Description := "Sequencer Input bit #02",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			Inp_03 OF Wrk_Inputs.3 (Description := "Sequencer Input bit #03",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			Inp_04 OF Wrk_Inputs.4 (Description := "Sequencer Input bit #04",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			Inp_05 OF Wrk_Inputs.5 (Description := "Sequencer Input bit #05",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			Inp_06 OF Wrk_Inputs.6 (Description := "Sequencer Input bit #06",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			Inp_07 OF Wrk_Inputs.7 (Description := "Sequencer Input bit #07",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			Inp_08 OF Wrk_Inputs.8 (Description := "Sequencer Input bit #08",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_09 OF Wrk_Inputs.9 (Description := "Sequencer Input bit #09",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_10 OF Wrk_Inputs.10 (Description := "Sequencer Input bit #10",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_11 OF Wrk_Inputs.11 (Description := "Sequencer Input bit #11",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_12 OF Wrk_Inputs.12 (Description := "Sequencer Input bit #12",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_13 OF Wrk_Inputs.13 (Description := "Sequencer Input bit #13",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_14 OF Wrk_Inputs.14 (Description := "Sequencer Input bit #14",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_15 OF Wrk_Inputs.15 (Description := "Sequencer Input bit #15",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_16 OF Wrk_Inputs.16 (Description := "Sequencer Input bit #16",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_17 OF Wrk_Inputs.17 (Description := "Sequencer Input bit #17",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_18 OF Wrk_Inputs.18 (Description := "Sequencer Input bit #18",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_19 OF Wrk_Inputs.19 (Description := "Sequencer Input bit #19",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_20 OF Wrk_Inputs.20 (Description := "Sequencer Input bit #20",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_21 OF Wrk_Inputs.21 (Description := "Sequencer Input bit #21",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_22 OF Wrk_Inputs.22 (Description := "Sequencer Input bit #22",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_23 OF Wrk_Inputs.23 (Description := "Sequencer Input bit #23",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_24 OF Wrk_Inputs.24 (Description := "Sequencer Input bit #24",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_25 OF Wrk_Inputs.25 (Description := "Sequencer Input bit #25",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_26 OF Wrk_Inputs.26 (Description := "Sequencer Input bit #26",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_27 OF Wrk_Inputs.27 (Description := "Sequencer Input bit #27",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_28 OF Wrk_Inputs.28 (Description := "Sequencer Input bit #28",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_29 OF Wrk_Inputs.29 (Description := "Sequencer Input bit #29",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_30 OF Wrk_Inputs.30 (Description := "Sequencer Input bit #30",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_31 OF Wrk_Inputs.31 (Description := "Sequencer Input bit #31",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No);
			Inp_SeqLoopCnt : DINT (Description := "Number of times to execute entire Sequence in a loop",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 1);
			Inp_Started : BOOL (Description := "1=External logic / equipment ready for Sequence to execute",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1);
			Inp_Branch : BOOL (Description := "1=Sequence should branch if configured to do so on Input, 0=don$'t branch",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Inp_PermOK : BOOL (Description := "1=Permissives OK, sequence can start",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 1);
			Inp_NBPermOK : BOOL (Description := "1=Non-Bypassable Permissives OK, sequence can start",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 1);
			Inp_IntlkOK : BOOL (Description := "1=Interlocks OK, sequence can start/run",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 1);
			Inp_NBIntlkOK : BOOL (Description := "1=Non-Bypassable Interlocks OK, sequence can start/run",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_ExtInh OF CmdSrc.Inp_ExtInh (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Reset : BOOL (Description := "1=Reset Shed Latches, Cleared Alarms, Faults",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Inp_PromptCfm : BOOL (Description := "1=Manual Prompt has received Operator confirmation",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Inp_PromptRdy : BOOL (Description := "1=Manual Prompt has been posted to Operator",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Inp_PromptSelect : DINT (Description := "Integer response to Manual Prompt",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_HasInp : DINT (Description := "Bits=1 are Inputs configured to Exist (Engineering)",
			                      Usage := Input,
			                      RADIX := Binary,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_UseInp : DINT (Description := "Bits=1 are Inputs configured to be Used (Maintenance)",
			                      Usage := Input,
			                      RADIX := Binary,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := -1);
			Cfg_InpForceMask : DINT (Description := "Bits=1 are Inputs available to be Forced by Maintenance",
			                            Usage := Input,
			                            RADIX := Binary,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_OutTrackMask : DINT (Description := "Bits=1 are Boolean Outputs set for Tracking when Sequence not writing to them",
			                            Usage := Input,
			                            RADIX := Binary,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := -1);
			Cfg_OutRealTrackMask : DINT (Description := "Bits=1 are Real Outputs set for Tracking when Sequence not writing to them",
			                                Usage := Input,
			                                RADIX := Binary,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := -1);
			Cfg_ScaleRealOut : DINT (Description := "Bits=1 are REAL Outputs that are scaled using Inp_ScaleFact",
			                            Usage := Input,
			                            RADIX := Binary,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_HoldOutState : DINT (Description := "State of Outputs on Hold",
			                            Usage := Input,
			                            RADIX := Binary,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_HoldOutMask : DINT (Description := "Which Outputs to Set on Hold",
			                           Usage := Input,
			                           RADIX := Binary,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HoldOutRealMask : DINT (Description := "Which Real Outputs to Write on Hold",
			                               Usage := Input,
			                               RADIX := Binary,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 0);
			Cfg_StopOutState : DINT (Description := "State of Outputs on Stop",
			                            Usage := Input,
			                            RADIX := Binary,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_StopOutMask : DINT (Description := "Which Outputs to Set on Stop",
			                           Usage := Input,
			                           RADIX := Binary,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_StopOutRealMask : DINT (Description := "Which Real Outputs to Write on Stop",
			                               Usage := Input,
			                               RADIX := Binary,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 0);
			Cfg_IntlkTripAction : SINT (Description := "Interlock Trip action (enum) 0=Abort, 1=Hold, 2=Go to Intlk Step",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 0);
			Cfg_StepFTmrDNAction : SINT (Description := "Step Timeout action (enum) 0=Alarm/Status only, 1=Hold",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0);
			Cfg_QtyMin : INT (Description := "Quantity Input Lower Limit",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_QtyMax : INT (Description := "Quantity Input Upper Limit",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 100);
			Cfg_StdQty : INT (Description := "Quantity Input Standard (Nominal) Value (=100%)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 100);
			Cfg_SeqTO : DINT (Description := "Sequence Timeout time (ms)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_HasPrompt : BOOL (Description := "1=This Sequence has an associated Manual Prompt object",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_HasPermObj : BOOL (Description := "1=Tells HMI a Permissive object is connected",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasIntlkObj : BOOL (Description := "1=Tells HMI an Intlerlock object is connected",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_AutoReset : BOOL (Description := "Set if user doesn$'t want to require a Reset",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_HasStepTOAlm OF StepTO.Cfg_Exists (Description := "1=Step Timeout Alarm exists and will be checked",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_HasSeqTOAlm OF SeqTO.Cfg_Exists (Description := "1=Sequence Timeout Alarm exists and will be checked",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_HasIntlkTripAlm OF IntlkTrip.Cfg_Exists (Description := "1=Interlock Trip Alarm exists and will be checked",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_StepTOResetReqd OF StepTO.Cfg_ResetReqd (Description := "1=Reset required to clear Step Timeout Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_SeqTOResetReqd OF SeqTO.Cfg_ResetReqd (Description := "1=Reset required to clear Sequence Timeout Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_IntlkTripResetReqd OF IntlkTrip.Cfg_ResetReqd (Description := "1=Reset required to clear Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_StepTOAckReqd OF StepTO.Cfg_AckReqd (Description := "1=Acknowledge required for Step Timeout Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_SeqTOAckReqd OF SeqTO.Cfg_AckReqd (Description := "1=Acknowledge required for Sequence Timeout Alarm",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_IntlkTripAckReqd OF IntlkTrip.Cfg_AckReqd (Description := "1=Acknowledge required for Interlock Trip Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_SeqTOSeverity OF SeqTO.Cfg_Severity (Description := "Step Timeout Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_StepTOSeverity OF StepTO.Cfg_Severity (Description := "Sequence Timeout Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_IntlkTripSeverity OF IntlkTrip.Cfg_Severity (Description := "Interlock Trip Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			PSet_Owner : DINT (Description := "Program Owner Request ID (non-zero) or Release (zero)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PSet_Qty : INT (Description := "Program Quantity Input Value",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 100);
			XSet_Qty : INT (Description := "External Quantity Input Value",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 100);
			MSet_SingleStep : BOOL (Description := "Maintenance Setting to execute Single Step only: 0 = Normal, 1 = Single Step",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			PCmd_SeqStart OF Wrk_SMProgCmd.0 (Description := "Program Command to Start Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			PCmd_SeqHold OF Wrk_SMProgCmd.6 (Description := "Program Command to Hold Sequence",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			PCmd_SeqRestart OF Wrk_SMProgCmd.7 (Description := "Program Command to Restart Sequence",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_SeqStop OF Wrk_SMProgCmd.2 (Description := "Program Command to Stop Sequence",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			PCmd_SeqAbort OF Wrk_SMProgCmd.5 (Description := "Program Command to Abort Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			PCmd_SeqReset OF Wrk_SMProgCmd.3 (Description := "Program Command to Reset Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			PCmd_Prog OF CmdSrc.PCmd_Prog (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Oper OF CmdSrc.PCmd_Oper (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Lock OF CmdSrc.PCmd_Lock (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Unlock OF CmdSrc.PCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Normal OF CmdSrc.PCmd_Normal (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Reset : BOOL (Description := "Program Command to Reset all Alarms requiring Reset",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_StepTOAck OF StepTO.PCmd_Ack (Description := "Program Command to Acknowledge Step Timeout Alarm",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			PCmd_StepTOSuppress OF StepTO.PCmd_Suppress (Description := "Program Command to Suppress Step Timeout Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_StepTOUnsuppress OF StepTO.PCmd_Unsuppress (Description := "Program Command to Unsuppress Step Timeout Alarm",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			PCmd_StepTOUnshelve OF StepTO.PCmd_Unshelve (Description := "Program Command to Unshelve Step Timeout Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_SeqTOAck OF SeqTO.PCmd_Ack (Description := "Program Command to Acknowledge Sequence Timeout Alarm",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			PCmd_SeqTOSuppress OF SeqTO.PCmd_Suppress (Description := "Program Command to Suppress Sequence Timeout Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_SeqTOUnsuppress OF SeqTO.PCmd_Unsuppress (Description := "Program Command to Unsuppress Sequence Timeout Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_SeqTOUnshelve OF SeqTO.PCmd_Unshelve (Description := "Program Command to Unshelve Sequence Timeout Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_IntlkTripAck OF IntlkTrip.PCmd_Ack (Description := "Program Command to Acknowledge Interlock Trip Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_IntlkTripSuppress OF IntlkTrip.PCmd_Suppress (Description := "Program Command to Suppress Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IntlkTripUnsuppress OF IntlkTrip.PCmd_Unsuppress (Description := "Program Command to Unsuppress Interlock Trip Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_IntlkTripUnshelve OF IntlkTrip.PCmd_Unshelve (Description := "Program Command to Unshelve Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			MCmd_Rel OF CmdSrc.MCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			OCmd_SeqStart OF Wrk_SMOperCmd.0 (Description := "Operator Command to Start Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			OCmd_SeqHold OF Wrk_SMOperCmd.6 (Description := "Operator Command to Hold Sequence",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			OCmd_SeqRestart OF Wrk_SMOperCmd.7 (Description := "Operator Command to Restart Sequence",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			OCmd_SeqStop OF Wrk_SMOperCmd.2 (Description := "Operator Command to Stop Sequence",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			OCmd_SeqAbort OF Wrk_SMOperCmd.5 (Description := "Operator Command to Abort Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			OCmd_SeqReset OF Wrk_SMOperCmd.3 (Description := "Operator Command to Reset Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			OCmd_SeqPause OF Wrk_OperPauseBits.0 (Description := "Operator Command to Pause Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			OCmd_SeqResume OF Wrk_OperPauseBits.1 (Description := "Operator Command to Resume Sequence",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			OCmd_SeqAutoPause OF Wrk_OperPauseBits.2 (Description := "Operator Command to Auto-Pause Sequence",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			OCmd_SeqCancelPause OF Wrk_OperPauseBits.3 (Description := "Operator Command to Cancel Sequence Pause or AutoPause",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			OCmd_Unlock OF CmdSrc.OCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			XCmd_SeqStart OF Wrk_SMExtCmd.0 (Description := "Operator Command to Start Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			XCmd_SeqHold OF Wrk_SMExtCmd.6 (Description := "Operator Command to Hold Sequence",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			XCmd_SeqRestart OF Wrk_SMExtCmd.7 (Description := "Operator Command to Restart Sequence",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			XCmd_SeqStop OF Wrk_SMExtCmd.2 (Description := "Operator Command to Stop Sequence",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			XCmd_SeqAbort OF Wrk_SMExtCmd.5 (Description := "Operator Command to Abort Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			XCmd_SeqReset OF Wrk_SMExtCmd.3 (Description := "Operator Command to Reset Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			XCmd_SeqPause OF Wrk_ExtPauseBits.0 (Description := "Operator Command to Pause Sequence",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			XCmd_SeqResume OF Wrk_ExtPauseBits.1 (Description := "Operator Command to Resume Sequence",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			XCmd_SeqAutoPause OF Wrk_ExtPauseBits.2 (Description := "Operator Command to Auto-Pause Sequence",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			XCmd_SeqCancelPause OF Wrk_ExtPauseBits.3 (Description := "Operator Command to Cancel Sequence Pause or AutoPause",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			XCmd_Acq OF CmdSrc.XCmd_Acq (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Rel OF CmdSrc.XCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Reset : BOOL (Description := "External Command to Reset all Alarms requiring Reset",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Out_00 OF Wrk_Out.0 (Description := "Sequencer Output bit #00",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Out_01 OF Wrk_Out.1 (Description := "Sequencer Output bit #01",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Out_02 OF Wrk_Out.2 (Description := "Sequencer Output bit #02",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Out_03 OF Wrk_Out.3 (Description := "Sequencer Output bit #03",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Out_04 OF Wrk_Out.4 (Description := "Sequencer Output bit #04",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Out_05 OF Wrk_Out.5 (Description := "Sequencer Output bit #05",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Out_06 OF Wrk_Out.6 (Description := "Sequencer Output bit #06",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Out_07 OF Wrk_Out.7 (Description := "Sequencer Output bit #07",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Out_08 OF Wrk_Out.8 (Description := "Sequencer Output bit #08",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_09 OF Wrk_Out.9 (Description := "Sequencer Output bit #09",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_10 OF Wrk_Out.10 (Description := "Sequencer Output bit #10",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_11 OF Wrk_Out.11 (Description := "Sequencer Output bit #11",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_12 OF Wrk_Out.12 (Description := "Sequencer Output bit #12",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_13 OF Wrk_Out.13 (Description := "Sequencer Output bit #13",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_14 OF Wrk_Out.14 (Description := "Sequencer Output bit #14",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_15 OF Wrk_Out.15 (Description := "Sequencer Output bit #15",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_16 OF Wrk_Out.16 (Description := "Sequencer Output bit #16",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_17 OF Wrk_Out.17 (Description := "Sequencer Output bit #17",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_18 OF Wrk_Out.18 (Description := "Sequencer Output bit #18",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_19 OF Wrk_Out.19 (Description := "Sequencer Output bit #19",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_20 OF Wrk_Out.20 (Description := "Sequencer Output bit #20",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_21 OF Wrk_Out.21 (Description := "Sequencer Output bit #21",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_22 OF Wrk_Out.22 (Description := "Sequencer Output bit #22",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_23 OF Wrk_Out.23 (Description := "Sequencer Output bit #23",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_24 OF Wrk_Out.24 (Description := "Sequencer Output bit #24",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_25 OF Wrk_Out.25 (Description := "Sequencer Output bit #25",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_26 OF Wrk_Out.26 (Description := "Sequencer Output bit #26",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_27 OF Wrk_Out.27 (Description := "Sequencer Output bit #27",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_28 OF Wrk_Out.28 (Description := "Sequencer Output bit #28",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_29 OF Wrk_Out.29 (Description := "Sequencer Output bit #29",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_30 OF Wrk_Out.30 (Description := "Sequencer Output bit #30",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_31 OF Wrk_Out.31 (Description := "Sequencer Output bit #31",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Out_Real_00 OF Wrk_ROut[0] (Description := "Sequencer Output REAL value #00",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_01 OF Wrk_ROut[1] (Description := "Sequencer Output REAL value #01",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_02 OF Wrk_ROut[2] (Description := "Sequencer Output REAL value #02",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_03 OF Wrk_ROut[3] (Description := "Sequencer Output REAL value #03",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_04 OF Wrk_ROut[4] (Description := "Sequencer Output REAL value #04",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_05 OF Wrk_ROut[5] (Description := "Sequencer Output REAL value #05",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_06 OF Wrk_ROut[6] (Description := "Sequencer Output REAL value #06",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_07 OF Wrk_ROut[7] (Description := "Sequencer Output REAL value #07",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_08 OF Wrk_ROut[8] (Description := "Sequencer Output REAL value #08",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_09 OF Wrk_ROut[9] (Description := "Sequencer Output REAL value #09",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_10 OF Wrk_ROut[10] (Description := "Sequencer Output REAL value #10",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_11 OF Wrk_ROut[11] (Description := "Sequencer Output REAL value #11",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_12 OF Wrk_ROut[12] (Description := "Sequencer Output REAL value #12",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_13 OF Wrk_ROut[13] (Description := "Sequencer Output REAL value #13",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_14 OF Wrk_ROut[14] (Description := "Sequencer Output REAL value #14",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_15 OF Wrk_ROut[15] (Description := "Sequencer Output REAL value #15",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_16 OF Wrk_ROut[16] (Description := "Sequencer Output REAL value #16",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_17 OF Wrk_ROut[17] (Description := "Sequencer Output REAL value #17",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_18 OF Wrk_ROut[18] (Description := "Sequencer Output REAL value #18",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_19 OF Wrk_ROut[19] (Description := "Sequencer Output REAL value #19",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_20 OF Wrk_ROut[20] (Description := "Sequencer Output REAL value #20",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_21 OF Wrk_ROut[21] (Description := "Sequencer Output REAL value #21",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_22 OF Wrk_ROut[22] (Description := "Sequencer Output REAL value #22",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_23 OF Wrk_ROut[23] (Description := "Sequencer Output REAL value #23",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_24 OF Wrk_ROut[24] (Description := "Sequencer Output REAL value #24",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_25 OF Wrk_ROut[25] (Description := "Sequencer Output REAL value #25",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_26 OF Wrk_ROut[26] (Description := "Sequencer Output REAL value #26",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_27 OF Wrk_ROut[27] (Description := "Sequencer Output REAL value #27",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_28 OF Wrk_ROut[28] (Description := "Sequencer Output REAL value #28",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_29 OF Wrk_ROut[29] (Description := "Sequencer Output REAL value #29",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_30 OF Wrk_ROut[30] (Description := "Sequencer Output REAL value #30",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_Real_31 OF Wrk_ROut[31] (Description := "Sequencer Output REAL value #31",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Out_PromptReq : BOOL (Description := "1=Manual Prompt should be posted to Operator",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Out_PromptRef : DINT (Description := "Link to which manual prompt (in array)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_Qty : INT (Description := "Accepted value of PSet_ / OSet_Qty quantity entry",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_QtyPct : REAL (Description := "Quantity As a Percent of Nominal Quantity",
			                      Usage := Output,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0.00000000e+000);
			Val_MaxStepIndex : DINT (Description := "Maximum allowed Step Index (= size of Ref_Steps array - 1)",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Val_CurrStepNumAbs : DINT (Description := "Currently Running Step (Absolute)",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := Yes,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			Val_CurrStepNum : DINT (Description := "Currently Running Step (Relative)",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Val_SeqLoopCnt OF Wrk_SeqLoopCnt (Description := "Number of sequence loops completed",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Val_InSeqDay : INT (Description := "Time since sequence was started: days in ddd hh:mm:ss",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Val_InSeqHrs : SINT (Description := "Time since sequence was started: hours in ddd hh:mm:ss",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Val_InSeqMin : SINT (Description := "Time since sequence was started: minutes in ddd hh:mm:ss",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Val_InSeqSec : SINT (Description := "Time since sequence was started: seconds in ddd hh:mm:ss",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Val_InSeqACC OF Wrk_InSeqT.ACC (Description := "Time in Sequence Timer Accumulator (msec)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Val_InSeqTOPct : SINT (Description := "Percentage of elapsed time to Sequence Timeout (for bargraph)",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Val_InStepDay : INT (Description := "Time since sequence was started: days in ddd hh:mm:ss",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_InStepHrs : SINT (Description := "Time in this step: hours in hh:mm:ss",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_InStepMin : SINT (Description := "Time in this step: minutes in hh:mm:ss",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_InStepSec : SINT (Description := "Time in this step: seconds in hh:mm:ss",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_InStepACC OF Wrk_InStepT.ACC (Description := "Time In Step Timer Accumulator (msec)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Val_InStepTOPct : SINT (Description := "Percentage of elapsed time to Sequence Timeout (for bargraph)",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Val_StepTRemainHrs : SINT (Description := "Step time remaining: hours in hh:mm:ss",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			Val_StepTRemainMin : SINT (Description := "Step time remaining: minutes in hh:mm:ss",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			Val_StepTRemainSec : SINT (Description := "Step time remaining: seconds in hh:mm:ss",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			Val_StepTRemain : DINT (Description := "Remaining Time Before Transition is Allowed",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Val_State : DINT (Description := "Seq. State: .0=Idle, .1=Starting, .2=Running, .3=Complete, .4=Stopped, .5=Held",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_Owner : DINT (Description := "Current Object Owner ID (0=not owned)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : SINT (Description := "Highest Alarm prio and ack status this object + channel (enum)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : SINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_SeqIdle OF Wrk_SMState.0 (Description := "1=Sequence is Idle",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only);
			Sts_SeqStarting OF Wrk_SMState.1 (Description := "1=Sequence is Starting",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only);
			Sts_SeqRunning OF Wrk_SMState.2 (Description := "1=Sequence is Running",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only);
			Sts_SeqHeld OF Wrk_SMState.5 (Description := "1=Sequence is Held",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only);
			Sts_SeqComplete OF Wrk_SMState.3 (Description := "1=Sequence is Complete",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only);
			Sts_SeqStopping OF Wrk_SMState.6 (Description := "1=Sequence is Stopping",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only);
			Sts_SeqStopped OF Wrk_SMState.4 (Description := "1=Sequence is Stopped",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only);
			Sts_SeqAborted OF Wrk_SMState.7 (Description := "1=Sequence is Stopped",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only);
			Sts_SeqPaused OF Wrk_OperPauseBits.9 (Description := "1=Sequence is Paused",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read/Write);
			Sts_SeqExecuting : BOOL (Description := "1=Starting, Running or Holding",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Sts_InpForced : DINT (Description := "Bits=1 are Inputs Forced by Maintenance",
			                         Usage := Output,
			                         RADIX := Binary,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Qualified : DINT (Description := "Bits=1 are Qualified Inputs (in required state for transition)",
			                         Usage := Output,
			                         RADIX := Binary,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_TQualified : BOOL (Description := "1=Step Timer Qualified for current step",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_MQualified : BOOL (Description := "1=Manual Prompt Qualified for current step",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_Available : BOOL (Description := "1=Sequence available for control by automation (Prog)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Bypass : BOOL (Description := "1=Bypassable Interlocks and Permissives are Bypassed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_BypActive : BOOL (Description := "1=Bypassing Active (Bypassed or Maintenance)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_NotRdy : BOOL (Description := "1=Sequence Not Ready, see detail bits for reason",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_CfgErr : BOOL (Description := "1=Device Not Ready: Configuration Error",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Nrdy_Intlk : BOOL (Description := "1=Device Not Ready: Interlock Not OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_Perm : BOOL (Description := "1=Device Not Ready: Permissive Not OK",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Nrdy_OoS : BOOL (Description := "1=Device Not Ready: Device is Out of Service",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=A Maintenance Bypass is Active, display icon",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=An Alarm is Shelved, Disabled or Suppressed, display icon",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time or Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_StepSizeFault : BOOL (Description := "1=Error in Config: Invalid number of steps in step array",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			Err_NextStep : BOOL (Description := "1=Error in Config: Next Step Number is outside array bounds",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Err_QtyCfg : BOOL (Description := "1=Error in Config: Min, Max, Std Quantity Invalid",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Err_Qty : BOOL (Description := "1=Error in Config: Entered Quantity Out of Range",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Sts_OoS OF CmdSrc.Sts_OoS (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			Sts_Maint OF CmdSrc.Sts_Maint (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Sts_Ext OF CmdSrc.Sts_Ext (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			Sts_Prog OF CmdSrc.Sts_Prog (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			Sts_ProgLocked OF CmdSrc.Sts_ProgLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Oper OF CmdSrc.Sts_Oper (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			Sts_OperLocked OF CmdSrc.Sts_OperLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Normal OF CmdSrc.Sts_Normal (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_ExtReqInh OF CmdSrc.Sts_ExtReqInh (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_ProgReqInh OF CmdSrc.Sts_ProgReqInh (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_MAcqRcvd OF CmdSrc.Sts_MAcqRcvd (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyReset OF ORdy_Reset (Description := "1=The drive, or a latched alarm or shed condition, is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_StepTO OF StepTO.Inp (Description := "1=Step has timed out",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read/Write);
			Alm_StepTO OF StepTO.Alm (Description := "1=Step Timeout Alarm",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read/Write);
			Ack_StepTO OF StepTO.Ack (Description := "1=Step Timeout Alarm has been acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read/Write);
			Sts_StepTODisabled OF StepTO.Disabled (Description := "1=Step Timeout Alarm has been Disabled by Maintenance (inhibits new alarm)",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_StepTOShelved OF StepTO.Shelved (Description := "1=Step Timeout Alarm has been Shelved by Operator (inhibits new alarm)",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Sts_StepTOSuppressed OF StepTO.Suppressed (Description := "1=Step Timeout Alarm has been Suppressed by Program logic (inhibits new alarm)",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_SeqTO OF SeqTO.Inp (Description := "1=Sequence has timed out",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Alm_SeqTO OF SeqTO.Alm (Description := "1=Sequence Timeout Alarm",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Ack_SeqTO OF SeqTO.Ack (Description := "1=Sequence Timeout Alarm has been acknowledged",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Sts_SeqTODisabled OF SeqTO.Disabled (Description := "1=Sequence Timeout Alarm has been Disabled by Maintenance (inhibits new alarm)",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Sts_SeqTOShelved OF SeqTO.Shelved (Description := "1=Sequence Timeout Alarm has been Shelved by Operator (inhibits new alarm)",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_SeqTOSuppressed OF SeqTO.Suppressed (Description := "1=Sequence Timeout Alarm has been Suppressed by Program logic (inhibits new alarm)",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_IntlkTrip OF IntlkTrip.Inp (Description := "1=Sequence stopped by an Interlock NOT OK (one-shot)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Alm_IntlkTrip OF IntlkTrip.Alm (Description := "1=Alarm: Sequence stopped by an Interlock NOT OK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Ack_IntlkTrip OF IntlkTrip.Ack (Description := "1=Interlock Trip Alarm has been acknowledged",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_IntlkTripDisabled OF IntlkTrip.Disabled (Description := "1=Interlock Trip Alarm has been Disabled by Maintenance (inhibits new alarm)",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_IntlkTripShelved OF IntlkTrip.Shelved (Description := "1=Interlock Trip Alarm has been Shelved by Operator (inhibits new alarm)",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_IntlkTripSuppressed OF IntlkTrip.Suppressed (Description := "1=Interlock Trip Alarm has been Suppressed by Program logic (inhibits new alarm)",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			MRdy_Rel OF CmdSrc.MRdy_Rel (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			ORdy_Unlock OF CmdSrc.ORdy_Unlock (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only);
			Ref_Steps : P_SeqStep[2] (Description := "Tag containing list of Steps for this Sequence",
			                     Usage := InOut,
			                     Required := Yes,
			                     Visible := Yes);
			P_Seq : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := No,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
		END_PARAMETERS

			
	END_ENCODED_DATA
	ENCODED_DATA (EncodedType := ADD_ON_INSTRUCTION_DEFINITION,
	              Name := "P_Prompt",
	              Description := "Operator Prompt",
	              Revision := "4.10",
	              RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	              RevisionExtension := ".00 Release",
	              Vendor := "Rockwell Automation",
	              EditedDate := "2019-03-08T17:16:38.033Z",
	              AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis instruction is used to post a prompt (with data, see below)$Nto an operator and accept operator-input data (see below) and$Nconfirmation.$N$NThe configuration data for a set of prompts are stored in a separate$Narray. An array element of prompt configuration data includes:$N$N*  Prompt message displayed to operator (80-character string)$N*  A prompt label (20 characters) for use on prompt list displays$N*  Configuration for FOUR response selections (operator chooses$N   one of the four buttons), each with:$N    - selection label (20 character string)$N    - selection enable$N    - selection default$N*  Configuration for FOUR numeric (REAL) display values, each with:$N    - display value label (20 char)$N    - display value engineering units (8 char)$N    - display value enable$N    - configurable decimal point location$N    - value to display (from configuration or AOI input)$N    - option to scale displayed value$N*  Configuration for FOUR numeric (REAL) operator entries, each with:$N    - numeric entry label (20 char)$N    - numeric entry engineering units (8 char)$N    - entry low and high limits (REAL)$N    - configurable decimal point location$N    - option for entry required or not$N    - if entry not required, option to use minimum or maximum$N       value as entry default$N    - option to require operator verify entered value$N*  Configuration for FOUR string response operator entries, each with:$N    - response label (20 char)$N    - response enable$N    - option for response entry (non-empty string) required$N$NThe prompt response includes the numeric entries, the operator$Nselection (choice among up to four), and the operator response$Nstring entries.  The number entries are also available as 16-$Ncharacter text strings for use in building text for reports, etc.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* No logic changes; corrected parameter / local tag usage or external access.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-03)$NSee 4.00 Release Notes for details.$N*  Changed Inf_ items to HMI_, and added Cfg_Area for security.$N*  Aligned ready bit naming with command bit names.$N*  Added configurable decimal places for 4 entries and 4 display values$N    to $QPrompts$Q configuration InOut parameter UDT.$N* Operator and Maintenance Commands and Settings are now Local Tags.$N",
	              EncryptionConfig := 9) 
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_Req : BOOL (Description := "Input to Enable an Operator Prompt",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			Inp_Ref : DINT (Description := "Number of Manual Prompt Configuration in the Array to Use",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			Inp_ScalePct : REAL (Description := "Percent By Which to Scale Configured Numeric Display Values",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+002);
			Inp_Real_0 OF Inp_Real[0] (Description := "Programmatic Real Value to Display (0)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No);
			Inp_Real_1 OF Inp_Real[1] (Description := "Programmatic Real Value to Display (1)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No);
			Inp_Real_2 OF Inp_Real[2] (Description := "Programmatic Real Value to Display (2)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No);
			Inp_Real_3 OF Inp_Real[3] (Description := "Programmatic Real Value to Display (3)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Out_Cfm : BOOL (Description := "Operator Confirmation Output",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Out_Rdy : BOOL (Description := "1=Prompt is Ready to be Displayed",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Out_Select OF OSet_Select (Description := "Value of Operator Response to Selector",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read/Write);
			Out_Real_0 OF Out_Real[0] (Description := "Real Numeric Value of Operator Entry (0)",
			                      Usage := Output,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Out_Real_1 OF Out_Real[1] (Description := "Real Numeric Value of Operator Entry (1)",
			                      Usage := Output,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Out_Real_2 OF Out_Real[2] (Description := "Real Numeric Value of Operator Entry (2)",
			                      Usage := Output,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Out_Real_3 OF Out_Real[3] (Description := "Real Numeric Value of Operator Entry (3)",
			                      Usage := Output,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Val_Ref : DINT (Description := "Number of Manual Prompt Configuration in the Array Used",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Sts_Alert : BOOL (Description := "Status for Alert Breadcrumb",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_RdyCfm : BOOL (Description := "1=The Prompt is ready to be confirmed (completed)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_RefChg : BOOL (Description := "1=The Inp_Ref Has Changed (Single Scan)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config, see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_PromptCfgSize : BOOL (Description := "1=Error in size of an array in the P_PromptCfg UDT definition",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			Err_RespDataSize : BOOL (Description := "1=Error in size of an array in the P_PromptResp UDT definition",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Err_MsgRef : BOOL (Description := "1=Error in Value of Inp_Ref (past end of prompt array)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Prompts : P_PromptCfg[1] (Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			RespData : P_PromptResp (Description := "Structure to Hold Most Recent Response Data in Character Format",
			                    Usage := InOut,
			                    Required := Yes,
			                    Visible := Yes);
		END_PARAMETERS

			
	END_ENCODED_DATA
	ADD_ON_INSTRUCTION_DEFINITION CM_Cal (Description := "Calibration Control Module$N",
	                                      Revision := "0.2",
	                                      RevisionNote := "updated per testing",
	                                      Vendor := "AES, Inc.",
	                                      ExecutePrescan := No,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := No,
	                                      CreatedDate := "2020-03-06T04:35:51.464Z",
	                                      CreatedBy := "VMW\ahalford",
	                                      EditedDate := "2021-02-19T20:14:26.248Z",
	                                      EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                      SoftwareRevision := "v32.03")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_CmdAcqired : BOOL (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          DefaultData := 0);
			Inp_PumpAtSpeed : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			Inp_PumpRunning : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			Out_CmdAcq : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Out_CmdPumpDirection : BOOL (Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := None,
			                                DefaultData := 0);
			Out_CmdStart : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Out_CmdStop : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Out_EUMax : REAL (Description := "Calculated max EU (mL)",
			                     Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0.00000000e+000);
			Out_PumpSpeed : DINT (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			Sts_CalRunning : BOOL (Description := "Calibration Sequence is Active",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Sts_CalComplete : BOOL (Description := "Calibration Sequence is Complete",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Sts_CalHeld : BOOL (Description := "Calibration Sequence is Held",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Sts_CalStopped : BOOL (Description := "Calibration Seqence is Stopped",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Sts_CalAborted : BOOL (Description := "Calibration Sequence is Aborted",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			P_Seq : P_Seq (Usage := InOut,
			                 Required := Yes,
			                 Visible := Yes);
			P_Seq_Steps : P_SeqStep[10] (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			P_Seq_Prompt : P_Prompt (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			P_Seq_Prompts : P_PromptCfg[10] (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			P_Seq_Prompt_Response : P_PromptResp (Usage := InOut,
			                                 Required := Yes,
			                                 Visible := Yes);
			OwnerID : DINT (Description := "Calibration Codule Owner ID",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			MUL_01 : FBD_MATH (ExternalAccess := None,
			                 DefaultData := "[1,0.00000000e+000,6.00000000e+004,0.00000000e+000]");
			DIV_01 : FBD_MATH (ExternalAccess := None,
			                 DefaultData := "[1,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			CalculateVolume : FBD_MATH (Description := "Calculate Volume in mL",
			                          ExternalAccess := None,
			                          DefaultData := "[1,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			SEL_01 : SELECT (ExternalAccess := None,
			                 DefaultData := "[1,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,5.60519386e-045]");
			Cal_CollectionType : SINT (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			ConvertMass : FBD_MATH (Description := "Convert Mass from g to mg",
			                      ExternalAccess := None,
			                      DefaultData := "[1,0.00000000e+000,1.00000000e+003,0.00000000e+000]");
			Cal_CollectionTypeMass : BOOL (RADIX := Decimal,
			                                 ExternalAccess := None,
			                                 DefaultData := 0);
			SETD_01 : DOMINANT_SET (ExternalAccess := None,
			                  DefaultData := "[1,0,5.60519386e-045]");
			MUL_02 : FBD_MATH (ExternalAccess := None,
			                 DefaultData := "[1,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			DIV_02 : FBD_MATH (ExternalAccess := None,
			                 DefaultData := "[1,1.00000000e+002,1.00000000e+002,0.00000000e+000]");
		END_LOCAL_TAGS

		FBD_ROUTINE Logic (SheetSize := "Tabloid - 11 x 17 in",
		                   SheetOrientation := Landscape)
			SHEET  (Name := "")
				IREF  (ID := 0,
				       X := 880,
				       Y := 100,
				       Operand := "Cal_CollectionType.0",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 1,
				       X := 880,
				       Y := 120,
				       Operand := "Cal_CollectionType.1",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 2,
				       X := 260,
				       Y := 620,
				       Operand := "Cal_CollectionTypeMass",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 3,
				       X := 120,
				       Y := 120,
				       Operand := "Inp_CmdAcqired",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 4,
				       X := 120,
				       Y := 140,
				       Operand := "Inp_PumpAtSpeed",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 5,
				       X := 120,
				       Y := 160,
				       Operand := "Inp_PumpRunning",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 6,
				       X := 800,
				       Y := 300,
				       Operand := "Out_EUMax",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 7,
				       X := 700,
				       Y := 1040,
				       Operand := "Out_PumpSpeed",
				       HideDescription := No)
				END_IREF

				OREF  (ID := 8,
				       X := 1190,
				       Y := 300,
				       Operand := "Cal_CollectionType",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 9,
				       X := 1100,
				       Y := 100,
				       Operand := "Cal_CollectionTypeMass",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 10,
				       X := 530,
				       Y := 120,
				       Operand := "Out_CmdAcq",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 11,
				       X := 540,
				       Y := 160,
				       Operand := "Out_CmdPumpDirection",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 12,
				       X := 530,
				       Y := 140,
				       Operand := "Out_CmdStart",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 13,
				       X := 530,
				       Y := 180,
				       Operand := "Out_CmdStop",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 14,
				       X := 1220,
				       Y := 880,
				       Operand := "Out_EUMax",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 15,
				       X := 1190,
				       Y := 360,
				       Operand := "Out_PumpSpeed",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 16,
				       X := 1150,
				       Y := 540,
				       Operand := "P_Seq_Steps[4].Cfg_MinT",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 17,
				       X := 540,
				       Y := 400,
				       Operand := "Sts_CalAborted",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 18,
				       X := 530,
				       Y := 360,
				       Operand := "Sts_CalComplete",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 19,
				       X := 540,
				       Y := 340,
				       Operand := "Sts_CalHeld",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 20,
				       X := 530,
				       Y := 320,
				       Operand := "Sts_CalRunning",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 21,
				       X := 540,
				       Y := 380,
				       Operand := "Sts_CalStopped",
				       HideDescription := No)
				END_OREF

				ICON  (ID := 22,
				       X := 260,
				       Y := 880,
				       Name := "Cal_CalculatedVol")
				END_ICON

				ICON  (ID := 23,
				       X := 260,
				       Y := 740,
				       Name := "Cal_CollectedQuantity")
				END_ICON

				ICON  (ID := 24,
				       X := 260,
				       Y := 860,
				       Name := "Cal_CollectedQuantity")
				END_ICON

				ICON  (ID := 25,
				       X := 700,
				       Y := 740,
				       Name := "Cal_Density")
				END_ICON

				ICON  (ID := 26,
				       X := 700,
				       Y := 900,
				       Name := "Cal_Duration")
				END_ICON

				ICON  (ID := 27,
				       X := 880,
				       Y := 540,
				       Name := "Cal_Duration")
				END_ICON

				ICON  (ID := 28,
				       X := 260,
				       Y := 900,
				       Name := "CollectionTypeMass")
				END_ICON

				ICON  (ID := 29,
				       X := 120,
				       Y := 280,
				       Name := "PromptCfm")
				END_ICON

				ICON  (ID := 30,
				       X := 120,
				       Y := 300,
				       Name := "PromptRdy")
				END_ICON

				ICON  (ID := 31,
				       X := 800,
				       Y := 280,
				       Name := "PromptRef")
				END_ICON

				ICON  (ID := 32,
				       X := 800,
				       Y := 260,
				       Name := "PromptReq")
				END_ICON

				OCON  (ID := 33,
				       X := 930,
				       Y := 700,
				       Name := "Cal_CalculatedVol")
				END_OCON

				OCON  (ID := 34,
				       X := 1190,
				       Y := 380,
				       Name := "Cal_CollectedQuantity")
				END_OCON

				OCON  (ID := 35,
				       X := 1200,
				       Y := 320,
				       Name := "Cal_Density")
				END_OCON

				OCON  (ID := 36,
				       X := 1190,
				       Y := 340,
				       Name := "Cal_Duration")
				END_OCON

				OCON  (ID := 37,
				       X := 420,
				       Y := 580,
				       Name := "CollectionTypeMass")
				END_OCON

				OCON  (ID := 38,
				       X := 1180,
				       Y := 260,
				       Name := "PromptCfm")
				END_OCON

				OCON  (ID := 39,
				       X := 1180,
				       Y := 280,
				       Name := "PromptRdy")
				END_OCON

				OCON  (ID := 40,
				       X := 530,
				       Y := 260,
				       Name := "PromptRef")
				END_OCON

				OCON  (ID := 41,
				       X := 520,
				       Y := 240,
				       Name := "PromptReq")
				END_OCON

				DIV_BLOCK  (ID := 42,
				            X := 780,
				            Y := 640,
				            Operand := "CalculateVolume",
				            VisiblePins := "EnableIn, SourceA, SourceB, Dest",
				            HideDescription := No)
				END_DIV_BLOCK

				DIV_BLOCK  (ID := 43,
				            X := 440,
				            Y := 660,
				            Operand := "ConvertMass",
				            VisiblePins := "EnableIn, SourceA, Dest",
				            HideDescription := No)
				END_DIV_BLOCK

				DIV_BLOCK  (ID := 44,
				            X := 780,
				            Y := 800,
				            Operand := "DIV_01",
				            VisiblePins := "EnableIn, SourceA, SourceB, EnableOut, Dest",
				            HideDescription := No)
				END_DIV_BLOCK

				DIV_BLOCK  (ID := 45,
				            X := 780,
				            Y := 960,
				            Operand := "DIV_02",
				            VisiblePins := "SourceA, SourceB, Dest",
				            HideDescription := No)
				END_DIV_BLOCK

				MUL_BLOCK  (ID := 46,
				            X := 960,
				            Y := 480,
				            Operand := "MUL_01",
				            VisiblePins := "SourceA, Dest",
				            HideDescription := No)
				END_MUL_BLOCK

				MUL_BLOCK  (ID := 47,
				            X := 1020,
				            Y := 820,
				            Operand := "MUL_02",
				            VisiblePins := "SourceA, SourceB, Dest",
				            HideDescription := No)
				END_MUL_BLOCK

				SEL_BLOCK  (ID := 48,
				            X := 440,
				            Y := 800,
				            Operand := "SEL_01",
				            VisiblePins := "In1, In2, SelectorIn, Out",
				            HideDescription := No)
				END_SEL_BLOCK

				SETD_BLOCK  (ID := 49,
				             X := 960,
				             Y := 40,
				             Operand := "SETD_01",
				             VisiblePins := "Set, Reset, Out, OutNot",
				             HideDescription := No)
				END_SETD_BLOCK

				ADD_ON_INSTRUCTION P_Prompt (ID := 50,
				                             X := 900,
				                             Y := 200,
				                             Operand := "P_Seq_Prompt",
				                             VisiblePins := "Inp_Req, Inp_Ref, Inp_Real_0, Out_Cfm, Out_Rdy, Out_Select, Out_Real_0, Out_Real_1, Out_Real_2, Out_Real_3, Prompts, RespData",
				                             HideDescription := "No")
					FBD_PARAMETERS  (Prompts := P_Seq_Prompts,
					                 RespData := P_Seq_Prompt_Response)
					END_FBD_PARAMETERS

				END_ADD_ON_INSTRUCTION

				ADD_ON_INSTRUCTION P_Seq (ID := 51,
				                          X := 220,
				                          Y := 60,
				                          Operand := "P_Seq",
				                          VisiblePins := "Inp_00, Inp_01, Inp_02, Inp_03, Inp_PermOK, Inp_NBPermOK, Inp_IntlkOK, Inp_NBIntlkOK, Inp_PromptCfm, Inp_PromptRdy, Out_00, Out_01, Out_02, Out_03, Out_04, Out_Real_00, Out_PromptReq, Out_PromptRef, Val_CurrStepNumAbs, Sts_SeqIdle, Sts_SeqRunning, Sts_SeqHeld, Sts_SeqComplete, Sts_SeqStopped, Sts_SeqAborted, Sts_SeqExecuting, Ref_Steps",
				                          HideDescription := "No")
					FBD_PARAMETERS  (Ref_Steps := P_Seq_Steps)
					END_FBD_PARAMETERS

				END_ADD_ON_INSTRUCTION

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 49,
				       ToParameter := "Set")
				END_WIRE

				WIRE  (FromElementID := 1,
				       FromParameter := "",
				       ToElementID := 49,
				       ToParameter := "Reset")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 37,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 42,
				       ToParameter := "EnableIn")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 43,
				       ToParameter := "EnableIn")
				END_WIRE

				WIRE  (FromElementID := 3,
				       FromParameter := "",
				       ToElementID := 51,
				       ToParameter := "Inp_00")
				END_WIRE

				WIRE  (FromElementID := 4,
				       FromParameter := "",
				       ToElementID := 51,
				       ToParameter := "Inp_01")
				END_WIRE

				WIRE  (FromElementID := 5,
				       FromParameter := "",
				       ToElementID := 51,
				       ToParameter := "Inp_02")
				END_WIRE

				WIRE  (FromElementID := 6,
				       FromParameter := "",
				       ToElementID := 50,
				       ToParameter := "Inp_Real_0")
				END_WIRE

				WIRE  (FromElementID := 7,
				       FromParameter := "",
				       ToElementID := 45,
				       ToParameter := "SourceB")
				END_WIRE

				WIRE  (FromElementID := 22,
				       FromParameter := "",
				       ToElementID := 48,
				       ToParameter := "In2")
				END_WIRE

				WIRE  (FromElementID := 23,
				       FromParameter := "",
				       ToElementID := 43,
				       ToParameter := "SourceA")
				END_WIRE

				WIRE  (FromElementID := 24,
				       FromParameter := "",
				       ToElementID := 48,
				       ToParameter := "In1")
				END_WIRE

				WIRE  (FromElementID := 25,
				       FromParameter := "",
				       ToElementID := 42,
				       ToParameter := "SourceB")
				END_WIRE

				WIRE  (FromElementID := 26,
				       FromParameter := "",
				       ToElementID := 44,
				       ToParameter := "SourceB")
				END_WIRE

				WIRE  (FromElementID := 27,
				       FromParameter := "",
				       ToElementID := 46,
				       ToParameter := "SourceA")
				END_WIRE

				WIRE  (FromElementID := 28,
				       FromParameter := "",
				       ToElementID := 48,
				       ToParameter := "SelectorIn")
				END_WIRE

				WIRE  (FromElementID := 31,
				       FromParameter := "",
				       ToElementID := 50,
				       ToParameter := "Inp_Ref")
				END_WIRE

				WIRE  (FromElementID := 32,
				       FromParameter := "",
				       ToElementID := 50,
				       ToParameter := "Inp_Req")
				END_WIRE

				WIRE  (FromElementID := 42,
				       FromParameter := "Dest",
				       ToElementID := 33,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 43,
				       FromParameter := "Dest",
				       ToElementID := 42,
				       ToParameter := "SourceA")
				END_WIRE

				WIRE  (FromElementID := 44,
				       FromParameter := "Dest",
				       ToElementID := 47,
				       ToParameter := "SourceA")
				END_WIRE

				WIRE  (FromElementID := 45,
				       FromParameter := "Dest",
				       ToElementID := 47,
				       ToParameter := "SourceB")
				END_WIRE

				WIRE  (FromElementID := 46,
				       FromParameter := "Dest",
				       ToElementID := 16,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 47,
				       FromParameter := "Dest",
				       ToElementID := 14,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 48,
				       FromParameter := "Out",
				       ToElementID := 44,
				       ToParameter := "SourceA")
				END_WIRE

				WIRE  (FromElementID := 49,
				       FromParameter := "Out",
				       ToElementID := 9,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 50,
				       FromParameter := "Out_Select",
				       ToElementID := 8,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 50,
				       FromParameter := "Out_Real_2",
				       ToElementID := 15,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 50,
				       FromParameter := "Out_Real_3",
				       ToElementID := 34,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 50,
				       FromParameter := "Out_Real_0",
				       ToElementID := 35,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 50,
				       FromParameter := "Out_Real_1",
				       ToElementID := 36,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 50,
				       FromParameter := "Out_Cfm",
				       ToElementID := 38,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 50,
				       FromParameter := "Out_Rdy",
				       ToElementID := 39,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Out_00",
				       ToElementID := 10,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Out_02",
				       ToElementID := 11,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Out_01",
				       ToElementID := 12,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Out_03",
				       ToElementID := 13,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Sts_SeqAborted",
				       ToElementID := 17,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Sts_SeqComplete",
				       ToElementID := 18,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Sts_SeqHeld",
				       ToElementID := 19,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Sts_SeqRunning",
				       ToElementID := 20,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Sts_SeqStopped",
				       ToElementID := 21,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Out_PromptRef",
				       ToElementID := 40,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 51,
				       FromParameter := "Out_PromptReq",
				       ToElementID := 41,
				       ToParameter := "")
				END_WIRE

				FEEDBACK_WIRE  (FromElementID := 29,
				                FromParameter := "",
				                ToElementID := 51,
				                ToParameter := "Inp_PromptCfm")
				END_FEEDBACK_WIRE

				FEEDBACK_WIRE  (FromElementID := 30,
				                FromParameter := "",
				                ToElementID := 51,
				                ToParameter := "Inp_PromptRdy")
				END_FEEDBACK_WIRE

				TEXT_BOX  (ID := 52,
				           X := 20,
				           Y := 600,
				           Width := 0,
				           Text := "Collection $R$NType:$Nbit 0 = mass$Nbit 1 = volume")
				END_TEXT_BOX

				TEXT_BOX  (ID := 53,
				           X := 1280,
				           Y := 20,
				           Width := 0,
				           Text := "Calibration Sequencer and Operator Prompts$N=============================$Ncm_cal :  Control Module - Calibration$N============================================================$NRevision: 0.00 $NRelease: ( Insert official test date )$N============================================================$NThis Instruction encapsulates the pump calibration sequence, mapping the$Ncorresponding setpoints and signals to the associated tags.$NPlantPAx Objects Used:$N* P_Seq$N* P_Prompt$N============================================================")
				END_TEXT_BOX

			END_SHEET

		END_FBD_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_ValveC (Revision := "4.10",
	                                        RevisionExtension := ".01 Release",
	                                        RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                        Vendor := "Rockwell Automation",
	                                        ExecutePrescan := Yes,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := Yes,
	                                        CreatedDate := "2008-03-27T19:50:50.098Z",
	                                        CreatedBy := "Not Available",
	                                        EditedDate := "2023-03-15T17:10:09.883Z",
	                                        EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                        SoftwareRevision := "v32.03",
	                                        AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction controls an Analog or Pulse Output Valve with$Nanalog or simulated position feedback and provides:$N$N*  Program and Operator entry of target position in Percent Open$N*  Ramping of position to target at specified Rate of Change (%/sec)$N*  Scaling of Position Feedback input from Raw (I/O card) Units to percent$N*  Monitoring of Interlock conditions which cause output to shed$N*  Configurable shed to HOLD or to configured position$N*  Monitoring of I/O communication faults$N*  Alarms for Interlock Trip, Actuator Fault, I/O Fault$N*  Operation in Hand, Maintenance, Override, Program and Operator Modes$N*  $QAvailable$Q status for use by automation logic to know whether valve$N      can be controlled by other objects.$N$NCommand Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$NAlarms are provided by P_Alarm Add-On Instruction instances.$NCommand Sources: Operator, Program, External, Override, Maintenance, Out of Service, Hand$N$NConfiguration notes:$N   If Max ON Time is less than 0 or greater than the Cycle Time$N        it is set to the Cycle Time.$N   If Min ON Time is less than 0 or greater than the Max ON Time$N        it is set to zero.$N   If Deadtime is less than 0 or greater than the Cycle Time,$N        it is set to zero.$N   Bump Time must be within the Min ON Time and Max ON Time.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$NSee 4.10 Release Notes for details.$N* No changes, uprevved because P_CmdSrc 4.10.01 is used.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Added option to clamp to a full/empty range when we have limit switches.$N* Changed availability to use input availability from interlocks.$N* Updated to P_CmdSrc V4.10.00.$N* Corrected parameter External Access.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-11)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added notify and unack count rollup for associated object(s).$N* Changed $QMode$Q to $QCommand Source$Q using P_CmdSrc 4.00.00.$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* Aligned ready bit naming with command bit names.$N* Added unacked alarm count.$N* Added  configurable decimal places for display on HMI.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N* Added option for no position feedback (simulated with hysteresis).$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_PosFdbk : REAL (Description := "Position Feedback from Valve (in Raw Input units)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0.00000000e+000);
			Inp_OpenLS : BOOL (Description := "Valve Open Limit Switch 1=confirmed fully open",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			Inp_ClosedLS : BOOL (Description := "Valve Closed Limit Switch 1=confirmed fully closed",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0);
			Inp_ActuatorFault : BOOL (Description := "Valve Actuator Fault (overload, etc.), 0=OK, 1=Fault)",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             DefaultData := 0);
			Inp_IntlkOK : BOOL (Description := "1=Interlocks OK, Pulse Output Valve can be moved",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 1);
			Inp_NBIntlkOK : BOOL (Description := "1=Non-Bypassable Interlocks OK, Pulse Output Valve can be moved",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_IntlkAvail : BOOL (Description := "1 = Interlock Availibility OK",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Inp_IOFault : BOOL (Description := "Input / Output Communication Status 0=OK, 1=fail",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Sim : BOOL (Description := "1=I/O are being simulated, set output CV to 0.0, ignore I/O Fault",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Inp_Hand OF CmdSrc.Inp_Hand (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_Ovrd OF CmdSrc.Inp_Ovrd (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_OvrdCV : REAL (Description := "CV target in Override Mode$N(CV EU)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0.00000000e+000);
			Inp_ExtInh OF CmdSrc.Inp_ExtInh (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Reset : BOOL (Description := "1=Reset shed latches and cleared alarms",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_ShedHold : BOOL (Description := "1=Hold Output on Interlock or bad PV, 0=Go to Cfg_IntlkCV",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_ShedOnIOFault : BOOL (Description := "1=Take shed action (hold or interlock CV) on I/O Fault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1);
			Cfg_SkipRoCLim : BOOL (Description := "1=Skip RoC Limiting in Intlk, Maint, Ovrd modes",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_SetTrack : BOOL (Description := "1=PSets track OSets in Oper, OSets track PSets in Prog, 0=no tracking",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1);
			Cfg_SetTrackOvrdHand : BOOL (Description := "1=Prog/Oper Settings track Override/Hand CV",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0);
			Cfg_HasPosFdbk : BOOL (Description := "1=Valve provides an analog position feedback, 0=simulate feedback",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 1);
			Cfg_HasOpenLS : BOOL (Description := "1=Valve provides an Open Limit Switch signal",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_HasClosedLS : BOOL (Description := "1=Valve provides a Closed Limit Switch signal",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_UseOpenLS : BOOL (Description := "1=Valve Open LS should be used for open/closed status",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_UseClosedLS : BOOL (Description := "1=Valve Closed LS should be used for open/closed status",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_LSFail : BOOL (Description := "1=both switches ON=fail, 0=both switches OFF=fail",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 1);
			Cfg_ClampPosToLS : BOOL (Description := "1=Clamps Val_Pos to EUMin/Max when on a Limit Switch",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_HasIntlkObj : BOOL (Description := "1=Tells HMI a P_Intlk is connected to Inp_Intlk",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasCVNav : BOOL (Description := "1=Tells HMI to enable navigation to a connected CV object",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_OvrdIntlk : BOOL (Description := "1=Override ignores Bypassable Intlk; 0=always use Intlk",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_DecPlcs : DINT (Description := "Number of decimal places for CV display (0..6)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Cfg_HasIntlkTripAlm OF IntlkTrip.Cfg_Exists (Description := "1=Interlock Trip Alarm exists and will be checked",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_HasActuatorFaultAlm OF ActuatorFault.Cfg_Exists (Description := "1=Actuator Fault Alarm exists and will be checked",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			Cfg_HasIOFaultAlm OF IOFault.Cfg_Exists (Description := "1=I/O Fault Alarm exists and will be checked",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_IntlkTripResetReqd OF IntlkTrip.Cfg_ResetReqd (Description := "1=Reset required to clear Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_ActuatorFaultResetReqd OF ActuatorFault.Cfg_ResetReqd (Description := "1=Reset required to clear Actuator Fault Alarm",
			                                      Usage := Input,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No);
			Cfg_IOFaultResetReqd OF IOFault.Cfg_ResetReqd (Description := "1=Reset required to clear I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_IntlkTripAckReqd OF IntlkTrip.Cfg_AckReqd (Description := "1=Acknowledge required for Interlock Trip Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_ActuatorFaultAckReqd OF ActuatorFault.Cfg_AckReqd (Description := "1=Acknowledge required for Actuator Fault Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			Cfg_IOFaultAckReqd OF IOFault.Cfg_AckReqd (Description := "1=Acknowledge required for I/O Fault Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_IntlkTripSeverity OF IntlkTrip.Cfg_Severity (Description := "Interlock Trip Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_ActuatorFaultSeverity OF ActuatorFault.Cfg_Severity (Description := "Actuator Fault Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                     Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			Cfg_IOFaultSeverity OF IOFault.Cfg_Severity (Description := "I/O Fault Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_MinCV : REAL (Description := "Minimum CV (in CV EU, for limiting)",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0.00000000e+000);
			Cfg_MaxCV : REAL (Description := "Maximum CV (in CV EU, for limiting)",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 1.00000000e+002);
			Cfg_CVRoCLimInc : REAL (Description := "CV Rate of Change Limit, Increasing, (EU/sec, 0=unlimited)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0.00000000e+000);
			Cfg_CVRoCLimDec : REAL (Description := "CV Rate of Change Limit, Decreasing, (EU/sec, 0=unlimited)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0.00000000e+000);
			Cfg_IntlkCV : REAL (Description := "CV (target in EU) when interlocked (if not Cfg_ShedHold)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			Cfg_CVEUMin : REAL (Description := "CV Minimum in Engineering Units (for scaling)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			Cfg_CVEUMax : REAL (Description := "CV Maximum in Engineering Units (for scaling)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1.00000000e+002);
			Cfg_CVRawMin : REAL (Description := "CV Minimum in I/O (raw) Units (for scaling)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			Cfg_CVRawMax : REAL (Description := "CV Maximum in I/O (raw) Units (for scaling)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+002);
			Cfg_FdbkRawMin : REAL (Description := "Position Feedback Minimum in raw input units (for scaling)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0.00000000e+000);
			Cfg_FdbkRawMax : REAL (Description := "Position Feedback Maximum in raw input units (for scaling)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 1.00000000e+002);
			Cfg_CycleT : REAL (Description := "Open and Close Pulse Output overall period (s)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 1.00000000e+001);
			Cfg_OpenRate : REAL (Description := "Rate at which valve moves when opening (CV EU/sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+000);
			Cfg_CloseRate : REAL (Description := "Rate at which valve moves when closing (CV EU/sec)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 1.00000000e+000);
			Cfg_MaxOnT : REAL (Description := "Open and Close Pulse Output maximum ON time (s)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 5.00000000e+000);
			Cfg_MinOnT : REAL (Description := "Open and Close Pulse Output minimum ON time (s)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 1.00000000e+000);
			Cfg_BumpT : REAL (Description := "Time to bump valve open or closed (by Oper) when Fdbk Bad (sec)",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0.00000000e+000);
			Cfg_Deadtime : REAL (Description := "Additional time on first pulse after stop or direction change",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			Cfg_MaxClosedPos : REAL (Description := "Position above which valve is assumed open if limit switches not used",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0.00000000e+000);
			PSet_CV : REAL (Description := "Program Setting of Controlled Variable (output) (CV EU)",
			                   Usage := Input,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0.00000000e+000);
			PSet_Owner : DINT (Description := "Program Owner Request ID (non-zero) or Release (zero)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			XSet_CV : REAL (Description := "External Setting of Controlled Variable (output) (CV EU)",
			                   Usage := Input,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0.00000000e+000);
			PCmd_Prog OF CmdSrc.PCmd_Prog (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Oper OF CmdSrc.PCmd_Oper (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Lock OF CmdSrc.PCmd_Lock (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Unlock OF CmdSrc.PCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Normal OF CmdSrc.PCmd_Normal (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Reset : BOOL (Description := "Program Command to reset shed latches and cleared alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_IntlkTripAck OF IntlkTrip.PCmd_Ack (Description := "Program Command to Acknowledge Interlock Trip Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_IntlkTripSuppress OF IntlkTrip.PCmd_Suppress (Description := "Program Command to Suppress Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IntlkTripUnsuppress OF IntlkTrip.PCmd_Unsuppress (Description := "Program Command to Unsuppress Interlock Trip Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_IntlkTripUnshelve OF IntlkTrip.PCmd_Unshelve (Description := "Program Command to Unshelve Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_ActuatorFaultAck OF ActuatorFault.PCmd_Ack (Description := "Program Command to Acknowledge Actuator Fault Alarm",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			PCmd_ActuatorFaultSuppress OF ActuatorFault.PCmd_Suppress (Description := "Program Command to Suppress Actuator Fault Alarm",
			                                      Usage := Input,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No);
			PCmd_ActuatorFaultUnsuppress OF ActuatorFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress Actuator Fault Alarm",
			                                        Usage := Input,
			                                        RADIX := Decimal,
			                                        Required := No,
			                                        Visible := No);
			PCmd_ActuatorFaultUnshelve OF ActuatorFault.PCmd_Unshelve (Description := "Program Command to Unshelve Actuator Fault Alarm",
			                                      Usage := Input,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No);
			PCmd_IOFaultAck OF IOFault.PCmd_Ack (Description := "Program Command to Acknowledge I/O Fault Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_IOFaultSuppress OF IOFault.PCmd_Suppress (Description := "Program Command to Suppress I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_IOFaultUnsuppress OF IOFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress I/O Fault Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultUnshelve OF IOFault.PCmd_Unshelve (Description := "Program Command to Unshelve I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			MCmd_Rel OF CmdSrc.MCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			OCmd_Unlock OF CmdSrc.OCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			XCmd_Acq OF CmdSrc.XCmd_Acq (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Rel OF CmdSrc.XCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Reset : BOOL (Description := "External Command to reset shed latches and cleared alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Out_CV : REAL (Description := "CV Output in Raw (I/O Card) Units",
			                  Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0.00000000e+000);
			Out_Open : BOOL (Description := "Pulse Output to drive valve Open",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Out_Close : BOOL (Description := "Pulse Output to drive valve closed",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_Pos : REAL (Description := "Valve actual position from feedback (CV EU)",
			                   Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0.00000000e+000);
			Val_CVSet : REAL (Description := "Value of selected CV Setting (before rate limiting, CV EU)",
			                     Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0.00000000e+000);
			Val_CVOut : REAL (Description := "Value of CV output (after clamping and ramping) (CV EU)",
			                     Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0.00000000e+000);
			Val_CVEUMin : REAL (Description := "Minimum of scaled range = MIN (Cfg_CVEUMin, Cfg_CVEUMax)",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0.00000000e+000);
			Val_CVEUMax : REAL (Description := "Maximum of scaled range = MAX (Cfg_CVEUMin, Cfg_CVEUMax)",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 1.00000000e+002);
			SrcQ_IO : DINT (Description := "Source and Quality of primary I/O (enumeration)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			SrcQ : DINT (Description := "Source and Quality of primary Val/Sts (enumeration)",
			                Usage := Output,
			                RADIX := Decimal,
			                Required := No,
			                Visible := No,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
			Val_Fdbk : DINT (Description := "Device Feedback 0=Moving, 1=Closed, 2=Opened, 3=Limit Switch Failure",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Val_Sts : DINT (Description := "0=AtTarget, 1=RampClose, 2=RampOpen, 3=Clamp@Min, 4=Clamp@Max, 5=BumpClose, 6=BumpOpen",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fault : DINT (Description := "Device Fault Status 0=none, 32=I/OFault, 34=CfgErr",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : DINT (Description := "Highest Alarm prio and ack status this object + channel (enum)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : DINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_Owner : DINT (Description := "Current Object Owner ID (0=not owned)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_CVInfNaN : BOOL (Description := "1=Selected CV is Infinite or Not A Number (1.$$, 1.#NaN)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_PosInfNaN : BOOL (Description := "1=Inp_PosFdbk is Infinite or Not A Number (1.$$, 1.#NaN)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_BumpOpen : BOOL (Description := "1=Bump Open Requested or Active",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_BumpClose : BOOL (Description := "1=Bump Close Requested or Active",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Ramping : BOOL (Description := "1=CV is ramping to target",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_Clamped : BOOL (Description := "1=CV Set is clamped at CVMin or CVMax",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_SkipRoCLim : BOOL (Description := "1=Rate of Change Limiting was skipped this scan (Maint, Ovrd, Intlk, Hand)",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_Active : BOOL (Description := "1=CV is greater than Cfg_MaxClosedPos, show valve symbol as $Qopened$Q",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Available : BOOL (Description := "1=Pulse Output Valve available for control by automation (Prog)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Bypass : BOOL (Description := "1=Bypassable Interlocks are Bypassed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_BypActive : BOOL (Description := "1=Bypassing Active (Bypassed or Maintenance)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_LSFail : BOOL (Description := "1=Limit Switch Overlap Failure",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_NotRdy : BOOL (Description := "1=Device Not Ready, see detail bits for reason",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_CfgErr : BOOL (Description := "1=Device Not Ready: Configuration Error",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Nrdy_Intlk : BOOL (Description := "1=Device Not Ready: Interlock Not OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_IOFault : BOOL (Description := "1=Device Not Ready: I/O Fault (Shed Requires Reset)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Nrdy_OoS : BOOL (Description := "1=Device Not Ready: Device is Out of Service",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=Device has a Maintenance Bypass function active",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=One or more Alarms Shelved, Disabled or Suppressed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Limit : BOOL (Description := "1=Error in Config: CV Limits swapped",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_EU : BOOL (Description := "1=Error in Config: Scaled CV EU Min = Max",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			Err_Raw : BOOL (Description := "1=Error in Config: Raw Output Scaling Min = Max",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Fdbk : BOOL (Description := "1=Error in Config: Raw Feedback Scaling Min = Max",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: Invalid Timer Preset (use 0 to 2147483)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time, Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Hand OF CmdSrc.Sts_Hand (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OoS OF CmdSrc.Sts_OoS (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Maint OF CmdSrc.Sts_Maint (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only);
			Sts_Ovrd OF CmdSrc.Sts_Ovrd (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_Ext OF CmdSrc.Sts_Ext (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Prog OF CmdSrc.Sts_Prog (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_ProgLocked OF CmdSrc.Sts_ProgLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Oper OF CmdSrc.Sts_Oper (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OperLocked OF CmdSrc.Sts_OperLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Normal OF CmdSrc.Sts_Normal (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_ExtReqInh OF CmdSrc.Sts_ExtReqInh (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_ProgReqInh OF CmdSrc.Sts_ProgReqInh (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_MAcqRcvd OF CmdSrc.Sts_MAcqRcvd (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_IntlkTrip OF IntlkTrip.Inp (Description := "1=Status: CV held or forced by interlock NOT OK (1-shot)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Alm_IntlkTrip OF IntlkTrip.Alm (Description := "1=Alarm: CV held or forced by interlock NOT OK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Ack_IntlkTrip OF IntlkTrip.Ack (Description := "1=Interlock Trip Alarm has been acknowledged",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_IntlkTripDisabled OF IntlkTrip.Disabled (Description := "1=Interlock Trip Alarm has been Disabled by Maintenance",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_IntlkTripShelved OF IntlkTrip.Shelved (Description := "1=Interlock Trip Alarm has been Shelved by Operator",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_IntlkTripSuppressed OF IntlkTrip.Suppressed (Description := "1=Interlock Trip Alarm has been Suppressed by Program",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_ActuatorFault OF ActuatorFault.Inp (Description := "1=Actuator Fault detected (input)",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Alm_ActuatorFault OF ActuatorFault.Alm (Description := "1=Alarm: Actuator Fault Detected",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Ack_ActuatorFault OF ActuatorFault.Ack (Description := "1=Actuator Fault Alarm has been acknowledged",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Sts_ActuatorFaultDisabled OF ActuatorFault.Disabled (Description := "1=Actuator Fault Alarm has been Disabled by Maintenance",
			                                     Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No,
			                                     ExternalAccess := Read/Write);
			Sts_ActuatorFaultShelved OF ActuatorFault.Shelved (Description := "1=Actuator Fault Alarm has been Shelved by Operator",
			                                    Usage := Output,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No,
			                                    ExternalAccess := Read/Write);
			Sts_ActuatorFaultSuppressed OF ActuatorFault.Suppressed (Description := "1=Actuator Fault Alarm has been Suppressed by Program",
			                                       Usage := Output,
			                                       RADIX := Decimal,
			                                       Required := No,
			                                       Visible := No,
			                                       ExternalAccess := Read/Write);
			Sts_IOFault OF IOFault.Inp (Description := "1=I/O Fault Status (0=OK, 1=Bad)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Alm_IOFault OF IOFault.Alm (Description := "1=I/O Fault Alarm",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Ack_IOFault OF IOFault.Ack (Description := "1=I/O Fault Alarm has been acknowledged",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_IOFaultDisabled OF IOFault.Disabled (Description := "1=I/O Fault Alarm has been Disabled by Maintenance",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_IOFaultShelved OF IOFault.Shelved (Description := "1=I/O Fault Alarm has been Shelved by Operator",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_IOFaultSuppressed OF IOFault.Suppressed (Description := "1=I/O Fault Alarm has been Suppressed by Program",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			MRdy_Rel OF CmdSrc.MRdy_Rel (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			ORdy_Unlock OF CmdSrc.ORdy_Unlock (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only);
			P_ValveC : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			CmdSrc : P_CmdSrc (Description := "Control / Command Source Selection",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[7649,0,0,1,0,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']]");
			IOFault : P_Alarm (Description := "I/O Fault Alarm",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			IntlkTrip : P_Alarm (Description := "Interlock Trip Alarm",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[8,'P_ValveC$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[13,'Control Valve$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[13,'Control Valve$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_Notify : DINT (Description := "Buffer for building Val_Notify",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_Bypass : BOOL (Description := "Internal Bypassable Interlocks are Bypassed flag",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Cfg_EU : STRING_8 (Description := "Engineering Units for display on HMI",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[6,'% Open$00$00']");
			Wrk_CV : REAL (Description := "Working copy of Speed Reference (for limiting)",
			                 RADIX := Float,
			                 ExternalAccess := None,
			                 DefaultData := 0.00000000e+000);
			Wrk_CVSet : REAL (Description := "Final selected CV to feed to RoC Limiter",
			                    RADIX := Float,
			                    ExternalAccess := None,
			                    DefaultData := 0.00000000e+000);
			Wrk_CVOut : REAL (Description := "Working value of CV after Rate Limiting",
			                    RADIX := Float,
			                    ExternalAccess := None,
			                    DefaultData := 0.00000000e+000);
			Wrk_IntlkTripONS : BOOL (Description := "Interlock Tripped This Scan",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_ScanTime : REAL (Description := "Seconds since previous scan",
			                       RADIX := Float,
			                       ExternalAccess := None,
			                       DefaultData := 0.00000000e+000);
			Wrk_StepInc : REAL (Description := "Amount to increase CV (to valve pulse logic) this scan for rate limiting",
			                      RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			Wrk_ScanT : TIMER (Description := "Scan Timer (milliseconds, always runs)",
			                    ExternalAccess := None,
			                    DefaultData := "[0,2147483647,0]");
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_Sts : DINT (Description := "Buffer for building Val_Sts",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Fault : DINT (Description := "Buffer for building Val_Fault",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_SrcQ : DINT (Description := "Register for building Source / Quality enumeration",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			ActuatorFault : P_Alarm (Description := "Actuator Fault Alarm (based on Actuator Fault Input)",
			                        ExternalAccess := Read/Write,
			                        DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Actuator Fault$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			Wrk_RealChkDINT : DINT (Description := "REAL tag bit pattern as a DINT to check for Inf / NaN",
			                          RADIX := Hex,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_Close : BOOL (Description := "Internal Close output -- before Sim",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_Open : BOOL (Description := "Internal Open output -- before Sim",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_CycleT : TIMER (Description := "Overall Cycle Timer for pulsed outputs",
			                     ExternalAccess := None,
			                     DefaultData := "[0,2147483647,0]");
			Wrk_OKtoOpen : BOOL (Description := "OK to pulse$NOut_Open",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_OKtoClose : BOOL (Description := "OK to pulse Out_Close",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_OpenTime : REAL (Description := "Time to pulse Out_Open",
			                       RADIX := Float,
			                       ExternalAccess := None,
			                       DefaultData := 0.00000000e+000);
			Wrk_CycleT_ms : DINT (Description := "Cycle Time in milliseconds (preset)",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_OpenTimePrev : DINT (Description := "Wrk_OpenTime from previous cycle",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_CloseTime : REAL (Description := "Time to pulse Out_Close",
			                        RADIX := Float,
			                        ExternalAccess := None,
			                        DefaultData := 0.00000000e+000);
			Wrk_CloseTimePrev : REAL (Description := "Wrk_CloseTime from previous cycle",
			                            RADIX := Float,
			                            ExternalAccess := None,
			                            DefaultData := 0.00000000e+000);
			HMI_Type : STRING_16 (Description := "Must contain AOI name, used for HMI and Information S/W",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[8,'P_ValveC$00$00$00$00$00$00$00$00']");
			Wrk_OpenFdbk : BOOL (Description := "1=LS Feedback shows valve confirmed open",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_ClosedFdbk : BOOL (Description := "1=LS Feedback shows valve confirmed closed",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			Wrk_StepDec : REAL (Description := "Amount to decrease CV (to valve pulse logic) this scan for rate limiting",
			                      RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			Wrk_BumpClose : BOOL (Description := "Operator Bump Close requested",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_BumpOpen : BOOL (Description := "Operator Bump Open requested",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_BumpingOpen : BOOL (Description := "Operator Bump Open actively pulsing Out_Open",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_BumpingClose : BOOL (Description := "Operator Bump Close actively pulsing Out_Close",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_CycleActive : BOOL (Description := "Outputs are cycling; wait for cycle to complete",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			Cfg_CVNavTag : STRING_NavTag (Description := "Tagname for destination of CV Navigation button",
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_ShedIntlkCV : BOOL (Description := "Output CV being held at Interlock value",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_ShedHold : BOOL (Description := "Output CV being held at last good value",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			OSet_CV : REAL (Description := "Operator Setting of Controlled Variable (output) (CV EU)",
			                  RADIX := Float,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			OCmd_ResetAckAll : BOOL (Description := "Oper Cmd to reset shed latches and cleared alarms and acknowledge all alarms",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Oper Cmd to reset shed latches and cleared alarms",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Check : BOOL (Description := "Maintenance Command to Check (not bypass) all Interlocks",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Bypass : BOOL (Description := "Maintenance Command to Bypass all Bypassable Interlocks",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			OCmd_BumpClose : BOOL (Description := "Operator Command to bump valve closed (avail. if Fdbk Bad)",
			                         RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			OCmd_BumpOpen : BOOL (Description := "Operator Command to bump valve open (avail. if Fdbk Bad)",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			ORdy_CV : BOOL (Description := "1=Ready for OSet_CV (enables data entry field)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			ORdy_ResetAckAll : BOOL (Description := "1=Ready for OCmd_ResetAckAll (enables HMI button)",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Check : BOOL (Description := "1=Ready for MCmd_Check (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Bypass : BOOL (Description := "1=Ready for MCmd_Bypass (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			ORdy_BumpClose : BOOL (Description := "1=Ready for OCmd_BumpClose (enables HMI button)",
			                         RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			ORdy_BumpOpen : BOOL (Description := "1=Ready for OCmd_BumpOpen (enables HMI button)",
			                        RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Wrk_UnackAlmC : DINT (Description := "Buffer for building Val_UnackAlmC",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Val_Notify : DINT (Description := "Current Alarm Level and Acknowledgement (enumeration)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Wrk_DeadtimeT : TIMER (Description := "Timer for valve hysteresis (deadtime)",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			Wrk_LastMove : BOOL (Description := "1=Last move was to open, 0=Last move was to close",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_WaitDeadtime : BOOL (Description := "1=Need to wait deadtime before simulated move",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Out of Service is asserted, Output OFF (zero), Alarms inhibited")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    "Handle $QProgrammed Out of Servie$Q Selection using the standard$N"
				    "P_CmdSrc AOI (EnableInFalse";
				N: XIC(EnableIn)P_CmdSrc(CmdSrc);
				RC: "First-Come First-Served Ownership Arbitration still needs to happen, even when device is disabled.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "This rung publishes the Values for the scaled range.$N"
				    "If this instruction is reverse scaled by reversing the scaled (EU) min and max configurations,$N"
				    "the values are swapped so the the EUMax Value is always greater than the EUMin Value.$N"
				    "This makes the HMI bargraph and trend coding easier, and provides values$N"
				    "that can be pinned to the CV EU configuration of a PID, so the AOut and PID ranges are in lockstep.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added configurable decimal places for display on HMI.  #####";
				N: [GEQ(Cfg_CVEUMax,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_CVEUMin) MOV(Cfg_CVEUMax,Val_CVEUMax) ,LES(Cfg_CVEUMax,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_CVEUMax) MOV(Cfg_CVEUMax,Val_CVEUMin) ,LIM(7,Cfg_DecPlcs,-1) MOV(2,Cfg_DecPlcs) ];
				RC: "Restrict the configured Rate of Change Limits to be non-negative.$N"
				    "NOTE:  A $Qzero$Q value of a limit means $Qunlimited$Q (immediate).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: [LES(Cfg_CVRoCLimInc,0.0) CLR(Cfg_CVRoCLimInc) ,LES(Cfg_CVRoCLimDec,0.0) CLR(Cfg_CVRoCLimDec) ];
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Crossed CV Limits or Invalid Rate of Change Limit$N"
				    "Bad Engineering Units Scaling configs (Max = Min)$N"
				    "Bad Raw Scaling configs (Max = Min)$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: [LES(Cfg_MaxCV,Cfg_MinCV) OTE(Err_Limit) ,EQU(Cfg_CVEUMax,Cfg_CVEUMin) OTE(Err_EU) ,EQU(Cfg_CVRawMax,Cfg_CVRawMin) OTE(Err_Raw) ,EQU(Cfg_FdbkRawMax,Cfg_FdbkRawMin) OTE(Err_Fdbk) ];
				RC: "Check for a valid Cycle Time.  If it results in a negative value, clear it and flag it.$N"
				    "$N"
				    "The other times must be set relative to the Cycle Time.  If any is invalid, just make it valid:$N"
				    "* If Max ON Time < 0 or > Cycle Time, set it to Cycle Time.$N"
				    "*  If Min ON Time < 0 or > Max ON Time, set it to zero.$N"
				    "* If Deadtime < 0 or > Cycle Time, set it to zero.";
				N: [MUL(Cfg_CycleT,1000,Wrk_CycleT_ms) LES(Wrk_CycleT_ms,0) CLR(Wrk_CycleT_ms) CLR(Cfg_CycleT) OTE(Err_Timer) ,[LES(Cfg_MaxOnT,0.0) ,GRT(Cfg_MaxOnT,Cfg_CycleT) ] MOV(Cfg_CycleT,Cfg_MaxOnT) ,[LES(Cfg_MinOnT,0.0) ,GRT(Cfg_MinOnT,Cfg_CycleT) ] CLR(Cfg_MinOnT) ,[LES(Cfg_Deadtime,0.0) ,GRT(Cfg_Deadtime,Cfg_MaxOnT) ] CLR(Cfg_Deadtime) ];
				RC: "Clamp other configuration parameters to ensure they are valid.$N"
				    "$N"
				    "* If the Open Rate < 0, set it to zero.$N"
				    "* If the Close Rate < 0, set it to zero.$N"
				    "* Clamp the Closed/Opened status threshold to be within the$N"
				    "scaled range CVEUMin to CVEUMax.";
				N: [LES(Cfg_OpenRate,0.0) CLR(Cfg_OpenRate) ,LES(Cfg_CloseRate,0.0) CLR(Cfg_CloseRate) ,LES(Cfg_MaxClosedPos,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Cfg_MaxClosedPos) ,GRT(Cfg_MaxClosedPos,Cfg_CVEUMax) MOV(Cfg_CVEUMax,Cfg_MaxClosedPos) ];
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Crossed CV Limits or Invalid Rate of Change Limit$N"
				    "Bad Cycle Time configuration$N"
				    "Bad Raw Scaling configs (Max = Min)$N"
				    "Bad Alarm configs$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.";
				N: [XIC(Err_Limit) ,XIC(Err_EU) ,XIC(Err_Raw) ,XIC(Err_Fdbk) ,XIC(Err_Timer) ,[XIC(IntlkTrip.Sts_Err) ,XIC(ActuatorFault.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err)OTE(Nrdy_CfgErr);
				RC: "If this Analog Output is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then show the alarms as $QParent object out of service$Q.$N"
				    "Show the overall acknowledgement status.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed P_Mode to P_CmdSrc, added Out of Service.  #####";
				N: [OTL(IntlkTrip.Inp_OoS) P_Alarm(IntlkTrip) ,OTL(ActuatorFault.Inp_OoS) P_Alarm(ActuatorFault) ,OTL(IOFault.Inp_OoS) P_Alarm(IOFault) ,CLR(Val_Notify) CLR(Val_NotifyAll) ,[XIC(IntlkTrip.Val_Notify.0) ,XIC(ActuatorFault.Val_Notify.0) ,XIC(IOFault.Val_Notify.0) ] OTL(Val_Notify.0) OTL(Val_NotifyAll.0) ,[XIC(IntlkTrip.Sts_AlmInh) ,XIC(ActuatorFault.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ] OTE(Sts_AlmInh) ];
				RC: "If this Control Valve is OFF-SCAN (rung is false or EnableIn is false in FBD), then:$N"
				    "$N"
				    "Clear the pulse outputs.$N"
				    "Clear the Alarms$N"
				    "Show the Valve as $QDisabled$Q, not $QAvailable$Q and $QNot Ready$Q.$N"
				    "Set the target position to the configured ($Qsafe$Q) Interlock CV value.$N"
				    "$N"
				    "Other data are left in Last State!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [OTU(Out_Open) OTU(Out_Close) ,OTL(Sts_NotRdy) OTU(Sts_Available) OTU(Sts_MaintByp) ,OTL(Nrdy_OoS) OTU(Nrdy_Intlk) OTU(Nrdy_IOFault) ,MOV(Cfg_IntlkCV,Wrk_CVSet) MOV(Cfg_IntlkCV,Wrk_CVOut) ];
				RC: "============================================================$N"
				    "FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "Always show the actual position from the Position Feedback input.$N"
				    "If the input is a valid REAL number, conver";
				N: [COP(Inp_PosFdbk,Wrk_RealChkDINT,1) MEQ(Wrk_RealChkDINT,16#7F80_0000,16#7F80_0000) OTE(Sts_PosInfNaN) ,XIC(Sts_PosInfNaN) COP(Inp_PosFdbk,Val_Pos,1) ,XIO(Sts_PosInfNaN) CPT(Val_Pos,(Inp_PosFdbk-Cfg_FdbkRawMin)*(Cfg_CVEUMax-Cfg_CVEUMin)/(Cfg_FdbkRawMax-Cfg_FdbkRawMin)+Cfg_CVEUMin) ];
				RC: "============================================================$N"
				    "DEVICE FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "If the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$N"
				    "use the state of th";
				N: [XIO(Inp_Sim) [XIC(Cfg_UseOpenLS) XIC(Inp_OpenLS) ,XIO(Cfg_UseOpenLS) XIC(Cfg_UseClosedLS) XIO(Inp_ClosedLS) ] ,[XIC(Inp_Sim) ,XIO(Cfg_UseOpenLS) XIO(Cfg_UseClosedLS) ] GRT(Val_Pos,Cfg_MaxClosedPos) ]OTE(Wrk_OpenFdbk);
				RC: "If the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$N"
				    "use the state of the limit switch feedback inputs as the Valve position.$N"
				    "$N"
				    "If the Valve is being simulated or has no limit switch feedback, use the Sim Timers to provide$N"
				    "$Qfake$Q feedback signals based on the simulation time to Open and time to Close.";
				N: [XIO(Inp_Sim) [XIC(Cfg_UseClosedLS) XIC(Inp_ClosedLS) ,XIO(Cfg_UseClosedLS) XIC(Cfg_UseOpenLS) XIO(Inp_OpenLS) ] ,[XIC(Inp_Sim) ,XIO(Cfg_UseClosedLS) XIO(Cfg_UseOpenLS) ] LEQ(Val_Pos,Cfg_MaxClosedPos) ]OTE(Wrk_ClosedFdbk);
				RC: "============================================================$N"
				    "VALVE FEEDBACK STATUS$N"
				    "============================================================$N"
				    "This rung generates the Valve Feedback Status bits and Enumeration Value:$N"
				    "Limit Switch Fail, if the Limit S";
				N: [[XIC(Cfg_LSFail) XIC(Wrk_OpenFdbk) XIC(Wrk_ClosedFdbk) ,XIO(Cfg_LSFail) XIO(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) ] OTE(Sts_LSFail) MOV(3,Val_Fdbk) ,XIC(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) MOV(2,Val_Fdbk) ,XIC(Wrk_ClosedFdbk) XIO(Wrk_OpenFdbk) OTE(Sts_Active) MOV(1,Val_Fdbk) ,[XIC(Cfg_LSFail) XIO(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) ,XIO(Cfg_LSFail) XIC(Wrk_OpenFdbk) XIC(Wrk_ClosedFdbk) ] CLR(Val_Fdbk) ];
				RC: "The rate limiter$'s scan timer must run and clear every scan, whether the Instruction$N"
				    "is true or not.  Doing so here avoids a bump in the Value on transition to EnableIn TRUE.";
				N: TON(Wrk_ScanT,?,?)CLR(Wrk_ScanT.ACC);
				RC: "$QLurking$Q Operator Commands are cleared, as well as a Program Reset.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  Added External Command Source and Commands/Settings.  #####";
				N: [OTU(MCmd_Bypass) OTU(MCmd_Check) OTU(OCmd_BumpOpen) OTU(OCmd_BumpClose) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####$N"
				    "#####  Aligned ready bit naming with command bit names.  #####";
				N: [OTU(MRdy_Bypass) OTU(MRdy_Check) OTU(ORdy_BumpOpen) OTU(ORdy_BumpClose) ,OTU(ORdy_Reset) OTU(ORdy_ResetAckAll) OTU(Sts_RdyAck) OTU(ORdy_CV) ];
				RC: "This rung generates the enumerated Device Status:$N"
				    "0 = At Target$N"
				    "1 = Ramping Down$N"
				    "2 = Ramping Up$N"
				    "3 = Clamped at CVMin$N"
				    "4 = Clamped at CVMax$N"
				    "$N"
				    "And this rung generates the enumerated Device Fault Status:$N"
				    "0 = none$N"
				    "32 = I/O Fault$N"
				    "34 = Configuration Error";
				N: [CLR(Val_Sts) ,XIO(Sts_Err) CLR(Val_Fault) ,XIC(Sts_Err) MOV(34,Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed go";
				N: [CLR(Wrk_SrcQ) ,[XIO(Cfg_HasOpenLS) ,XIO(Cfg_HasClosedLS) ] MOV(1,Wrk_SrcQ) ,XIO(Cfg_HasOpenLS) XIO(Cfg_HasClosedLS) MOV(2,Wrk_SrcQ) ,XIC(Inp_ActuatorFault) MOV(32,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: MOV(20,SrcQ);
		END_ROUTINE

		ROUTINE Logic (Description := "Normal Scan: manipulate Control Valve with position feedback")
				RC: "Copyright ? Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_ValveC :  PROCESS -- CONTROL VALVE$N"
				    "============================================================$N"
				    "Revision 4.10.01 Release  2019-10-17:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-16:  Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "Added notify and unack count rollup for associated object(s).$N"
				    "Changed $QMode$Q to $QCommand Source$Q using P_CmdSrc 4.00.00.$N"
				    "Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "Added unacked alarm count.$N"
				    "Added configurable decimal places for display on HMI.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N"
				    "Added option for no position feedback (simulated with hysteresis).$N"
				    "V4.10.00  2019-03-08:  Added option to clamp to a full/empty range when we have$N"
				    "limit switches. Changed availability to use input availability from interlocks.$N"
				    "Updated to P_CmdSrc V4.10.00. Corrected parameter External Access.$N"
				    "Added Cfg_HasMoreObj.$N"
				    "V4.10.01  2019-10-17:  No changes, uprevved because P_CmdSrc 4.10.01 is used.$N"
				    "============================================================$N"
				    "This Instruction controls an Analog or Pulse Output Valve with$N"
				    "analog or simulated position feedback and provides:$N"
				    "$N"
				    "*  Program and Operator entry of target position in Percent Open$N"
				    "*  Ramping of position to target at specified Rate of Change (%/sec)$N"
				    "*  Scaling of Position Feedback input from Raw (I/O card) Units to percent$N"
				    "*  Monitoring of Interlock conditions which cause output to shed$N"
				    "*  Configurable shed to HOLD or to configured position$N"
				    "*  Monitoring of I/O communication faults$N"
				    "*  Alarms for Interlock Trip, Actuator Fault, I/O Fault$N"
				    "*  Opened, Closed status based on limit switches (if provided),$N"
				    "or based on Position Feedback and a configured threshold.$N"
				    "*  $QAvailable$Q status for use by automation logic to know whether valve$N"
				    "      can be controlled by other objects.$N"
				    "$N"
				    "Command Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$N"
				    "Command Sources: Operator, Program, External, Override, Maintenance, Out of Service, Hand.$N"
				    "Alarms are provided by P_Alarm Add-On Instruction instances.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)CONCAT(Cfg_Desc,Cfg_Label,Cfg_Tag)CONCAT(Cfg_Area,Cfg_EU,Cfg_CVNavTag)LOWER(HMI_Lib,HMI_Type);
				RC: "============================================================$N"
				    "COMMAND SOURCE PROCESSING$N"
				    "============================================================$N"
				    "This rung handles received Command Source selection Inputs and Commands:$N"
				    "$N"
				    "NOTE:  All Commands for Comm";
				N: LBL(SkipText)P_CmdSrc(CmdSrc);
				RC: "This rung handles simple First-Come First-Served Ownership Arbitration.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "These rungs get Configuration data (such as timer presets) and distribute as needed.$N"
				    "Note that some Configuration d";
				N: [GEQ(Cfg_CVEUMax,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_CVEUMin) MOV(Cfg_CVEUMax,Val_CVEUMax) ,LES(Cfg_CVEUMax,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_CVEUMax) MOV(Cfg_CVEUMax,Val_CVEUMin) ,LIM(7,Cfg_DecPlcs,-1) MOV(2,Cfg_DecPlcs) ];
				RC: "Restrict the configured Rate of Change Limits to be non-negative.$N"
				    "NOTE:  A $Qzero$Q value of a limit means $Qunlimited$Q (immediate).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: [LES(Cfg_CVRoCLimInc,0.0) CLR(Cfg_CVRoCLimInc) ,LES(Cfg_CVRoCLimDec,0.0) CLR(Cfg_CVRoCLimDec) ];
				RC: "If the Valve does not have an Open Limit Switch input,$N"
				    "it cannot be used for Valve feedback checking.";
				N: XIO(Cfg_HasOpenLS)OTU(Cfg_UseOpenLS);
				RC: "If the Valve does not have a Closed Limit Switch input,$N"
				    "it cannot be used for Valve feedback checking.";
				N: XIO(Cfg_HasClosedLS)OTU(Cfg_UseClosedLS);
				RC: "Flag a Configuration Error if the CV scaled range, or the CV output or$N"
				    "position feedback input range maximum and minimum are set the same (invalid range).";
				N: [EQU(Cfg_CVEUMax,Cfg_CVEUMin) OTE(Err_EU) ,EQU(Cfg_CVRawMax,Cfg_CVRawMin) OTE(Err_Raw) ,EQU(Cfg_FdbkRawMax,Cfg_FdbkRawMin) OTE(Err_Fdbk) ];
				RC: "Check for a valid Cycle Time.  If it results in a negative value, clear it and flag it.$N"
				    "$N"
				    "The other times must be set relative to the Cycle Time.  If any is invalid, just make it valid:$N"
				    "* If Max ON Time < 0 or > Cycle Time, set it to Cycle Time.$N"
				    "*  If Min ON Time < 0 or > Max ON Time, set it to zero.$N"
				    "* If Deadtime < 0 or > Cycle Time, set it to zero.$N"
				    "* Bump Time must be within the Min ON Time and Max ON Time.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added option for simulated position feedback, with deadtime timer.  #####";
				N: [MUL(Cfg_CycleT,1000.0,Wrk_CycleT_ms) LES(Wrk_CycleT_ms,0) CLR(Wrk_CycleT_ms) CLR(Cfg_CycleT) OTE(Err_Timer) ,[LES(Cfg_MaxOnT,0.0) ,GRT(Cfg_MaxOnT,Cfg_CycleT) ] MOV(Cfg_CycleT,Cfg_MaxOnT) ,[LES(Cfg_MinOnT,0.0) ,GRT(Cfg_MinOnT,Cfg_CycleT) ] CLR(Cfg_MinOnT) ,[LES(Cfg_Deadtime,0.0) ,GRT(Cfg_Deadtime,Cfg_MaxOnT) ] CLR(Cfg_Deadtime) ,MUL(Cfg_Deadtime,1000,Wrk_DeadtimeT.PRE) ,LES(Cfg_BumpT,Cfg_MinOnT) NEQ(Cfg_BumpT,0.0) MOV(Cfg_MinOnT,Cfg_BumpT) ,GRT(Cfg_BumpT,Cfg_MaxOnT) MOV(Cfg_MaxOnT,Cfg_BumpT) ];
				RC: "Clamp other configuration parameters to ensure they are valid.$N"
				    "$N"
				    "* If the Open Rate < 0, set it to zero.$N"
				    "* If the Close Rate < 0, set it to zero.$N"
				    "* Clamp the Closed/Opened status threshold to be within the$N"
				    "scaled range CVEUMin to CVEUMax.";
				N: [LES(Cfg_OpenRate,0.0) CLR(Cfg_OpenRate) ,LES(Cfg_CloseRate,0.0) CLR(Cfg_CloseRate) ,LES(Cfg_MaxClosedPos,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Cfg_MaxClosedPos) ,GRT(Cfg_MaxClosedPos,Cfg_CVEUMax) MOV(Cfg_CVEUMax,Cfg_MaxClosedPos) ];
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Crossed CV Limits or Invalid Rate of Change Limit$N"
				    "Bad Cycle Time configuration$N"
				    "Bad Raw Scaling configs (Max = Min)$N"
				    "Bad Alarm configs$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.";
				N: [LES(Cfg_MaxCV,Cfg_MinCV) OTE(Err_Limit) ,XIC(Err_EU) ,XIC(Err_Raw) ,XIC(Err_Fdbk) ,XIC(Err_Timer) ]OTE(Nrdy_CfgErr);
				RC: "============================================================$N"
				    "FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "If the Position Feedback exists and we$'re not in Simulation, process it.$N"
				    "If the input is a valid REAL number";
				N: XIO(Inp_Sim)XIC(Cfg_HasPosFdbk)[COP(Inp_PosFdbk,Wrk_RealChkDINT,1) MEQ(Wrk_RealChkDINT,16#7F80_0000,16#7F80_0000) OTE(Sts_PosInfNaN) ,[XIC(Sts_PosInfNaN) ,XIC(Err_Fdbk) ] COP(Inp_PosFdbk,Val_Pos,1) ,XIO(Sts_PosInfNaN) XIO(Err_Fdbk) CPT(Val_Pos,(Inp_PosFdbk-Cfg_FdbkRawMin)*(Cfg_CVEUMax-Cfg_CVEUMin)/(Cfg_FdbkRawMax-Cfg_FdbkRawMin)+Cfg_CVEUMin) ];
				RC: "In preparation for rate limiting and ramping, this rung$N"
				    "determines the time since the previous scan, using a non-stop TON timer.$N"
				    "When we get here, we read the accumulator (in milliseconds, so$N"
				    "divide by 1000.0 to get seconds), then clear the accumulator.  Next scan the accumulator will have$N"
				    "incremented up to the number of milliseconds since last scan.  (Works for scan times up to 2 million seconds.....)";
				N: MOV(2147483647,Wrk_ScanT.PRE)TON(Wrk_ScanT,?,?)DIV(Wrk_ScanT.ACC,1000.0,Wrk_ScanTime)CLR(Wrk_ScanT.ACC);
				RC: "In Simulation, or if the Position Feedback does not exist, the simulated position$N"
				    "ramps at the configured valve Open Rate or Close Rate, after waiting the deadtime$N"
				    "on a change in direction, when the logic is requesting the valve to open or close.$N"
				    "(Note Wrk_ bits, not Out_ bits, which are cleared in Simulation.)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added option for simulated position feedback, with deadtime timer.  #####";
				N: [XIC(Inp_Sim) ,XIO(Cfg_HasPosFdbk) ][[XIC(Wrk_Open) XIO(Wrk_LastMove) OTL(Wrk_LastMove) ,XIC(Wrk_Close) XIC(Wrk_LastMove) OTU(Wrk_LastMove) ] OTL(Wrk_WaitDeadtime) ,XIC(Wrk_WaitDeadtime) TON(Wrk_DeadtimeT,?,?) TON(Wrk_DeadtimeT,?,?) ,XIC(Wrk_DeadtimeT.DN) OTU(Wrk_WaitDeadtime) ,XIO(Wrk_WaitDeadtime) [XIC(Wrk_Open) CPT(Val_Pos,Val_Pos+(Wrk_ScanTime*Cfg_OpenRate)) ,XIC(Wrk_Close) CPT(Val_Pos,Val_Pos-(Wrk_ScanTime*Cfg_CloseRate)) ] ,GRT(Val_Pos,Cfg_CVEUMax) MOV(Cfg_CVEUMax,Val_Pos) ,LES(Val_Pos,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_Pos) ];
				RC: "If the valve is NOT simulated, and if the valve does NOT have position feedback,$N"
				    "if the valve contacts the open or closed limit switch, set the simulated position$N"
				    "feedback to the full open (MaxCV) or full closed (MinCV) position.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added option for simulated position feedback, with deadtime timer.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Added option to clamp to a full/empty range when we have limit switches.   #####";
				N: XIO(Inp_Sim)[XIO(Cfg_HasPosFdbk) ,XIC(Cfg_ClampPosToLS) ][XIC(Inp_OpenLS) XIC(Cfg_UseOpenLS) [XIO(Inp_ClosedLS) ,XIO(Cfg_UseClosedLS) ] MOV(Cfg_CVEUMax,Val_Pos) ,XIC(Inp_ClosedLS) XIC(Cfg_UseClosedLS) [XIO(Inp_OpenLS) ,XIO(Cfg_UseOpenLS) ] MOV(Cfg_CVEUMin,Val_Pos) ];
				RC: "============================================================$N"
				    "SETTINGS PROCESSING$N"
				    "============================================================$N"
				    "This rung handles received Settings:$N"
				    "$N"
				    "Limit the Program and Operator CV Settings to the hard limits, regardl";
				N: [[[GRT(PSet_CV,Cfg_MaxCV) MOV(Cfg_MaxCV,PSet_CV) ,LES(PSet_CV,Cfg_MinCV) MOV(Cfg_MinCV,PSet_CV) ] XIC(Sts_Prog) ,[GRT(XSet_CV,Cfg_MaxCV) MOV(Cfg_MaxCV,XSet_CV) ,LES(XSet_CV,Cfg_MinCV) MOV(Cfg_MinCV,XSet_CV) ] XIC(Sts_Ext) ,XIO(Sts_Maint) XIO(Sts_Hand) [GRT(OSet_CV,Cfg_MaxCV) MOV(Cfg_MaxCV,OSet_CV) ,LES(OSet_CV,Cfg_MinCV) MOV(Cfg_MinCV,OSet_CV) ] ] OTE(Sts_Clamped) ,XIC(Sts_Prog) MOV(PSet_CV,Wrk_CV) ,[XIC(Sts_Oper) ,XIC(Sts_Maint) ] MOV(OSet_CV,Wrk_CV) ,XIC(Sts_Ext) MOV(XSet_CV,Wrk_CV) ,XIC(Sts_Ovrd) MOV(Inp_OvrdCV,Wrk_CV) ];
				RC: "============================================================$N"
				    "INTERLOCK / PERMISSIVE BYPASS / CHECK COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Bypass Command bypasses the Bypassable Permissives and Interlocks.";
				N: XIC(MCmd_Bypass)OTU(MCmd_Bypass)OTL(Wrk_Bypass);
				RC: "The Check Command enables checking of ALL$N"
				    "Permissives and Interlocks (cancels the bypass).";
				N: XIC(MCmd_Check)OTU(MCmd_Check)OTU(Wrk_Bypass);
				RC: "If the internal Bypass flag is set, Bypassable Interlocks ARE BYPASSED.$N"
				    "Bypassing is ACTIVE if Bypass selected OR in Maintenance Mode,$N"
				    "or in Override Mode if Override Bypassing is configured.";
				N: [XIC(Wrk_Bypass) OTE(Sts_Bypass) ,XIC(Sts_Maint) ,XIC(Sts_Ovrd) XIC(Cfg_OvrdIntlk) ]OTE(Sts_BypActive);
				RC: "If a Maintenance Bypass function is active, display the Maintenance Bypass$N"
				    "Indicator (triangle symbol) on the graphic symbol.  Bypass functions are:$N"
				    "*  Interlock Bypass function is enabled.";
				N: [XIC(Sts_Bypass) ,XIC(Cfg_HasOpenLS) XIO(Cfg_UseOpenLS) ,XIC(Cfg_HasClosedLS) XIO(Cfg_UseClosedLS) ]OTE(Sts_MaintByp);
				RC: "Ready for Interlock Bypass if not bypassed.$N"
				    "Ready to cancel Bypass (resume checking) if bypassed.";
				N: [XIO(Wrk_Bypass) OTE(MRdy_Bypass) ,XIC(Wrk_Bypass) OTE(MRdy_Check) ];
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(XCmd_Reset) OTU(XCmd_Reset) ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(IntlkTrip.PCmd_Ack) ,OTL(IOFault.PCmd_Ack) ] ][OTL(IntlkTrip.PCmd_Reset) OTL(ActuatorFault.PCmd_Reset) OTL(IOFault.PCmd_Reset) ,[XIO(Inp_IOFault) ,XIC(Inp_Sim) ] OTU(Nrdy_IOFault) ];
				RC: "The Pulse Output Valve is NOT READY to be controlled (by the owner specified by Mode) if it is$N"
				    "Disabled, if interlocks are not OK (accounting for bypassing), I/O Communication is faulted$N"
				    "or there is a configuration error.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIC(Nrdy_CfgErr) ,XIC(Sts_OoS) OTE(Nrdy_OoS) ,[XIO(Inp_IntlkOK) XIO(Sts_BypActive) ,XIO(Inp_NBIntlkOK) ] [[ONS(Wrk_IntlkTripONS) XIC(Cfg_ShedHold) [NEQ(Wrk_OpenTime,0.0) ,NEQ(Wrk_CloseTime,0.0) ] ,XIO(Cfg_ShedHold) NEQ(Wrk_CVSet,Cfg_IntlkCV) ] OTE(Sts_IntlkTrip) ,OTE(Nrdy_Intlk) ] ,XIC(Inp_IOFault) XIO(Inp_Sim) OTE(Sts_IOFault) XIC(Cfg_ShedOnIOFault) OTL(Nrdy_IOFault) ,XIC(Nrdy_IOFault) ]OTE(Sts_NotRdy);
				RC: "The device is AVAILABLE to be controlled by other objects$N"
				    "if it IS in Program Mode and it IS NOT $QNot Ready$Q.$N"
				    "#####  V4.10.00  2019-03-08:  Changed availability to use input availability from interlocks.  #####";
				N: XIC(Sts_Prog)XIO(Nrdy_CfgErr)XIO(Nrdy_OoS)XIO(Nrdy_IOFault)[[XIC(Inp_IntlkOK) ,XIC(Sts_BypActive) ] XIC(Inp_NBIntlkOK) ,XIC(Inp_IntlkAvail) ]OTE(Sts_Available);
				RC: "Ready to receive a new OSet_CV if tracking is NOT enabled,$N"
				    "or we$'re in Operator or Maintenance Mode, or,$N"
				    "if we$'re in Hand or Ovrd, tracking is NOT configured for Ovrd and Hand.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Aligned ready bit naming with command bit names.  #####";
				N: [XIO(Cfg_SetTrack) ,XIC(Sts_Oper) ,XIC(Sts_Maint) ,[XIC(Sts_Hand) ,XIC(Sts_Ovrd) ] XIO(Cfg_SetTrackOvrdHand) ]OTE(ORdy_CV);
				RC: "============================================================$N"
				    "DEVICE FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "If the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$N"
				    "use the state of th";
				N: [XIO(Inp_Sim) [XIC(Cfg_UseOpenLS) XIC(Inp_OpenLS) ,XIO(Cfg_UseOpenLS) XIC(Cfg_UseClosedLS) XIO(Inp_ClosedLS) ] ,[XIC(Inp_Sim) ,XIO(Cfg_UseOpenLS) XIO(Cfg_UseClosedLS) ] XIO(Sts_PosInfNaN) GRT(Val_Pos,Cfg_MaxClosedPos) ]OTE(Wrk_OpenFdbk);
				RC: "If the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$N"
				    "use the state of the limit switch feedback inputs as the Valve position.$N"
				    "$N"
				    "If the Valve is being simulated or has no limit switch feedback, use the Sim Timers to provide$N"
				    "$Qfake$Q feedback signals based on the simulation time to Open and time to Close.";
				N: [XIO(Inp_Sim) [XIC(Cfg_UseClosedLS) XIC(Inp_ClosedLS) ,XIO(Cfg_UseClosedLS) XIC(Cfg_UseOpenLS) XIO(Inp_OpenLS) ] ,[XIC(Inp_Sim) ,XIO(Cfg_UseClosedLS) XIO(Cfg_UseOpenLS) ] XIO(Sts_PosInfNaN) LEQ(Val_Pos,Cfg_MaxClosedPos) ]OTE(Wrk_ClosedFdbk);
				RC: "============================================================$N"
				    "VALVE FEEDBACK STATUS$N"
				    "============================================================$N"
				    "This rung generates the Valve Feedback Status bits and Enumeration Value:$N"
				    "Limit Switch Fail, if the Limit S";
				N: [[XIC(Cfg_LSFail) XIC(Wrk_OpenFdbk) XIC(Wrk_ClosedFdbk) ,XIO(Cfg_LSFail) XIO(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) ] OTE(Sts_LSFail) MOV(3,Val_Fdbk) ,XIC(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) MOV(2,Val_Fdbk) ,XIC(Wrk_ClosedFdbk) XIO(Wrk_OpenFdbk) MOV(1,Val_Fdbk) ,[XIC(Cfg_LSFail) XIO(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) ,XIO(Cfg_LSFail) XIC(Wrk_OpenFdbk) XIC(Wrk_ClosedFdbk) ] CLR(Val_Fdbk) ,NEQ(Val_Fdbk,1) OTE(Sts_Active) ];
				RC: "============================================================$N"
				    "BUMP OPEN, BUMP CLOSE COMMAND HANDLING$N"
				    "============================================================$N"
				    "Ready to receive Bump Open / Bump Close Commands when:$N"
				    "*  Bump Timer preset is greater tha";
				N: [XIC(Sts_PosInfNaN) ,XIC(Sts_IOFault) ,XIC(Sts_ActuatorFault) ][XIC(Sts_Oper) ,XIC(Sts_Maint) ]XIO(Wrk_BumpOpen)XIO(Wrk_BumpClose)XIO(Wrk_BumpingOpen)XIO(Wrk_BumpingClose)[[XIO(Wrk_OpenFdbk) ,XIO(Cfg_UseClosedLS) ,XIO(Cfg_UseOpenLS) ] OTE(ORdy_BumpOpen) ,[XIO(Wrk_ClosedFdbk) ,XIO(Cfg_UseClosedLS) ,XIO(Cfg_UseOpenLS) ] OTE(ORdy_BumpClose) ];
				RC: "The Bump Open Command is used to pulse the Open Output$N"
				    "when the valve position feedback is not available (Inf, NaN, I/O Fault).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Aligned ready bit naming with command bit names.  #####";
				N: XIC(OCmd_BumpOpen)OTU(OCmd_BumpOpen)XIC(ORdy_BumpOpen)OTL(Wrk_BumpOpen);
				RC: "The Bump Close Command is used to pulse the Close Output$N"
				    "when the valve position feedback is not available (Inf, NaN, I/O Fault).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Aligned ready bit naming with command bit names.  #####";
				N: XIC(OCmd_BumpClose)OTU(OCmd_BumpClose)XIC(ORdy_BumpClose)OTL(Wrk_BumpClose);
				RC: "============================================================$N"
				    "VALVE ACTUATOR FAULT DETECTION$N"
				    "============================================================$N"
				    "If the Actuator Fault Input is true and we$'re not in simulation.$N"
				    "raise an ACTUATOR FAULT Status.";
				N: XIC(Inp_ActuatorFault)XIO(Inp_Sim)OTE(Sts_ActuatorFault);
				RC: "Clear flags for capturing exception conditions.";
				N: OTU(Wrk_ShedHold)OTU(Wrk_ShedIntlkCV);
				RC: "If Interlocks are not OK (non-bypassable always checked, bypassable checked if not bypassed$N"
				    "(bypassables not checked in Maintenance Mode, or in Override Mode if Override ignores bypassable interlocks...),$N"
				    "or if there is an I/O Fault, either HOLD the valve position or SHED it to the configured Interlock CV,$N"
				    "depending on the state of the Shed/Hold configuration.$N"
				    "$N"
				    "We don$'t want the Interlock Trip alarm occuring if Hand or Out of Service is going to win down below....$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIC(Nrdy_Intlk) ,XIC(Nrdy_IOFault) ]XIO(Sts_Hand)XIO(Sts_OoS)XIO(Nrdy_CfgErr)[XIO(Cfg_ShedHold) OTL(Wrk_ShedIntlkCV) MOV(Cfg_IntlkCV,Wrk_CV) ,XIC(Cfg_ShedHold) XIO(Sts_PosInfNaN) OTL(Wrk_ShedHold) MOV(Val_Pos,Wrk_CV) ];
				RC: "If the Pulse Output Valve is Out of Service or in Hand, or the Configuration is not valid,$N"
				    "set the CV to the feedback position (and do not energize pulse outputs -- handled elsewhere).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIC(Sts_Hand) ,XIC(Sts_OoS) ,XIC(Nrdy_CfgErr) ]XIO(Sts_PosInfNaN)MOV(Val_Pos,Wrk_CV);
				RC: "After all that selecting, copy the final result to a holding register.  (We needed it above to do$N"
				    "the HOLD function on Interlock!)$N"
				    "$N"
				    "This is where the CV will be when ramping (if any) is done.";
				N: MOV(Wrk_CV,Wrk_CVSet);
				RC: "This rung determines whether the selected Position CV is +/- Infinity or +/- NotANumber.$N"
				    "In either case, the value cannot be passed into the rate limiter calculation or to the final output.$N"
				    "Instead, perform the designated SHED action: hold last output or shed to the Interlock CV.";
				N: COP(Wrk_CVSet,Wrk_RealChkDINT,1)MEQ(Wrk_RealChkDINT,16#7F80_0000,16#7F80_0000)[XIO(Cfg_ShedHold) OTL(Wrk_ShedIntlkCV) MOV(Cfg_IntlkCV,Wrk_CVSet) ,XIC(Cfg_ShedHold) OTL(Wrk_ShedHold) MOV(Wrk_CVOut,Wrk_CVSet) ];
				RC: "Under these conditions, SKIP the output ramping:$N"
				    "$N"
				    "* The vlave is disabled$N"
				    "* The valve is in Hand$N"
				    "* Rate of Change Skip is configures TRUE and, either, the Mode is Maintenance,$N"
				    "the Mode is Override, or an Interlock holds us out.$N"
				    "* The CV Rate of Change Limit for the direction the CV is moving is ZERO.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: [XIC(Sts_OoS) ,XIC(Nrdy_CfgErr) ,XIC(Sts_Hand) ,XIC(Cfg_SkipRoCLim) [XIC(Sts_Maint) ,XIC(Sts_Ovrd) ,XIC(Nrdy_Intlk) ] ,GRT(Wrk_CVSet,Wrk_CVOut) EQU(Cfg_CVRoCLimInc,0.0) ,LES(Wrk_CVSet,Wrk_CVOut) EQU(Cfg_CVRoCLimDec,0.0) ]OTE(Sts_SkipRoCLim)MOV(Wrk_CVSet,Wrk_CVOut);
				RC: "If the conditions above are NOT TRUE, do the rate limiting:$N"
				    "$N"
				    "If the time since the previous scan is not ZERO:$N"
				    "$N"
				    "* Calculate the amount to step this scan toward the final CV$N"
				    "* If we$'re within a single setp, go to the final CV$N"
				    "* If we$'re not within a single step, step one step closer (up or down, whichever way we need to go)$N"
				    "and show the $QRamping$Q status.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: XIO(Sts_SkipRoCLim)NEQ(Wrk_CVSet,Wrk_CVOut)NEQ(Wrk_ScanTime,0.0)[MUL(Cfg_CVRoCLimInc,Wrk_ScanTime,Wrk_StepInc) MUL(Cfg_CVRoCLimDec,Wrk_ScanTime,Wrk_StepDec) ,GRT(Wrk_CVSet,Wrk_CVOut) [CMP(Wrk_CVOut>=(Wrk_CVSet-Wrk_StepInc)) ,EQU(Cfg_CVRoCLimInc,0.0) ] MOV(Wrk_CVSet,Wrk_CVOut) ,LES(Wrk_CVSet,Wrk_CVOut) [CMP(Wrk_CVOut<=(Wrk_CVSet+Wrk_StepDec)) ,EQU(Cfg_CVRoCLimDec,0.0) ] MOV(Wrk_CVSet,Wrk_CVOut) ,[CMP(Wrk_CVOut>(Wrk_CVSet+Wrk_StepDec)) SUB(Wrk_CVOut,Wrk_StepDec,Wrk_CVOut) ,CMP(Wrk_CVOut<=(Wrk_CVSet-Wrk_StepInc)) ADD(Wrk_CVOut,Wrk_StepInc,Wrk_CVOut) ] OTE(Sts_Ramping) ];
				RC: "============================================================$N"
				    "OUTPUT GENERATION$N"
				    "============================================================$N"
				    "The following rungs generate the instruction$'s outputs, $N"
				    "on this rung the CV analog output (Out_CV)$N"
				    "$N"
				    "If not";
				N: [XIO(Inp_Sim) [XIO(Err_EU) XIO(Err_Raw) CPT(Out_CV,(Wrk_CVOut-Cfg_CVEUMin)*(Cfg_CVRawMax-Cfg_CVRawMin)/(Cfg_CVEUMax-Cfg_CVEUMin)+Cfg_CVRawMin) ,[XIC(Err_EU) ,XIC(Err_Raw) ] OTL(Wrk_ShedIntlkCV) MOV(Cfg_IntlkCV,Out_CV) ] ,XIC(Inp_Sim) CLR(Out_CV) ];
				RC: "The following rungs generate the instruction$'s Open and Close pulse outputs.$N"
				    "$N"
				    "If the Cycle Time is > 0, and the position and CV are valid real numbers, then:$N"
				    "$N"
				    "* the open output can be energized if the valve CV > Position, we$'re not$N"
				    "up against the open limit switch, the position is less than the Max CV,$N"
				    "and the valve has an Open Rate > 0.$N"
				    "$N"
				    "* the close output can be energized if the valve Position > CV, we$'re not$N"
				    "up against the closed limit switch, the position is more than the Min CV,$N"
				    "and the valve has a Close Rate > 0.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: GRT(Cfg_CycleT,0.0)XIO(Sts_PosInfNaN)XIO(Sts_CVInfNaN)XIO(Sts_OoS)XIO(Nrdy_CfgErr)XIO(Nrdy_IOFault)[GRT(Val_CVOut,Val_Pos) [XIO(Inp_OpenLS) ,XIO(Cfg_UseOpenLS) ,XIC(Inp_Sim) ] LES(Val_Pos,Cfg_MaxCV) GRT(Cfg_OpenRate,0.0) OTE(Wrk_OKtoOpen) ,LES(Val_CVOut,Val_Pos) [XIO(Inp_ClosedLS) ,XIO(Cfg_UseClosedLS) ,XIC(Inp_Sim) ] GRT(Val_Pos,Cfg_MinCV) GRT(Cfg_CloseRate,0.0) OTE(Wrk_OKtoClose) ];
				RC: "This is just a continuously-running Cycle Timer.  By not using the Cycle$N"
				    "Timer $Q.DN$Q (done) bit on the rung, we avoid losing the one scan of$N"
				    "time when the timer is not running in an XIO / TON rung.";
				N: TON(Wrk_CycleT,?,?);
				RC: "When the Cycle completes, calculate a new Open Time (time to pulse the$N"
				    "Open output) and Close Time (time to pulse the Close output).$N"
				    "$N"
				    "Details of this calculation are in the Instruction Help for the POSP built-in$N"
				    "instruction, from which this logic is derived.";
				N: [GEQ(Wrk_CycleT.ACC,Wrk_CycleT_ms) ,XIO(Wrk_CycleActive) ][OTU(Wrk_CycleActive) OTU(Wrk_BumpingOpen) OTU(Wrk_BumpingClose) CLR(Wrk_CycleT.ACC) ,XIC(Wrk_OKtoOpen) [CPT(Wrk_OpenTime,(Val_CVOut-Val_Pos)/Cfg_OpenRate) ,LES(Wrk_OpenTimePrev,Cfg_CycleT) ADD(Wrk_OpenTime,Cfg_Deadtime,Wrk_OpenTime) ,GRT(Wrk_OpenTime,Cfg_MaxOnT) MOV(Cfg_MaxOnT,Wrk_OpenTime) ,LES(Wrk_OpenTime,Cfg_MinOnT) CLR(Wrk_OpenTime) ] ,XIO(Wrk_OKtoOpen) XIO(Wrk_BumpOpen) CLR(Wrk_OpenTime) ,XIC(Wrk_BumpOpen) OTU(Wrk_BumpOpen) OTL(Wrk_BumpingOpen) MOV(Cfg_BumpT,Wrk_OpenTime) ,XIC(Wrk_OKtoClose) [CPT(Wrk_CloseTime,(Val_Pos-Val_CVOut)/Cfg_CloseRate) ,LES(Wrk_CloseTimePrev,Cfg_CycleT) ADD(Wrk_CloseTime,Cfg_Deadtime,Wrk_CloseTime) ,GRT(Wrk_CloseTime,Cfg_MaxOnT) MOV(Cfg_MaxOnT,Wrk_CloseTime) ,LES(Wrk_CloseTime,Cfg_MinOnT) CLR(Wrk_CloseTime) ] ,XIO(Wrk_OKtoClose) XIO(Wrk_BumpClose) CLR(Wrk_CloseTime) ,XIC(Wrk_BumpClose) OTU(Wrk_BumpClose) OTL(Wrk_BumpingClose) MOV(Cfg_BumpT,Wrk_CloseTime) ,[NEQ(Wrk_OpenTime,0.0) ,NEQ(Wrk_CloseTime,0.0) ] OTL(Wrk_CycleActive) ,MOV(Wrk_OpenTime,Wrk_OpenTimePrev) ,MOV(Wrk_CloseTime,Wrk_CloseTimePrev) ];
				RC: "If the Open output should be energized and the timer accumulator hasn$'t reached the Open time yet$N"
				    "(could be less than the cycle time, even zero), energize the Open request.$N"
				    "(We use a Work bit so we can send this to the position simulation logic above.)";
				N: [XIC(Wrk_OKtoOpen) XIO(Inp_ActuatorFault) ,XIC(Wrk_BumpingOpen) ]CMP(Wrk_CycleT.ACC<(Wrk_OpenTime*1000.0))OTE(Wrk_Open);
				RC: "If the Close output should be energized and the timer accumulator hasn$'t reached the Close time yet$N"
				    "(could be less than the cycle time, even zero), energize the Close request.$N"
				    "(We use a Work bit so we can send this to the position simulation logic above.)";
				N: [XIC(Wrk_OKtoClose) XIO(Inp_ActuatorFault) ,XIC(Wrk_BumpingClose) ]CMP(Wrk_CycleT.ACC<(Wrk_CloseTime*1000.0))OTE(Wrk_Close);
				RC: "If were not in simulation and the actuator is not faulted, go ahead and energize the real outputs$N"
				    "as determined by the logic above.";
				N: XIO(Inp_Sim)[XIC(Wrk_Open) OTE(Out_Open) ,XIC(Wrk_Close) OTE(Out_Close) ];
				RC: "============================================================$N"
				    "VALUES PROCESSING$N"
				    "============================================================$N"
				    "$N"
				    "Copy the working CV values to their $QVal_$Q output parameters, and based on Mode$N"
				    "and the Tracking configs, a";
				N: [MOV(Wrk_CVSet,Val_CVSet) MOV(Wrk_CVOut,Val_CVOut) ,XIC(Cfg_SetTrack) [XIO(Sts_Ovrd) XIO(Sts_Hand) ,XIC(Cfg_SetTrackOvrdHand) ] MOV(Val_CVSet,PSet_CV) MOV(Val_CVSet,XSet_CV) MOV(Val_CVSet,OSet_CV) ];
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "The various alarms are ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Delet";
				N: OTL(IntlkTrip.PCfg_AllowExist)OTL(ActuatorFault.PCfg_AllowExist)OTL(IOFault.PCfg_AllowExist);
				RC: "Let the Alarm instance know if this object is taken Out of Service$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Now using P_CmdSrc, including Out of Service.  #####";
				N: XIC(CmdSrc.Sts_OoS)OTE(IntlkTrip.Inp_OoS)OTE(ActuatorFault.Inp_OoS)OTE(IOFault.Inp_OoS);
				RC: "Handle Interlock Trip Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IntlkTrip);
				RC: "Handle Device-Reported Actuator Fault Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(ActuatorFault);
				RC: "Handle I/O Fault Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IOFault);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q breadcrumb on the graphic symbol).";
				N: [XIC(IntlkTrip.Sts_AlmInh) ,XIC(ActuatorFault.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "A summary Bad Config status is provided, simply an OR of the individual bits.";
				N: [XIC(Nrdy_CfgErr) ,[XIC(IntlkTrip.Sts_Err) ,XIC(ActuatorFault.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "This rung generates the enumerated Device Status:$N"
				    "0 = At Target$N"
				    "1 = Ramping Down$N"
				    "2 = Ramping Up$N"
				    "3 = Clamped at CVMin$N"
				    "4 = Clamped at CVMax$N"
				    "5 = Bump Close requested or currently pulsing Out_Close$N"
				    "6 = Bump Open requested or currently pulsing Out_Open$N"
				    "$N"
				    "And this rung generates the enumerated Device Fault Status:$N"
				    "0 = none$N"
				    "32 = I/O Fault$N"
				    "34 = Configuration Error$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [CLR(Wrk_Sts) CLR(Wrk_Fault) ,[GRT(Wrk_OpenTime,0.0) XIO(Inp_ActuatorFault) ,XIC(Sts_Ramping) LES(Wrk_CVOut,Wrk_CVSet) ] MOV(2,Wrk_Sts) ,[GRT(Wrk_CloseTime,0.0) XIO(Inp_ActuatorFault) ,XIC(Sts_Ramping) GRT(Wrk_CVOut,Wrk_CVSet) ] MOV(1,Wrk_Sts) ,XIC(Sts_Clamped) [EQU(Wrk_CVOut,Cfg_MinCV) MOV(3,Wrk_Sts) ,EQU(Wrk_CVOut,Cfg_MaxCV) MOV(4,Wrk_Sts) ] ,[XIC(Wrk_BumpClose) ,XIC(Wrk_BumpingClose) ] OTE(Sts_BumpClose) MOV(5,Wrk_Sts) ,[XIC(Wrk_BumpOpen) ,XIC(Wrk_BumpingOpen) ] OTE(Sts_BumpOpen) MOV(6,Wrk_Sts) ,[XIC(Sts_IOFault) ,XIC(Nrdy_IOFault) ] MOV(32,Wrk_Fault) ,XIC(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Sts,Val_Sts) MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed go";
				N: [CLR(Wrk_SrcQ) ,[XIO(Cfg_HasOpenLS) ,XIO(Cfg_HasClosedLS) ] MOV(1,Wrk_SrcQ) ,XIO(Cfg_HasOpenLS) XIO(Cfg_HasClosedLS) MOV(2,Wrk_SrcQ) ,XIC(Inp_ActuatorFault) MOV(32,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(SrcQ_IO,Wrk_SrcQ) ,[XIC(Cfg_HasOpenLS) XIO(Cfg_UseOpenLS) ,XIC(Cfg_HasClosedLS) XIO(Cfg_UseClosedLS) ] MOV(18,Wrk_SrcQ) ,XIC(Wrk_ShedHold) MOV(19,Wrk_SrcQ) ,XIC(Wrk_ShedIntlkCV) MOV(20,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ) ];
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for r";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) ,GRT(IntlkTrip.Val_Notify,Wrk_Notify) MOV(IntlkTrip.Val_Notify,Wrk_Notify) ,GRT(ActuatorFault.Val_Notify,Wrk_Notify) MOV(ActuatorFault.Val_Notify,Wrk_Notify) ,GRT(IOFault.Val_Notify,Wrk_Notify) MOV(IOFault.Val_Notify,Wrk_Notify) ,[XIC(IntlkTrip.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(ActuatorFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IOFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTE(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_Notify,Val_NotifyAll) MOV(Wrk_UnackAlmC,Val_UnackAlmC) ];
				RC: "This rung identifies:$N"
				    "* if any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(IntlkTrip.Sts_RdyAck) ,XIC(ActuatorFault.Sts_RdyAck) ,XIC(IOFault.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(IntlkTrip.Sts_RdyReset) ,XIC(ActuatorFault.Sts_RdyReset) ,XIC(IOFault.Sts_RdyReset) ,XIC(Nrdy_IOFault) XIO(Sts_IOFault) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear Ownership. clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, set the Ownership to NO OWNER (0).";
				N: CLR(PSet_Owner)CLR(Val_Owner);
				RC: "$QLurking$Q Operator Commands are cleared, as well as a Program Reset.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  Added External Command Source and Commands/Settings.  #####";
				N: [OTU(MCmd_Bypass) OTU(MCmd_Check) OTU(OCmd_BumpOpen) OTU(OCmd_BumpClose) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####$N"
				    "#####  Aligned ready bit naming with command bit names.  #####";
				N: [OTU(MRdy_Bypass) OTU(MRdy_Check) OTU(ORdy_BumpOpen) OTU(ORdy_BumpClose) ,OTU(ORdy_Reset) OTU(ORdy_ResetAckAll) OTU(Sts_RdyAck) OTU(ORdy_CV) ];
				RC: "Clear latched Shed (Not Ready) bits.";
				N: OTU(Nrdy_IOFault);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_Intlk (Description := "Interlocks",
	                                       Revision := "4.10",
	                                       RevisionExtension := ".01 Release",
	                                       RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                       Vendor := "Rockwell Automation",
	                                       ExecutePrescan := Yes,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := Yes,
	                                       CreatedDate := "2008-04-02T16:58:50.551Z",
	                                       CreatedBy := "Not Available",
	                                       EditedDate := "2022-02-07T20:24:59.251Z",
	                                       EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                       SoftwareRevision := "v32.03",
	                                       AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction monitors up to 16 Interlock conditions.  It provides these features:$N$N*  The $QOK$Q state of each Interlock Input is configurable.  By default,$N    each Input is 1 to trip, 0 when OK to run.$N*  Interlocks may be configured as Latched.  Latched Interlocks$N    require a Reset Command to clear.  The latching function can be$N    inhibited via a Latch Defeat input, for example, to avoid latching$N    Interlocks for a stopped motor.$N*  Interlocks may be configured as Bypassable; Non-Bypassable$N    Interlocks are reported separately so the destination object can$N    decide whether to bypass (ignore) bypassable interlocks, such$N    as in Maintenance Mode.$N*  First-Out reporting indicates the first condition that caused the$N    running equipment to be tripped.$N*  For each Interlock condition, a Tag may be defined for navigation.$N    Clicking the Interlock description will call up the associated Tag$'s$N    Faceplate.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$NSee 4.10 Release Notes for details.$N* Modified conditions for clearing first-out status and text.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Changed type of Val_FirstOutTxt to STRING_Cond.$N* Corrected Scan Mode selection to execute Prescan logic.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-05)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added Val_FirstOutTxt string (Local, read-only) for use in$N   IntlkTrip alarm message  (ref: KnowledgeBase answer ID 672568).$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyReset for use by external objects.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_Intlk00 OF Wrk_Inp.0 (Description := "Interlock Cond. 00, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes);
			Inp_Intlk01 OF Wrk_Inp.1 (Description := "Interlock Cond. 01, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes);
			Inp_Intlk02 OF Wrk_Inp.2 (Description := "Interlock Cond. 02, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes);
			Inp_Intlk03 OF Wrk_Inp.3 (Description := "Interlock Cond. 03, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes);
			Inp_Intlk04 OF Wrk_Inp.4 (Description := "Interlock Cond. 04, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes);
			Inp_Intlk05 OF Wrk_Inp.5 (Description := "Interlock Cond. 05, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes);
			Inp_Intlk06 OF Wrk_Inp.6 (Description := "Interlock Cond. 06, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes);
			Inp_Intlk07 OF Wrk_Inp.7 (Description := "Interlock Cond. 07, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes);
			Inp_Intlk08 OF Wrk_Inp.8 (Description := "Interlock Cond. 08, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk09 OF Wrk_Inp.9 (Description := "Interlock Cond. 09, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk10 OF Wrk_Inp.10 (Description := "Interlock Cond. 10, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk11 OF Wrk_Inp.11 (Description := "Interlock Cond. 11, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk12 OF Wrk_Inp.12 (Description := "Interlock Cond. 12, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk13 OF Wrk_Inp.13 (Description := "Interlock Cond. 13, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk14 OF Wrk_Inp.14 (Description := "Interlock Cond. 14, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk15 OF Wrk_Inp.15 (Description := "Interlock Cond. 15, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_BypActive : BOOL (Description := "1=Interlock Bypassing is currently active",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0);
			Inp_LatchDefeat : BOOL (Description := "Latch Defeat 1=Do$Nnot latch inputs even if configured for latching",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			Inp_Reset : BOOL (Description := "1=Reset Latched Interlocks and First-Out",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Cfg_OKState : INT (Description := "Bits indicate which state (0 or 1) of each input is OK to run",
			                       Usage := Input,
			                       RADIX := Binary,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Cfg_Latched : INT (Description := "Set bits indicate which conditions are latched (sealed in)",
			                       Usage := Input,
			                       RADIX := Binary,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Cfg_Bypassable : INT (Description := "Set bits indicate which conditions can be bypassed",
			                          Usage := Input,
			                          RADIX := Binary,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasNav : INT (Description := "Set bits indicate which Navigation buttons are enabled",
			                      Usage := Input,
			                      RADIX := Binary,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			PCmd_Reset : BOOL (Description := "Program Command to Reset Latched Interlocks",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Sts_IntlkOK : BOOL (Description := "Overall Interlock Status (1=OK to run, 0=Stop)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 1);
			Sts_NBIntlkOK : BOOL (Description := "Non-Bypassable Interlock Status (1=All NB Interlocks OK to run)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 1);
			Sts_BypActive : BOOL (Description := "1=Interlock Bypassing is Active (ignore bypassable interlocks)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched interlock (returned to OK) is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_Intlk : INT (Description := "Individual Interlock Status (1=Stop, 0=OK)",
			                     Usage := Output,
			                     RADIX := Binary,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_FirstOut : INT (Description := "Interlock First Out Status (bit 1 is First Not-OK condition)",
			                        Usage := Output,
			                        RADIX := Binary,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			P_Intlk : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Cfg_CondTxt : STRING_Cond[16] (Description := "Short HMI description of Interlock Conditions",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[[20,'Enter Description
			Wrk_Inp : INT (Description := "Collection copy of Inp_IntlkXXs",
			                  RADIX := Binary,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_NB : INT (Description := "Working register for Non-Bypassable Interlock ogic",
			                 RADIX := Binary,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			Wrk_Intlk : INT (Description := "Working register for Interlock logic",
			                    RADIX := Binary,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_FirstOut : INT (Description := "Working register for First Out logic",
			                       RADIX := Binary,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_Sts : INT (Description := "Working register for generating Interlock status",
			                  RADIX := Binary,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_PrevSts : INT (Description := "Interlock Status previous scan",
			                      RADIX := Binary,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_LatchEnable : BOOL (Description := "1=Latch interlock if configured to latch, 0=don$'t latch",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 1);
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_InpInv : INT (Description := "Input states after inversion based on Cfg_OKState",
			                     RADIX := Binary,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			HMI_Type : STRING_16 (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[7,'P_Intlk$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[10,'Interlocks$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_NavTag : STRING_NavTag[16] (Description := "Tagnames for destinations of Navigation buttons",
			                     ExternalAccess := Read/Write,
			                     DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			MSet_Bypass : INT (Description := "Individual condition Maintenance Bypass toggles",
			                      RADIX := Binary,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			Val_FirstOutTxt : STRING_Cond (Description := "Text Description of First-Out Condition",
			                          ExternalAccess := Read Only,
			                          DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_NonIntlkStop : BOOL (Description := "One-Shot store: Stop OTHER than Interlock Stop occurred.",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_SetFirstOut : BOOL (Description := "One-Shot store: First Out update triggered",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Operator Command to Reset Latched Interlocks",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Set summary $QOK$Q Status bits to FALSE (0)")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    " Clear $QLurking$Q Commands (received while on false rung).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: OTU(OCmd_Reset)OTU(PCmd_Reset);
				RC: " $N"
				    "Since we$'re not processing Operator Commands, we$'re not READY for them either!";
				N: OTU(ORdy_Reset);
				RC: "If this Interlocks instruction is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then set the summary Interlock OK Status bits to FALSE (0).";
				N: OTU(Sts_IntlkOK)OTU(Sts_NBIntlkOK);
				RC: "Individual Interlock Bypasses can only be set for conditions that are$N"
				    "configured as Bypassable.  This AND clears all the MSets for inputs$N"
				    "that are NOT Bypassable.";
				N: AND(MSet_Bypass,Cfg_Bypassable,MSet_Bypass);
		END_ROUTINE

		ROUTINE Logic (Description := "Check Interlock Conditions")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_Intlk:  PROCESS -- INTERLOCKS$N"
				    "============================================================$N"
				    "Revision 4.10.01 Release  2019-10-16:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, and V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-16:  Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "Added Val_FirstOutTxt string (Local, read-only) for use in$N"
				    "IntlkTrip alarm message  (ref: KnowledgeBase answer ID 672568).$N"
				    "Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyReset for use by external objects.$N"
				    "V4.10.00  2019-03-08:  Changed type of Val_FirstOutTxt to STRING_Cond.$N"
				    "Corrected Scan Mode selection to execute Prescan logic. Added Cfg_HasMoreObj.\$N"
				    "V4.10.01  2019-10-16:  Modified conditions for clearing first-out status and text.$N"
				    "============================================================$N"
				    "This Instruction monitors up to 16 Interlock conditions.  It provides these features:$N"
				    "$N"
				    "*  The $QOK$Q state of each Interlock Input is configurable.$N"
				    "By default, each Input is 1 to trip, 0 when OK to run.$N"
				    "*  Interlocks may be configured as Latched.  Latched Interlocks$N"
				    "require a Reset Command to clear.  The latching function can be inhibited$N"
				    "via a Latch Defeat input, for example, to avoid latching Interlocks for a stopped motor.$N"
				    "*  Interlocks may be configured as Bypassable.  Bypassable Interlocks are reported$N"
				    "separately; the destination object can use this information to bypass these$N"
				    "Interlocks in Maintenance Mode or upon command.$N"
				    "*  First-Out reporting indicates the first condition that$N"
				    "caused the running equipment to be tripped.$N"
				    "* For each Interlock condition, a Tag may be defined for navigation. Clicking$N"
				    "the Interlock description will call up the associated Tag$'s Faceplate.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added string for Cfg_Area, Val_FirstOutTxt; renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)[LOWER(Cfg_Desc,Cfg_Label) LOWER(Cfg_Tag,Cfg_Area) CONCAT(HMI_Lib,HMI_Type,Val_FirstOutTxt) ,LOWER(Cfg_CondTxt[0],Cfg_CondTxt[1]) LOWER(Cfg_CondTxt[2],Cfg_CondTxt[3]) LOWER(Cfg_CondTxt[4],Cfg_CondTxt[5]) LOWER(Cfg_CondTxt[6],Cfg_CondTxt[7]) ,LOWER(Cfg_CondTxt[8],Cfg_CondTxt[9]) LOWER(Cfg_CondTxt[10],Cfg_CondTxt[11]) LOWER(Cfg_CondTxt[12],Cfg_CondTxt[13]) LOWER(Cfg_CondTxt[14],Cfg_CondTxt[15]) ,LOWER(Cfg_NavTag[0],Cfg_NavTag[1]) LOWER(Cfg_NavTag[2],Cfg_NavTag[3]) LOWER(Cfg_NavTag[4],Cfg_NavTag[5]) LOWER(Cfg_NavTag[6],Cfg_NavTag[7]) ,LOWER(Cfg_NavTag[8],Cfg_NavTag[9]) LOWER(Cfg_NavTag[10],Cfg_NavTag[11]) LOWER(Cfg_NavTag[12],Cfg_NavTag[13]) LOWER(Cfg_NavTag[14],Cfg_NavTag[15]) ];
				RC: "============================================================$N"
				    "INPUT GATHERING$N"
				    "============================================================$N"
				    "This object uses word-wise logic.  The 16 interlock inputs are aliased$N"
				    "to the Wrk_Inp word, so no logic is needed to collect the individual$N"
				    "conditions.  We can immediately start processing the interlock logic.$N"
				    "============================================================$N"
				    "HANDLE $QOK STATE$Q INVERSIONS$N"
				    "============================================================$N"
				    "This rung inverts the Input bits whose $QOK State$Q is 1 (0 to Stop).$N"
				    "The resulting Wrk_Inp word is ZERO if all interlock inputs are $QOK$Q.";
				N: LBL(SkipText)XOR(Wrk_Inp,Cfg_OKState,Wrk_InpInv);
				RC: "============================================================$N"
				    "COMMAND PROCESSING$N"
				    "============================================================$N"
				    "On receipt of a Reset Command, the output$N"
				    "Interlock Status (internal copy, actually) is cleared.$N"
				    "(Later logic may fill this in again if some Interlock conditions are true...)$N"
				    "$N"
				    "NOTE:  This object is $QModeless$Q -- Operator and Program Commands$N"
				    "are accepted at any time.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(Inp_Reset) ]CLR(Wrk_Sts);
				RC: "If the Latch Defeat Input is ON (say, motor not running) and the stored interlock$N"
				    "status is clear (typically, after we get a reset in the rung above),$N"
				    "switch to $Qnot latching$Q for all interlock inputs (regardless of Cfg_Latched).$N"
				    "$N"
				    "This has the effect of keeping the Latch Enable work bit ON until a Reset is received.$N"
				    "Hence this is part of the $Qreset command processing$Q logic....";
				N: EQU(Wrk_Sts,0)XIC(Inp_LatchDefeat)OTU(Wrk_LatchEnable);
				RC: "============================================================$N"
				    "INTERLOCK PROCESSING$N"
				    "============================================================$N"
				    "This rung clears any bits in the stored Interlock status for which the$N"
				    "Input bit is OFF and the bit is NOT configured as Latched.$N"
				    "$N"
				    "If the LatchDefeat input in OFF, set the internal Latch Enable work bit.$N"
				    "If this bit is ON, don$'t clear any latched bits with this rung (keep them latched).$N"
				    "If this bit is OFF, clear any bits that are NOT on in the input, whether$N"
				    "configured for latching or not!";
				N: [XIO(Inp_LatchDefeat) OTL(Wrk_LatchEnable) ,XIC(Wrk_LatchEnable) OR(Cfg_Latched,Wrk_InpInv,Wrk_Intlk) ,XIO(Wrk_LatchEnable) MOV(Wrk_InpInv,Wrk_Intlk) ]AND(Wrk_Sts,Wrk_Intlk,Wrk_Sts);
				RC: "This rung SETS Interlock status bits for any Interlock condition Input that is true.";
				N: OR(Wrk_Sts,Wrk_InpInv,Wrk_Sts);
				RC: "Individual Interlock Bypasses can only be set for conditions that are$N"
				    "configured as Bypassable.  This AND clears all the MSets for inputs$N"
				    "that are NOT Bypassable.$N"
				    "$N"
				    "The internal Non-Bypassable Interlocks word has bits set only if the Input is TRUE$N"
				    "AND the bit is configured as a NON-bypassable Interlock OR NOT bypassed..";
				N: AND(MSet_Bypass,Cfg_Bypassable,MSet_Bypass)NOT(MSet_Bypass,Wrk_NB)AND(Wrk_Sts,Wrk_NB,Wrk_NB);
				RC: "Clear the First Out status and text when the Latch Defeat input turns off (One-Shot).$N"
				    "This generally occurs when the downstream device STARTS.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added Val_FirstOutTxt string (Local, read-only) for use in IntlkTrip alarm message.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified conditions for clearing first-out status and text.  #####";
				N: XIO(Inp_LatchDefeat)ONS(Wrk_NonIntlkStop)CLR(Wrk_FirstOut)FLL(0,Val_FirstOutTxt,1);
				RC: "If an interlock condition occurs (which interlocks depends on the$N"
				    "bypass status!) and the Latch Defeat input is NOT set,$N"
				    "the equipment is running and will be shut down.$N"
				    "If this happens, record the First Out status.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added Val_FirstOutTxt string (Local, read-only) for use in IntlkTrip alarm message.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Changed type of Val_FirstOutTxt to STRING_Cond.  #####";
				N: [XIO(Inp_BypActive) NEQ(Wrk_Sts,0) ,XIC(Inp_BypActive) NEQ(Wrk_NB,0) ]XIO(Inp_LatchDefeat)ONS(Wrk_SetFirstOut)[XIO(Inp_BypActive) CPT(Wrk_FirstOut,(Wrk_Sts)AND(NOT(Wrk_PrevSts))) ,XIC(Inp_BypActive) CPT(Wrk_FirstOut,(Wrk_NB)AND(NOT(Wrk_PrevSts))) ,NEQ(Wrk_FirstOut,0) [XIC(Wrk_FirstOut.15) COP(Cfg_CondTxt[15],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.14) COP(Cfg_CondTxt[14],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.13) COP(Cfg_CondTxt[13],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.12) COP(Cfg_CondTxt[12],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.11) COP(Cfg_CondTxt[11],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.10) COP(Cfg_CondTxt[10],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.9) COP(Cfg_CondTxt[9],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.8) COP(Cfg_CondTxt[8],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.7) COP(Cfg_CondTxt[7],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.6) COP(Cfg_CondTxt[6],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.5) COP(Cfg_CondTxt[5],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.4) COP(Cfg_CondTxt[4],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.3) COP(Cfg_CondTxt[3],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.2) COP(Cfg_CondTxt[2],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.1) COP(Cfg_CondTxt[1],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.0) COP(Cfg_CondTxt[0],Val_FirstOutTxt,1) ] ];
				RC: "The value used for $QFirst Out$Q generation this scan is stored$N"
				    "as the $Qprevious$Q value for use in the above logic next scan.";
				N: [XIO(Inp_BypActive) MOV(Wrk_Sts,Wrk_PrevSts) ,XIC(Inp_BypActive) MOV(Wrk_NB,Wrk_PrevSts) ];
				RC: "============================================================$N"
				    "STATUS GENERATION$N"
				    "============================================================$N"
				    "This rung generates the public Status for this object.$N"
				    "If all the Interlock Status bits are zero, there is no condition to$N"
				    "shut down the affected equipment.  In that case, show the Interlock Status as $QOK$Q$N"
				    "$N"
				    "Similar logic applies for the Non-Bypassable Interlocks OK Status.$N"
				    "$N"
				    "Also show the individual Interlock Status bits and the First Out Status bits.$N"
				    "$N"
				    "NOTE:  Working registers are used to prevent outside writes to the Sts_xxx$N"
				    "parameters from affecting the state of this object!";
				N: [[EQU(Wrk_Sts,0) OTE(Sts_IntlkOK) ,EQU(Wrk_NB,0) OTE(Sts_NBIntlkOK) ] ,XIC(Inp_BypActive) OTE(Sts_BypActive) ,MOV(Wrk_Sts,Sts_Intlk) ,MOV(Wrk_FirstOut,Sts_FirstOut) ];
				RC: "============================================================$N"
				    "COMMAND READIES$N"
				    "============================================================$N"
				    "This Interlock ojbect is ready for (needs) a RESET Command$N"
				    "if any Latched Interlocks are SET.";
				N: CMP((NOT(Wrk_InpInv))AND(Wrk_Sts)AND(Cfg_Latched))OTE(ORdy_Reset);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, clear any $Qlurking$Q Commands.";
				N: OTU(OCmd_Reset)OTU(PCmd_Reset);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION CM_MFC (Description := "Control Valve Module",
	                                      Revision := "1.1",
	                                      RevisionNote := "1.0 Published$N1.1 It now uses the P_ValveC block",
	                                      Vendor := "AES Inc.",
	                                      ExecutePrescan := No,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := No,
	                                      CreatedDate := "2020-04-01T07:21:38.529Z",
	                                      CreatedBy := "VMW\ahalford",
	                                      EditedDate := "2021-02-03T17:32:08.593Z",
	                                      EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                      SoftwareRevision := "v32.03")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			ControlValve : P_ValveC (Description := "Control Valve",
			                        Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			Intlk : P_Intlk (Usage := InOut,
			                 Required := Yes,
			                 Visible := Yes);
			OwnerID : DINT (Description := "Agitator CM Owner ID",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			Sts_Available : BOOL (Description := "Agitator Control Module is Available For Control",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_CMOwned : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			SPDev : REAL (Description := "Setpoint Deviation Allowed",
			                 Usage := Input,
			                 RADIX := Float,
			                 Required := No,
			                 Visible := No,
			                 DefaultData := 0.00000000e+000);
			Val_AlarmState : DINT (Description := "Alarm State$N20 = Interlock Active$N21 = Loop Failure$N22 = IO Fault",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_InPosition : BOOL (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_Closed : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			SPDev_HiHiLimit : REAL (Description := "Setpoint Deveation HiHi Limit",
			                          RADIX := Float,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0.00000000e+000);
			SPDev_LoLoLimit : REAL (Description := "Setpoint Deveation LoLo Limit",
			                          RADIX := Float,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0.00000000e+000);
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "============================================================$N"
				    "Control Valve Control Module $N"
				    "============================================================";
				N: NOP();
				N: XIC(s:fs)MOV(0,OwnerID);
				N: [MOV(OwnerID,ControlValve.PSet_Owner) ,NEQ(OwnerID,0) OTE(Sts_CMOwned) ,EQU(OwnerID,0) OTE(Sts_Available) ];
				N: [XIC(ControlValve.Cfg_HasPosFdbk) LIM(SPDev_LoLoLimit,ControlValve.Val_Pos,SPDev_HiHiLimit) ,XIO(ControlValve.Cfg_HasPosFdbk) ]OTE(Sts_InPosition);
				N: [XIC(ControlValve.Cfg_HasPosFdbk) EQU(ControlValve.Val_Pos,0) ,XIO(ControlValve.Cfg_HasPosFdbk) EQU(ControlValve.Val_CVOut,0) ]OTE(Sts_Closed);
				RC: "Interlock Mapping Logic";
				N: XIC(Intlk.Sts_IntlkOK)OTE(ControlValve.Inp_IntlkOK);
				RC: "Alarms";
				N: [XIO(Intlk.Sts_IntlkOK) MOV(20,Val_AlarmState) ,XIC(ControlValve.Alm_IOFault) MOV(21,Val_AlarmState) ,XIC(ControlValve.Nrdy_IOFault) MOV(22,Val_AlarmState) ];
				RC: "Calculating the Setpoint Deviation";
				N: [ADD(ControlValve.Val_CVOut,SPDev,SPDev_HiHiLimit) ,SUB(ControlValve.Val_CVOut,SPDev,SPDev_LoLoLimit) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_VSD (Description := "Variable Speed Drive",
	                                     Revision := "4.10",
	                                     RevisionExtension := ".01 Release",
	                                     RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                     Vendor := "Rockwell Automation",
	                                     ExecutePrescan := Yes,
	                                     ExecutePostscan := No,
	                                     ExecuteEnableInFalse := Yes,
	                                     CreatedDate := "2008-03-27T19:50:50.098Z",
	                                     CreatedBy := "Not Available",
	                                     EditedDate := "2021-01-23T04:38:13.265Z",
	                                     EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                     SoftwareRevision := "v32.03",
	                                     AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction controls and monitors a Variable-Speed (AC or DC) Drive$Nand provides:$N$N*  Starting drive, stopping drive, jogging drive, setting speed reference and setting direction$N*  Monitoring of run feedback, display of actual drive status, including accel, decel, direction, speed$N*  Detection of Failure to Start, Failure to Stop, Drive Fault/Not Ready$N*  Monitoring of Permissive conditions to allow starting$N*  Monitoring of Interlock conditions to stop drive or prevent starting$N*  Simulation, providing feedback of a working drive while disabling outputs$N*  Monitoring of I/O communication faults$N*  Alarms for Fail to Start, Fail to Stop, Interlock Trip, Drive Fault/Not Ready, I/O Fault$N*  Operation in Hand, Maintenance, Override, Program and Operator Modes$N*  $QAvailable$Q status for use by automation logic to know whether drive$N      can be controlled by other objects.$N*  Horn output for audible alert prior to starting motor.$N$NCommand Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$NCommand Sources: Operator, External, Program, Override, Maintenance, Out of$NService, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$NSee 4.10 Release Notes for details.$N* Corrected handling of Start Horn on shed conditions.$N* Modified to lock out jog when jog time expires until jog commands are cleared$N* Modified to handle overlapping Horn and Jog times.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.02)$NSee 4.10 Release Notes for details.$N* Changed availability to use input availability from interlocks.$N* Added Horn Status, Horn Inhibit.$N* Updated to P_CmdSrc V4.10.00.$N* Modified simulated run feedback to handle run at zero speed ref.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.00 Release Notes for details.$N* Corrected handling Allow Local when horn is enabled.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-11)$NSee 4.00 Release Notes for details.$N* Changed $QMode$Q to $QCommand Source$Q.$N* Added audible alert on commanded start.  Added unacked alarm count.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Changed Start / Stop / Fwd / Rev / Jog to StartFwd / StartRev /Stop / JogFwd / JogRev.$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N* Aligned ready bit naming with command bit names.$N* Added configurable decimal places for display on HMI.$N* Modifications to Output Datalink clamp limit restrictions / checking.$N* Changed delay / time configuration items to REAL seconds.$N* Updated Val_Sts to common enumeration across all motors and drives.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Ref_FaultCodeList : P_DescList[1] (Description := "Tag containing List of Fault Codes (DINT) and their Descriptions (STRING)",
			                             Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			Inp_SpeedFdbk : REAL (Description := "Speed Feedbak in Drive Units (typ. 0-32767 = 0 to max freq.)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0.00000000e+000);
			Inp_LastFaultCode : DINT (Description := "Most recent drive fault code (enumeration)",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             DefaultData := 0);
			Inp_Datalink : REAL (Description := "Auxiliary Signal (datalink) Input in Drive (raw) Units",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			Inp_Ready : BOOL (Description := "1=Drive is ready to run",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 1);
			Inp_Running : BOOL (Description := "1=Drive is Running (active)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Inp_CommandDir : BOOL (Description := "1=Drive is commanded Forward, 0=Drive is commanded Reverse",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          DefaultData := 1);
			Inp_ActualDir : BOOL (Description := "1=Drive is running Forward, 0=Drive is running Reverse",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_Accelerating : BOOL (Description := "1=Drive is accelerating",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0);
			Inp_Decelerating : BOOL (Description := "1=Drive is decelerating",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0);
			Inp_Alarm : BOOL (Description := "1=Drive has an Alarm Condition (see drive display or manual)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Inp_Faulted : BOOL (Description := "1=Drive has Faulted (see drive display or manual)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Inp_AtSpeed : BOOL (Description := "1=Drive is at commanded speed",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Inp_FwdPermOK : BOOL (Description := "1=Permissives OK, drive can start Forward",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_FwdNBPermOK : BOOL (Description := "1=Non-Bypassable Permissives OK, drive can start Forward",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 1);
			Inp_RevPermOK : BOOL (Description := "1=Permissives OK, drive can start Reverse",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_RevNBPermOK : BOOL (Description := "1=Non-Bypassable Permissives OK, motor can start Reverse",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 1);
			Inp_IntlkOK : BOOL (Description := "1=Interlocks OK, drive can start/run",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 1);
			Inp_NBIntlkOK : BOOL (Description := "1=Non-Bypassable Interlocks OK, drive can start/run",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_IntlkAvail : BOOL (Description := "1 = Interlock Availibility OK",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Inp_IOFault : BOOL (Description := "Input Communication Status 0=OK, 1=fail",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Sim : BOOL (Description := "1=Simulate working drive; 0=Start/Stop/ Monitor actual drive",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Inp_Hand OF CmdSrc.Inp_Hand (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_Ovrd OF CmdSrc.Inp_Ovrd (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_OvrdCmd : DINT (Description := "Override Command: 0=None, 1=Stop, 2=Start Fwd 3=Start Rev",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_OvrdSpeed : REAL (Description := "Value to set Speed Reference in Override Mode (SpeedRef EU)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0.00000000e+000);
			Inp_OvrdOutDatalink : REAL (Description := "Value to set Output Datalink in Override Mode (OutDatalink EU)",
			                               Usage := Input,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 0.00000000e+000);
			Inp_ExtInh OF CmdSrc.Inp_ExtInh (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_HornInh : BOOL (Description := "1 = Inhibit audible alert, 0 = Alllow audible alert",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Reset : BOOL (Description := "1=Reset Shed Latches and Cleared Alarms",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_HasReverse : BOOL (Description := "1=Drive can be run reverse, 0=Forward only",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasJog : BOOL (Description := "1=Drive Jog Command enabled/visible, 0=Drive Jog Command not allowed",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_AllowLocal : BOOL (Description := "1=Allow Local Start/Stop without alarm, 0=Start/Stop from HMI/prog only",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasRunFdbk : BOOL (Description := "1=Drive provides feedback signal on Inp_Running when running",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_UseRunFdbk : BOOL (Description := "1=Drive run feedback should be used for failure checking",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasSpeedFdbk : BOOL (Description := "1=Drive provides speed feedback on Inp_SpeedFdbk",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_UseSpeedFdbk : BOOL (Description := "1=Drive speed determines running state, 0=state determined by drive Active input bit",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 1);
			Cfg_HasInpDatalink : BOOL (Description := "1=A signal is connected to Inp_Datalink",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			Cfg_HasOutDatalink : BOOL (Description := "1=A signal is connected to Out_Datalink",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			Cfg_HasFwdPermObj : BOOL (Description := "1=Tells HMI a P_Perm is connected to Inp_FwdPerm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_HasRevPermObj : BOOL (Description := "1=Tells HMI a P_Perm is connected to Inp_RevPerm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_HasIntlkObj : BOOL (Description := "1=Tells HMI a P_Intlk is connected to Inp_Intlk",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HasResInhObj : BOOL (Description := "1=Tells HMI a P_ResInh Restart Inhibit is connected",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_HasRunTimeObj : BOOL (Description := "1=Tells HMI a P_RunTime is connected",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_SetTrack : BOOL (Description := "1=Settings track for unselected sources, 0=no tracking",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1);
			Cfg_SetTrackOvrdHand : BOOL (Description := "1=Prog/Oper/Ext Settings track Override/Hand",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0);
			Cfg_OperStopPrio : BOOL (Description := "1=OCmd_Stop any time, 0=OCmd_Stop only when Oper selected",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_ExtStopPrio : BOOL (Description := "1=XCmd_Stop any time, 0=XCmd_Stop only when Ext selected",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_OCmdResets : BOOL (Description := "1=New drive OCmd resets shed latches and cleared alarms, 0=OCmdReset req$'d.",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_XCmdResets : BOOL (Description := "1=New drive XCmd resets shed latches and cleared alarms, 0=XCmdReset req$'d.",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_OvrdPermIntlk : BOOL (Description := "1=Override ignores Bypassable Perm/ Intlk; 0=always use Perm/Intlk",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_ShedOnFailToStart : BOOL (Description := "1=Stop Motor and Alarm on Fail to Start; 0=Alarm only on Fail to Start",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 1);
			Cfg_ShedOnIOFault : BOOL (Description := "1=Stop Motor and Alarm on I/O Fault; 0=Alarm only on I/O Fault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1);
			Cfg_SimScaleEU : BOOL (Description := "1=In simulation, scale Speed Ref EU to Speed Fdbk EU",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_SimScaleRaw : BOOL (Description := "1=In simulation, scale Speed Ref EU to raw, then raw to Speed Fdbk EU",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_DecPlcs : DINT (Description := "Number of decimal places for speed ref/fdbk display (0..6)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 2);
			Cfg_InpDLDecPlcs : DINT (Description := "Number of decimal places for Input Datalink display (0..6)",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 2);
			Cfg_OutDLDecPlcs : DINT (Description := "Number of decimal places for Output Datalink display (0..6)",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 2);
			Cfg_HasFailToStartAlm OF FailToStart.Cfg_Exists (Description := "1=Fail to Start Alarm exists and will be checked",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_HasFailToStopAlm OF FailToStop.Cfg_Exists (Description := "1=Fail to Stop Alarm exists and will be checked",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_HasIntlkTripAlm OF IntlkTrip.Cfg_Exists (Description := "1=Interlock Trip Alarm exists and will be checked",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_HasDriveFaultAlm OF DriveFault.Cfg_Exists (Description := "1=Drive Fault alarm exists and will be checked",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_HasIOFaultAlm OF IOFault.Cfg_Exists (Description := "1=I/O Fault Alarm exists and will be checked",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_FailToStartResetReqd OF FailToStart.Cfg_ResetReqd (Description := "1=Reset requied to clear Fail to Start Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			Cfg_FailToStopResetReqd OF FailToStop.Cfg_ResetReqd (Description := "1=Reset required to clear Fail to Stop Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			Cfg_IntlkTripResetReqd OF IntlkTrip.Cfg_ResetReqd (Description := "1=Reset required to clear Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_DriveFaultResetReqd OF DriveFault.Cfg_ResetReqd (Description := "1=Reset required to clear Drive Fault Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			Cfg_IOFaultResetReqd OF IOFault.Cfg_ResetReqd (Description := "1=Reset required to clear I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_FailToStartAckReqd OF FailToStart.Cfg_AckReqd (Description := "1=Acknowledge required for Fail to Start Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_FailToStopAckReqd OF FailToStop.Cfg_AckReqd (Description := "1=Acknowledge required for Fail to Stop Alarm",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_IntlkTripAckReqd OF IntlkTrip.Cfg_AckReqd (Description := "1=Acknowledge required for Interlock Trip Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_DriveFaultAckReqd OF DriveFault.Cfg_AckReqd (Description := "1=Acknowledge required for Drive Fault Alarm",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_IOFaultAckReqd OF IOFault.Cfg_AckReqd (Description := "1=Acknowledge required for I/O Fault Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_FailToStartSeverity OF FailToStart.Cfg_Severity (Description := "Fail To Start Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			Cfg_FailToStopSeverity OF FailToStop.Cfg_Severity (Description := "Fail To Stop Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_IntlkTripSeverity OF IntlkTrip.Cfg_Severity (Description := "Interlock Trip Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_DriveFaultSeverity OF DriveFault.Cfg_Severity (Description := "Drive Fault Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_IOFaultSeverity OF IOFault.Cfg_Severity (Description := "I/O Fault Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_MinSpdRef : REAL (Description := "Minimum Speed Reference in EU (for limiting)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0.00000000e+000);
			Cfg_MaxSpdRef : REAL (Description := "Maximum Speed Reference in EU (for limiting)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 6.00000000e+001);
			Cfg_SpeedRefRawMin : REAL (Description := "Speed Reference Minimum in Drive (raw) Units (for scaling)",
			                              Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0.00000000e+000);
			Cfg_SpeedRefRawMax : REAL (Description := "Speed Reference Maximum in Drive (raw) Units (for scaling)",
			                              Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 3.27670000e+004);
			Cfg_SpeedRefEUMin : REAL (Description := "Speed Reference Minimum in Engineering Units (for scaling)",
			                             Usage := Input,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0.00000000e+000);
			Cfg_SpeedRefEUMax : REAL (Description := "Speed Reference Maximum in Engineering Units (for scaling)",
			                             Usage := Input,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1.30000000e+002);
			Cfg_SpeedFdbkRawMin : REAL (Description := "Speed Feedback Minimum in Drive (raw) Units (for scaling)",
			                               Usage := Input,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 0.00000000e+000);
			Cfg_SpeedFdbkRawMax : REAL (Description := "Speed Feedback Maximum in Drive (raw) Units (for scaling)",
			                               Usage := Input,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 3.27670000e+004);
			Cfg_SpeedFdbkEUMin : REAL (Description := "Speed Feedback Minimum in Engineering Units (for scaling)",
			                              Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0.00000000e+000);
			Cfg_SpeedFdbkEUMax : REAL (Description := "Speed Feedback Maximum in Engineering Units (for scaling)",
			                              Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 1.30000000e+002);
			Cfg_InpDatalinkRawMin : REAL (Description := "Input Datalink Minimum in Drive (raw) Units (for scaling)",
			                                 Usage := Input,
			                                 RADIX := Float,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0.00000000e+000);
			Cfg_InpDatalinkRawMax : REAL (Description := "Input Datalink Maximum in Drive (raw) Units (for scaling)",
			                                 Usage := Input,
			                                 RADIX := Float,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 4.09500000e+003);
			Cfg_InpDatalinkEUMin : REAL (Description := "Input Datalink Minimum in Engineering Units (for scaling)",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0.00000000e+000);
			Cfg_InpDatalinkEUMax : REAL (Description := "Input Datalink Maximum in Engineering Units (for scaling)",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 4.09500000e+002);
			Cfg_OutDatalinkMin : REAL (Description := "Minimum Output Datalink in EU (for limiting)",
			                              Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0.00000000e+000);
			Cfg_OutDatalinkMax : REAL (Description := "Maximum Output Datalink in EU (for limiting)",
			                              Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 1.00000000e+002);
			Cfg_OutDatalinkRawMin : REAL (Description := "Output Datalink Minimum in Drive (raw) Units (for scaling)",
			                                 Usage := Input,
			                                 RADIX := Float,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0.00000000e+000);
			Cfg_OutDatalinkRawMax : REAL (Description := "Output Datalink Maximum in Drive (raw) Units (for scaling)",
			                                 Usage := Input,
			                                 RADIX := Float,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 4.09500000e+003);
			Cfg_OutDatalinkEUMin : REAL (Description := "Output Datalink Minimum in Engineering Units (for scaling)",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0.00000000e+000);
			Cfg_OutDatalinkEUMax : REAL (Description := "Output Datalink Maximum in Engineering Units (for scaling)",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 4.09500000e+002);
			Cfg_StartHornT : REAL (Description := "Time to sound audible on commanded start (sec) (0=disabled)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0.00000000e+000);
			Cfg_SimRampT : REAL (Description := "Time to ramp speed fdbk when in Simulation (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+001);
			Cfg_FailToStartT : REAL (Description := "Time after Start to get Run Feedback before Fault (sec)",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 1.50000000e+001);
			Cfg_FailToStopT : REAL (Description := "Time after Stop to drop Run Feedback before Fault (sec)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 1.50000000e+001);
			Cfg_ResetPulseT : REAL (Description := "Time to pulse Out_Reset to clear drive fault",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 2.00000000e+000);
			Cfg_MaxJogT : REAL (Description := "Maximum jog time (sec, 0=unlimited)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			Cfg_OperKeep : SINT (Description := "Oper keeps control in Prog / Ext: .0=Reference, .1=Start/Stop/Fwd/ Rev, .3=OutDatalink",
			                        Usage := Input,
			                        RADIX := Binary,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_ProgKeep : SINT (Description := "Prog keeps control in Oper / Ext: .0=Reference, .1=Start/Stop/Fwd/ Rev, .3=OutDatalink",
			                        Usage := Input,
			                        RADIX := Binary,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_ExtKeep : SINT (Description := "Ext keeps control in Prog / Oper: .0=Reference, .1=Start/Stop/Fwd/ Rev, .3=OutDatalink",
			                       Usage := Input,
			                       RADIX := Binary,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			PSet_SpeedRef : REAL (Description := "Program Setting of Speed Reference (EU)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0.00000000e+000);
			PSet_OutDatalink : REAL (Description := "Program Setting of Output Datalink (EU)",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0.00000000e+000);
			PSet_Owner : DINT (Description := "Program Owner Request ID (non-zero) or Release (zero)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			XSet_SpeedRef : REAL (Description := "External Setting of Speed Reference (EU)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0.00000000e+000);
			XSet_OutDatalink : REAL (Description := "External Setting of Output Datalink (EU)",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0.00000000e+000);
			PCmd_StartFwd : BOOL (Description := "Program Command to Start Drive Forward",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			PCmd_StartRev : BOOL (Description := "Program Command to Start Drive Reverse",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			PCmd_Stop : BOOL (Description := "Program Command to Stop Drive",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			PCmd_Prog OF CmdSrc.PCmd_Prog (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Oper OF CmdSrc.PCmd_Oper (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Lock OF CmdSrc.PCmd_Lock (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Unlock OF CmdSrc.PCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Normal OF CmdSrc.PCmd_Normal (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Reset : BOOL (Description := "Program Command to Reset drive fault and all Alarms requiring Reset",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_FailToStartAck OF FailToStart.PCmd_Ack (Description := "Program Command to Acknowledge Fail to Start Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_FailToStartSuppress OF FailToStart.PCmd_Suppress (Description := "Program Command to Suppress Fail to Start Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_FailToStartUnsuppress OF FailToStart.PCmd_Unsuppress (Description := "Program Command to Unsuppress Fail to Start Alarm",
			                                      Usage := Input,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No);
			PCmd_FailToStartUnshelve OF FailToStart.PCmd_Unshelve (Description := "Program Command to Unshelve Fail to Start Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_FailToStopAck OF FailToStop.PCmd_Ack (Description := "Program Command to Acknowledge Fail to Stop Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_FailToStopSuppress OF FailToStop.PCmd_Suppress (Description := "Program Command to Suppress Fail to Stop Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			PCmd_FailToStopUnsuppress OF FailToStop.PCmd_Unsuppress (Description := "Program Command to Unsuppress Fail to Stop Alarm",
			                                     Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			PCmd_FailToStopUnshelve OF FailToStop.PCmd_Unshelve (Description := "Program Command to Unshelve Fail to Stop Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			PCmd_IntlkTripAck OF IntlkTrip.PCmd_Ack (Description := "Program Command to Acknowledge Interlock Trip Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_IntlkTripSuppress OF IntlkTrip.PCmd_Suppress (Description := "Program Command to Suppress Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IntlkTripUnsuppress OF IntlkTrip.PCmd_Unsuppress (Description := "Program Command to Unsuppress Interlock Trip Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_IntlkTripUnshelve OF IntlkTrip.PCmd_Unshelve (Description := "Program Command to Unshelve Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_DriveFaultAck OF DriveFault.PCmd_Ack (Description := "Program Command to Acknowledge Drive Fault Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_DriveFaultSuppress OF DriveFault.PCmd_Suppress (Description := "Program Command to Suppress Drive Fault Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			PCmd_DriveFaultUnsuppress OF DriveFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress Drive Fault Alarm",
			                                     Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			PCmd_DriveFaultUnshelve OF DriveFault.PCmd_Unshelve (Description := "Program Command to Unshelve Drive Fault Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			PCmd_IOFaultAck OF IOFault.PCmd_Ack (Description := "Program Command to Acknowledge I/O Fault Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_IOFaultSuppress OF IOFault.PCmd_Suppress (Description := "Program Command to Suppress I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_IOFaultUnsuppress OF IOFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress I/O Fault Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultUnshelve OF IOFault.PCmd_Unshelve (Description := "Program Command to Unshelve I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			MCmd_Rel OF CmdSrc.MCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			OCmd_Unlock OF CmdSrc.OCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			XCmd_StartFwd : BOOL (Description := "External Command to Start Drive Forward",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			XCmd_StartRev : BOOL (Description := "External Command to Start Drive Reverse",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			XCmd_Stop : BOOL (Description := "External Command to Stop Drive",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			XCmd_JogFwd : BOOL (Description := "External Command to Jog Drive Forward",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			XCmd_JogRev : BOOL (Description := "External Command to Jog Drive Reverse",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			XCmd_Acq OF CmdSrc.XCmd_Acq (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Rel OF CmdSrc.XCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Reset : BOOL (Description := "Ext Cmd to clear shed latches and cleared alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Out_SpeedRef : REAL (Description := "Drive Speed Reference in Drive Units (typ. 0-32767 = 0 to max freq.)",
			                        Usage := Output,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0.00000000e+000);
			Out_Datalink : REAL (Description := "Auxiliary Signal (datalink) Output in Drive (raw) Units",
			                        Usage := Output,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0.00000000e+000);
			Out_Run : BOOL (Description := "1=Start/Run Drive, 0=Stop Drive (for held starter type)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Out_Stop : BOOL (Description := "1=Stop Drive, 0=drive left in current state",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Out_Start : BOOL (Description := "1=Start Drive, 0=drive left in current state",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Out_Jog : BOOL (Description := "1=Jog drive at Jog Speed, -->0=stop jogging",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Out_ClearFault : BOOL (Description := "1=Attempt to clear Drive Fault",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Out_Fwd : BOOL (Description := "1=Set drive direction to Forward",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Out_Rev : BOOL (Description := "1=Set drive direction to Reverse",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Out_Horn : BOOL (Description := "1=Sound audible prior to commanded motor start",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Val_SpeedRef : REAL (Description := "Speed Reference (target) to drive",
			                        Usage := Output,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0.00000000e+000);
			Val_SpeedFdbk : REAL (Description := "Speed Feedback (actual) from drive",
			                         Usage := Output,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0.00000000e+000);
			Val_InpDatalink : REAL (Description := "Input Datalink value from drive",
			                           Usage := Output,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0.00000000e+000);
			Val_OutDatalink : REAL (Description := "Output Datalink value to drive",
			                           Usage := Output,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0.00000000e+000);
			Val_SpeedRefEUMin : REAL (Description := "Minimum of Speed Reference = MIN (Cfg_SpeedFdbkEUMin, Cfg_SpeedFdbkEUMax)",
			                             Usage := Output,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0.00000000e+000);
			Val_SpeedRefEUMax : REAL (Description := "Maximum of Speed Reference = MAX (Cfg_SpeedFdbkEUMin, Cfg_SpeedFdbkEUMax)",
			                             Usage := Output,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 1.30000000e+002);
			Val_SpeedFdbkEUMin : REAL (Description := "Minimum of Speed Feedback = MIN (Cfg_SpeedFdbkEUMin, Cfg_SpeedFdbkEUMax)",
			                              Usage := Output,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0.00000000e+000);
			Val_SpeedFdbkEUMax : REAL (Description := "Maximum of Speed Feedback = MAX (Cfg_SpeedFdbkEUMin, Cfg_SpeedFdbkEUMax)",
			                              Usage := Output,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read Only,
			                              DefaultData := 1.30000000e+002);
			Val_LastFaultCode : DINT (Description := "Most recent drive fault code (enumeration)",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			SrcQ_IO : DINT (Description := "Source and Quality of primary I/O (enumeration)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			SrcQ : DINT (Description := "Source and Quality of primary Val/Sts (enumeration)",
			                Usage := Output,
			                RADIX := Decimal,
			                Required := No,
			                Visible := No,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
			Val_Cmd : DINT (Description := "Device Command 0=None, 1=Stop, 2=StartFwd 3=StartRev 4=JogFwd 5=JogRev",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fdbk : DINT (Description := "Device Feedback 0=Stopped, 1=Running Fwd 2=Running Rev 3=Accelerating 4=Decelerating",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Val_Sts : DINT (Description := "Device Sts: 0=? 1=Stopped 2=RunFwd 3=RunRev 4=RunSlow 5=StartFwd 6=StartRev 7=StartSlow 8=JogFwd 9=JogRev 10=Stopping",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fault : DINT (Description := "Device Fault Status 0=None, 16=Fail to Start, 17 = Fail to Stop, 18=Drive Fault, 32=I/O Fault, 34=Config Error",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : DINT (Description := "Highest Alarm prio and ack status this object + channel (enum)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : DINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_Owner : DINT (Description := "Current Object Owner ID (0=not owned)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Stopped : BOOL (Description := "1=Drive requested to stop and is confirmed stopped",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_StartingFwd : BOOL (Description := "1=Drive requested to run forward and awaiting run feedback",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Sts_StartingRev : BOOL (Description := "1=Drive requested to run reverse and awaiting run feedback",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Sts_RunningFwd : BOOL (Description := "1=Drive requested to run and is confirmed running forward",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_RunningRev : BOOL (Description := "1=Drive requested to run and is confirmed running reverse",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_StoppingFwd : BOOL (Description := "1=Drive running forward requested to stop and awaiting stopped feedback",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Sts_StoppingRev : BOOL (Description := "1=Drive running reverse requested to stop and awaiting stopped feedback",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Sts_JoggingFwd : BOOL (Description := "1=Drive requested to Jog Forward",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_JoggingRev : BOOL (Description := "1=Drive requested to Jog Reverse",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_Horn : BOOL (Description := "1=Motor Horn Active",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_CommandDir : BOOL (Description := "1=Drive commanded to Forward, 0=Reverse",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_ActualDir : BOOL (Description := "1=Drive Actual direction is Forward, 0=Reverse",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Accel : BOOL (Description := "1=Drive is Accelerating",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Decel : BOOL (Description := "1=Drive is Decelerating",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_NotReady : BOOL (Description := "1=Drive is Not Ready (cannot be started)$NCheck alarms, stops, faults",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_Alarm : BOOL (Description := "1=Drive has an Alarm (see drive display or manual)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_AtSpeed : BOOL (Description := "1=Drive is running at reference speed",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_SpeedLimited : BOOL (Description := "1=Speed Reference Setting exceeds configured Max/Min limit",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Sts_Available : BOOL (Description := "1=Drive available for control by automation (Prog)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Bypass : BOOL (Description := "1=Bypassable Interlocks and Permissives are Bypassed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_BypActive : BOOL (Description := "1=Bypassing Active (Bypassed or Maintenance)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_NotRdy : BOOL (Description := "1=Device Not Ready, see detail bits for reason",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_CfgErr : BOOL (Description := "1=Device Not Ready: Configuration Error",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Nrdy_DriveNR : BOOL (Description := "1=Device Note Ready: Drive Not Ready",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Nrdy_Fail : BOOL (Description := "1=Device Not Ready: Device Failure (Shed Requires Reset)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Nrdy_Intlk : BOOL (Description := "1=Device Not Ready: Interlock Not OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_IOFault : BOOL (Description := "1=Device Not Ready: I/O Fault (Shed Requires Reset)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Nrdy_OoS : BOOL (Description := "1=Device Not Ready: Device is Out of Service",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Nrdy_Perm : BOOL (Description := "1=Device Not Ready: Permissive Not OK",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Nrdy_PrioStop : BOOL (Description := "1=Device Not Ready: Oper/Ext Priority Stop Requires Reset",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Nrdy_Trip : BOOL (Description := "1=Device not Ready: Deivce Tripped (Drive Fault)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=A Maintenance Bypass is Active, display icon",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=An Alarm is Shelved, Disabled or Suppressed, display icon",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: Invalid Check or Reset Pulse Time (use 0 to 2147483)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_Sim : BOOL (Description := "1=Error in Config: simulation timer preset: use 0 to 2147483)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time, Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_FdbkRaw : BOOL (Description := "1=Erron in Config: Speed Fdbk Raw Min = Max",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Err_FdbkEU : BOOL (Description := "1=Error in Config: Speed Fdbk EU Min = Max",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Err_RefLim : BOOL (Description := "1=Error in Config: Speed Ref Limit Min > Max",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Err_RefEU : BOOL (Description := "1=Error in Config: Speed Ref EU Min = Max",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_RefRaw : BOOL (Description := "1=Error in Config: Speed Ref Raw Min = Max",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Err_InpDLRaw : BOOL (Description := "1=Error in Config: Input Datalink Raw Min = Max",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Err_InpDLEU : BOOL (Description := "1=Error in Config: Input Datalink EU Min = Max",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Err_OutDLLim : BOOL (Description := "1=Error in Config: Output Datalink Limits Min > Max",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Err_OutDLEU : BOOL (Description := "1=Error in Config: Output Datalink EU Min = Max",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Err_OutDLRaw : BOOL (Description := "1=Error in Config: Output Datalink Raw Min = Max",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_Hand OF CmdSrc.Sts_Hand (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OoS OF CmdSrc.Sts_OoS (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Maint OF CmdSrc.Sts_Maint (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only);
			Sts_Ovrd OF CmdSrc.Sts_Ovrd (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_Ext OF CmdSrc.Sts_Ext (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Prog OF CmdSrc.Sts_Prog (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_ProgLocked OF CmdSrc.Sts_ProgLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Oper OF CmdSrc.Sts_Oper (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OperLocked OF CmdSrc.Sts_OperLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Normal OF CmdSrc.Sts_Normal (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_ExtReqInh OF CmdSrc.Sts_ExtReqInh (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_ProgReqInh OF CmdSrc.Sts_ProgReqInh (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_MAcqRcvd OF CmdSrc.Sts_MAcqRcvd (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_FailToStart OF FailToStart.Inp (Description := "1=Drive Failed to Start (One-Shot)",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Alm_FailToStart OF FailToStart.Alm (Description := "1=Drive Fail to Start Alarm",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Ack_FailToStart OF FailToStart.Ack (Description := "1=Fail to Start Alarm has been acknowledged",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Sts_FailToStartDisabled OF FailToStart.Disabled (Description := "1=Fail to Start Alarm has been Disabled by Maintenance",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_FailToStartShelved OF FailToStart.Shelved (Description := "1=Fail to Start Alarm has been Shelved by Operator",
			                                  Usage := Output,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read/Write);
			Sts_FailToStartSuppressed OF FailToStart.Suppressed (Description := "1=Fail to Start Alarm has been Suppressed by Program",
			                                     Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No,
			                                     ExternalAccess := Read/Write);
			Sts_FailToStop OF FailToStop.Inp (Description := "1=Drive Failed to Stop",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Alm_FailToStop OF FailToStop.Alm (Description := "1=Drive Fail to Stop Alarm",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Ack_FailToStop OF FailToStop.Ack (Description := "1=Fail to Stop Alarm has been acknowledged",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Sts_FailToStopDisabled OF FailToStop.Disabled (Description := "1=Fail to Stop Alarm has been Disabled by Maintenance",
			                                  Usage := Output,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read/Write);
			Sts_FailToStopShelved OF FailToStop.Shelved (Description := "1=Fail to Stop Alarm has been Shelved by Operator",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_FailToStopSuppressed OF FailToStop.Suppressed (Description := "1=Fail to Stop Alarm has been Suppressed by Program",
			                                    Usage := Output,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No,
			                                    ExternalAccess := Read/Write);
			Sts_IntlkTrip OF IntlkTrip.Inp (Description := "1=Drive was stopped by an Interlock NOT OK (One-Shot)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Alm_IntlkTrip OF IntlkTrip.Alm (Description := "1=Alarm: Drive stopped by an Interlock NOT OK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Ack_IntlkTrip OF IntlkTrip.Ack (Description := "1=Interlock Trip Alarm has been acknowledged",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_IntlkTripDisabled OF IntlkTrip.Disabled (Description := "1=Interlock Trip Alarm has been Disabled by Maintenance",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_IntlkTripShelved OF IntlkTrip.Shelved (Description := "1=Interlock Trip Alarm has been Shelved by Operator",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_IntlkTripSuppressed OF IntlkTrip.Suppressed (Description := "1=Interlock Trip Alarm has been Suppressed by Program",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_DriveFault OF DriveFault.Inp (Description := "1=Drive Fault (see drive display or manual)",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Alm_DriveFault OF DriveFault.Alm (Description := "1=Alarm: Drive Fault (see drive display or manual)",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Ack_DriveFault OF DriveFault.Ack (Description := "1=Drive Fault Alarm has been acknowledged",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Sts_DriveFaultDisabled OF DriveFault.Disabled (Description := "1=Drive Fault Alarm has been Disabled by Maintenance",
			                                  Usage := Output,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read/Write);
			Sts_DriveFaultShelved OF DriveFault.Shelved (Description := "1=Drive Fault Alarm has been Shelved by Operator",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_DriveFaultSuppressed OF DriveFault.Suppressed (Description := "1=Drive Fault Alarm has been Suppressed by Program",
			                                    Usage := Output,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No,
			                                    ExternalAccess := Read/Write);
			Sts_IOFault OF IOFault.Inp (Description := "I/O Comm Fault Status (0=OK, 1=Bad)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Alm_IOFault OF IOFault.Alm (Description := "1=I/O Fault Alarm",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Ack_IOFault OF IOFault.Ack (Description := "1=I/O Fault Alarm has been acknowledged",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_IOFaultDisabled OF IOFault.Disabled (Description := "1=I/O Fault Alarm has been Disabled by Maintenance",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_IOFaultShelved OF IOFault.Shelved (Description := "1=I/O Fault Alarm has been Shelved by Operator",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_IOFaultSuppressed OF IOFault.Suppressed (Description := "1=I/O Fault Alarm has been Suppressed by Program",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			MRdy_Rel OF CmdSrc.MRdy_Rel (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			ORdy_Unlock OF CmdSrc.ORdy_Unlock (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only);
			P_VSD : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := No,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			CmdSrc : P_CmdSrc (Description := "Drive Mode Selection",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[7649,0,0,1,0,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']]");
			IOFault : P_Alarm (Description := "I/O Fault Alarm",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			IntlkTrip : P_Alarm (Description := "Interlock Trip Alarm",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			FailToStop : P_Alarm (Description := "Drive Failed to Stop Alarm",
			                     ExternalAccess := Read/Write,
			                     DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Failed to Stop$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			FailToStart : P_Alarm (Description := "Drive Failed to Start Alarm",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Failed to Start$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[5,'P_VSD$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[19,'Motor Speed Control$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[20,'Variable Speed Drive$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_Run : BOOL (Description := "1=Drive should be $Qrunning$Q, 0=should be $Qstopped$Q",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_StartRetrigT : TIMER (Description := "Time to pulse start output on start command retrigger (Maint)",
			                           ExternalAccess := None,
			                           DefaultData := "[0,0,0]");
			Wrk_StopRetrigT : TIMER (Description := "Time to pulse stop output on stop command retrigger (Maint)",
			                          ExternalAccess := None,
			                          DefaultData := "[0,0,0]");
			Wrk_RunFdbk : BOOL (Description := "Run Feedback based on mode, simulation, etc. 1=running",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_Notify : DINT (Description := "Buffer for building Val_Notify",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_Bypass : BOOL (Description := "Internal Bypassable Permissives and Interlocks are Bypassed flag",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			DriveFault : P_Alarm (Description := "Drive Faulted Alarm",
			                     ExternalAccess := Read/Write,
			                     DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Drive Fault$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			Cfg_SpeedRefEU : STRING_8 (Description := "Speed Reference Engineering Units for display on HMI",
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[2,'Hz$00$00$00$00$00$00']");
			Wrk_SpeedRef : REAL (Description := "Working copy of Speed Reference (for limiting)",
			                       RADIX := Float,
			                       ExternalAccess := None,
			                       DefaultData := 0.00000000e+000);
			Wrk_Rev : BOOL (Description := "Working (internal) Direction 1=Reverse 0=Forward (default)",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Jog : BOOL (Description := "1=Jog Drive, 0=Drive not jogging",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_ResetT : TIMER (Description := "Reset Output Pulse Timer",
			                     ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			Wrk_ResetONS : BOOL (Description := "One-Shot to fire Reset Timer to ensure min. output ON time.",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Cfg_SpeedFdbkEU : STRING_8 (Description := "Speed Feedback Engineering Units for display on HMI",
			                          ExternalAccess := Read/Write,
			                          DefaultData := "[2,'Hz$00$00$00$00$00$00']");
			Cfg_OutDatalinkLabel : STRING_20 (Description := "Datalink Output Label displayed on faceplate",
			                               ExternalAccess := Read/Write,
			                               DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_InpDatalinkLabel : STRING_20 (Description := "Datalink Input Label displayed on faceplate",
			                               ExternalAccess := Read/Write,
			                               DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_OutDatalinkEU : STRING_8 (Description := "Datalink Output Engineering Units for display on HMI",
			                            ExternalAccess := Read/Write,
			                            DefaultData := "[0,'$00$00$00$00$00$00$00$00']");
			Cfg_InpDatalinkEU : STRING_8 (Description := "Datalink Input Engineering Units for display on HMI",
			                            ExternalAccess := Read/Write,
			                            DefaultData := "[0,'$00$00$00$00$00$00$00$00']");
			Wrk_OutDatalink : REAL (Description := "Selected Output Datalink setting",
			                          RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			Cfg_RevText : STRING_16 (Description := "Name for Reverse Direction, e.g., $QDown$Q, $QReverse$Q",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[7,'Reverse$00$00$00$00$00$00$00$00$00']");
			Cfg_FwdText : STRING_16 (Description := "Name for Forward Direction, e.g., $QUp$Q, $QForward$Q",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[7,'Forward$00$00$00$00$00$00$00$00$00']");
			Wrk_StopT : TIMER (Description := "Stop Check Timer (for Fail to Stop)",
			                    ExternalAccess := Read Only,
			                    DefaultData := "[0,0,0]");
			Wrk_StartT : TIMER (Description := "Start Check Timer (for Fail to Start)",
			                     ExternalAccess := Read Only,
			                     DefaultData := "[0,0,0]");
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_Cmd : DINT (Description := "Buffer for building Val_Cmd",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Sts : DINT (Description := "Buffer for building Val_Sts",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Fault : DINT (Description := "Buffer for building Val_Fault",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_Retrigger : BOOL (Description := "Maint Start issued while running or Stop while stopped",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_Step : REAL (Description := "Amount to change simulated Speed Fdbk this scan (ramp)",
			                   RADIX := Float,
			                   ExternalAccess := None,
			                   DefaultData := 0.00000000e+000);
			Wrk_ScanTime : REAL (Description := "Seconds since previous scan",
			                       RADIX := Float,
			                       ExternalAccess := None,
			                       DefaultData := 0.00000000e+000);
			Wrk_ScanT : TIMER (Description := "Scan Timer (milliseconds, always runs)",
			                    ExternalAccess := None,
			                    DefaultData := "[0,2147483647,0]");
			Wrk_SimFdbkTgt : REAL (Description := "Speed Ref converted to Speed Fdbk units for simulation: target speed fdbk",
			                         RADIX := Float,
			                         ExternalAccess := None,
			                         DefaultData := 0.00000000e+000);
			HMI_Type : STRING_16 (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[5,'P_VSD$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_JogT : TIMER (Description := "Jog Timer",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[0,0,0]");
			Wrk_FaultDescFSC : CONTROL (Description := "FSC control for Fault Code List search",
			                           ExternalAccess := None,
			                           DefaultData := "[0,1,0]");
			Val_FaultDesc : STRING_40 (Description := "Description of Drive Fault (given LastFaultCode)",
			                        ExternalAccess := Read Only,
			                        DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_OperKeep3ONS : BOOL (Description := "Oper Keep bit 3 one-shot store",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_OperKeep1ONS : BOOL (Description := "Oper Keep bit 1 one-shot store",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_OperKeep0ONS : BOOL (Description := "Oper Keep bit 0 one-shot store",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_ProgKeep3ONS : BOOL (Description := "Prog Keep bit 3 one-shot store",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_ProgKeep1ONS : BOOL (Description := "Prog Keep bit 1 one-shot store",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_ProgKeep0ONS : BOOL (Description := "Prog Keep bit 0 one-shot store",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			Wrk_SimScaleEUONS : BOOL (Description := "Cfg_SimScaleEU became true this scan",
			                            RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			Wrk_SimScaleRawONS : BOOL (Description := "Cfg_SimScaleRaw became true this scan",
			                             RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			Wrk_SrcQ : DINT (Description := "Register for building Source / Quality enumeration",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Val_Notify : DINT (Description := "Current Alarm Level and Acknowledgement (enumeration)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Wrk_NotRdyONS : BOOL (Description := "Assert Stop on One-Shot of Sts_NotRdy",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_NotRdy : BOOL (Description := "Device Not Ready conditions excluding shed latches",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_StartInhT : TIMER (Description := "Local Start Inhibit Timer",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			Wrk_StopInhT : TIMER (Description := "Local Stop Inhibit Timer",
			                       ExternalAccess := None,
			                       DefaultData := "[0,0,0]");
			Wrk_NoLongerSim : BOOL (Description := "Switched from Simulated to Real Drive this scan",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_Hand : BOOL (Description := "Perform Hand Mode alignment with actual device state",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			Wrk_UnackAlmC : DINT (Description := "Buffer for building Val_UnackAlmC",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_StartHornT : TIMER (Description := "Timer for audible alert or start",
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			Wrk_StartHorn : BOOL (Description := "1=Sound audible prior to commanded motor start",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_RevPermOK : BOOL (Description := "Reverse Permissives and NB Permissive OK",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_FwdPermOK : BOOL (Description := "Forward Permissives and NB Permissive OK",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			OCmd_ResetAckAll : BOOL (Description := "Oper Cmd to reset shed latches and cleared alarms, plus  Acknowledge alarms",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Oper Cmd to clear shed latches and cleared alarms",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			OCmd_JogRev : BOOL (Description := "Operator Command to Jog Drive Reverse (not cleared by instruction!)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			OCmd_JogFwd : BOOL (Description := "Operator Command to Jog Drive Forward (not cleared by instruction!)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			OCmd_Stop : BOOL (Description := "Operator Command to Stop Drive",
			                    RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			OCmd_StartRev : BOOL (Description := "Operator Command to Start Drive Reverse",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			OCmd_StartFwd : BOOL (Description := "Operator Command to Start Drive Forward",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			MCmd_Check : BOOL (Description := "Maintenance Command to Check (not bypass) all Interlocks and Permissives",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Bypass : BOOL (Description := "Maintenance Command to Bypass all Bypassable Interlocks and Permissives",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			OSet_OutDatalink : REAL (Description := "Operator Setting of Output Datalink (EU)",
			                           RADIX := Float,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0.00000000e+000);
			OSet_SpeedRef : REAL (Description := "Operator Setting of Speed Reference (EU)",
			                        RADIX := Float,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0.00000000e+000);
			ORdy_ResetAckAll : BOOL (Description := "1=Ready for OCmd_ResetAckAll (enables HMI button)",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			ORdy_JogRev : BOOL (Description := "1=Ready for OCmd_JogRev (enabled HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			ORdy_JogFwd : BOOL (Description := "1=Ready for OCmd_JogFwd (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			ORdy_Stop : BOOL (Description := "1=Ready for OCmd_Stop (enables HMI button)",
			                    RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			ORdy_StartRev : BOOL (Description := "1=Ready for OCmd_StartRev (enables HMI button)",
			                        RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			ORdy_StartFwd : BOOL (Description := "1=Ready for OCmd_StartFwd (enables HMI button)",
			                        RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			ORdy_OSet : BOOL (Description := "1=Ready for OSets (other than Speed Ref) (enables data entry fields)",
			                    RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			ORdy_SpeedRef : BOOL (Description := "1=Ready for OSet_SpeedRef (enables data entry field)",
			                        RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			MRdy_Check : BOOL (Description := "1=Ready for MCmd_Check (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Bypass : BOOL (Description := "1=Ready for MCmd_Bypass (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Wrk_ExtKeep3ONS : BOOL (Description := "Ext Keep bit 3 one-shot store",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_ExtKeep1ONS : BOOL (Description := "Ext Keep bit 1 one-shot store",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_ExtKeep0ONS : BOOL (Description := "Ext Keep bit 0 one-shot store",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_ExtHas3 : BOOL (Description := "External has Output Datalink",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_ExtHas1 : BOOL (Description := "External has Commands",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_ExtHas0 : BOOL (Description := "External has Speed Reference",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_ProgHas3 : BOOL (Description := "Program has Output Datalink",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_ProgHas1 : BOOL (Description := "Program has Commands",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_ProgHas0 : BOOL (Description := "Program has Speed Reference",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_OperHas3 : BOOL (Description := "Operator has Output Datalink",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_OperHas1 : BOOL (Description := "Operator has Commands",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_OperHas0 : BOOL (Description := "Operator has Speed Reference",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Out of Service is asserted; Outputs OFF; Run Status shown but Alarms inhibited")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    "Handle $QProgrammed Out of Servie$Q Selection using the standard$N"
				    "P_CmdSrc AOI (EnableInFalse";
				N: XIC(EnableIn)P_CmdSrc(CmdSrc);
				RC: "First-Come First-Served Ownership Arbitration still needs to happen, even when device is disabled.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "$QLurking$Q Operator and Program Commands are cleared.$N"
				    "(Lurking Acknowledge Commands are left to perform their action.)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Commands.  #####";
				N: [OTU(OCmd_StartFwd) OTU(OCmd_StartRev) OTU(OCmd_Stop) ,OTU(OCmd_JogFwd) OTU(OCmd_JogRev) ,OTU(XCmd_StartFwd) OTU(XCmd_StartRev) OTU(XCmd_Stop) ,OTU(XCmd_JogFwd) OTU(XCmd_JogRev) ,OTU(PCmd_StartFwd) OTU(PCmd_StartRev) OTU(PCmd_Stop) ,OTU(MCmd_Bypass) OTU(MCmd_Check) ,CLR(Inp_OvrdCmd) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Command Source and Commands. Added Jog function.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [OTU(ORdy_StartFwd) OTU(ORdy_StartRev) OTU(ORdy_Stop) OTU(ORdy_JogFwd) OTU(ORdy_JogRev) ,OTU(MRdy_Bypass) OTU(MRdy_Check) ,OTU(ORdy_ResetAckAll) OTU(ORdy_Reset) OTU(Sts_RdyAck) OTU(ORdy_SpeedRef) OTU(ORdy_OSet) ];
				RC: "============================================================$N"
				    "VALUES PROCESSING$N"
				    "============================================================$N"
				    "This rung outputs instruction Values:$N"
				    "$N"
				    "Val_SpeedFdbk (actual running speed), if not in simulation,$N"
				    "from Input";
				N: [[EQU(Cfg_SpeedFdbkRawMax,Cfg_SpeedFdbkRawMin) OTE(Err_FdbkRaw) ,EQU(Cfg_SpeedFdbkEUMax,Cfg_SpeedFdbkEUMin) OTE(Err_FdbkEU) ] ,XIO(Inp_Sim) XIO(Err_FdbkRaw) CPT(Val_SpeedFdbk,Cfg_SpeedFdbkEUMin+(Cfg_SpeedFdbkEUMax-Cfg_SpeedFdbkEUMin)/(Cfg_SpeedFdbkRawMax-Cfg_SpeedFdbkRawMin)*(Inp_SpeedFdbk-Cfg_SpeedFdbkRawMin)) ,[XIC(Inp_Sim) ,XIC(Err_FdbkRaw) ] CLR(Val_SpeedFdbk) ];
				RC: "This rung publishes the Values for the scaled speed feedback range.$N"
				    "If this instruction is reverse scaled by reversing the scaled (EU) min and max configurations,$N"
				    "the values are swapped so the the EUMax Value is always greater than the EUMin Value.$N"
				    "This makes the HMI bargraph and trend coding easier, and provides values$N"
				    "that can be pinned to the configuration of a PID, so the VSD and PID ranges are in lockstep.";
				N: [GEQ(Cfg_SpeedFdbkEUMax,Cfg_SpeedFdbkEUMin) MOV(Cfg_SpeedFdbkEUMin,Val_SpeedFdbkEUMin) MOV(Cfg_SpeedFdbkEUMax,Val_SpeedFdbkEUMax) ,LES(Cfg_SpeedFdbkEUMax,Cfg_SpeedFdbkEUMin) MOV(Cfg_SpeedFdbkEUMin,Val_SpeedFdbkEUMax) MOV(Cfg_SpeedFdbkEUMax,Val_SpeedFdbkEUMin) ];
				RC: "Inputs, including Input Datalink, are updated, even on false rung!$N"
				    "$N"
				    "If the Input Datalink is used, scale the value and report errors.$N"
				    "If not used, set value to zero.";
				N: [XIC(Cfg_HasInpDatalink) [[EQU(Cfg_InpDatalinkRawMax,Cfg_InpDatalinkRawMin) OTE(Err_InpDLRaw) ,EQU(Cfg_InpDatalinkEUMax,Cfg_InpDatalinkEUMin) OTE(Err_InpDLEU) ] ,XIO(Err_InpDLRaw) CPT(Val_InpDatalink,Cfg_InpDatalinkEUMin+(Cfg_InpDatalinkEUMax-Cfg_InpDatalinkEUMin)/(Cfg_InpDatalinkRawMax-Cfg_InpDatalinkRawMin)*(Inp_Datalink-Cfg_InpDatalinkRawMin)) ] ,[XIO(Cfg_HasInpDatalink) ,XIC(Err_InpDLRaw) ] CLR(Val_InpDatalink) ];
				RC: "These are the only Config Error bits we$'re checking in EnableInFalse.$N"
				    "Still, generate the summary Sts_Err for breadcrumb and Val_Sts.";
				N: [XIC(Err_FdbkRaw) ,XIC(Err_FdbkEU) ,XIC(Err_InpDLRaw) ,XIC(Err_InpDLEU) ]OTE(Sts_Err);
				RC: "The Running Forward / Running Reverse Status bits showsif the drive is running,$N"
				    "even though the drive is Out of Service (Prog) by being on a false rung.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Changed Running/Stoppped / Forward/Reverse  #####$N"
				    "#####  to Running Fwd / Running Rev / Stopped.  #####";
				N: XIO(Inp_Sim)[XIC(Cfg_UseRunFdbk) XIC(Inp_Running) ,XIO(Cfg_UseRunFdbk) CMP(ABS(Val_SpeedFdbk)>(0.001*Cfg_SpeedFdbkEUMax)) ][XIC(Inp_ActualDir) OTE(Sts_RunningFwd) ,XIO(Inp_ActualDir) OTE(Sts_RunningRev) ];
				RC: "The Stopped Status (Sts_Stopped) bit shows if the drive is stopped,$N"
				    "even though the drive is Out of Service (Prog) by being on a false rung.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Changed Running/Stoppped / Forward/Reverse  #####$N"
				    "#####  to Running Fwd / Running Rev / Stopped.  #####";
				N: XIO(Sts_RunningFwd)XIO(Sts_RunningRev)OTE(Sts_Stopped);
				RC: "The remaining actual drive status bits are passed through to Status,$N"
				    "even though the drive is Out of Service (Prog) by being on a false rung.";
				N: [[XIO(Inp_Sim) XIC(Inp_ActualDir) ,XIC(Inp_Sim) XIO(Wrk_Rev) ] OTE(Sts_ActualDir) ,[XIO(Inp_Sim) XIC(Inp_CommandDir) ,XIC(Inp_Sim) XIO(Wrk_Rev) ] OTE(Sts_CommandDir) ,XIO(Inp_Sim) [XIC(Inp_Accelerating) OTE(Sts_Accel) ,XIC(Inp_Decelerating) OTE(Sts_Decel) ,XIC(Inp_AtSpeed) OTE(Sts_AtSpeed) ,XIO(Inp_Ready) OTE(Sts_NotReady) OTE(Nrdy_DriveNR) ] ];
				RC: "If the drive is Faulted, this rung finds the Fault Description for$N"
				    "the given Fault Code within the Reference Fault Code List $N"
				    "(In/Out Parameter).  (The same Fault Code List tag$N"
				    "can be referenced by ALL instances of this instruction$N"
				    "that use the fault code -- same drive class!!!)$N"
				    "$N"
				    "1.  Find the number of entries in the Fault Code List (Array SIZE).$N"
				    "2.  Search (FSC) the Fault Code List for a matching Code.$N"
				    "3.  If found, copy the corresponding Description to Val_FaultDesc.$N"
				    "4.  If NOT found, copy list entry zero ($QNo Help Available for this code$Q).";
				N: XIC(Sts_DriveFault)[RES(Wrk_FaultDescFSC) SIZE(Ref_FaultCodeList,0,Wrk_FaultDescFSC.LEN) ,FSC(Wrk_FaultDescFSC,?,?,ALL,Ref_FaultCodeList[Wrk_FaultDescFSC.POS].Code=Inp_LastFaultCode) ,XIC(Wrk_FaultDescFSC.FD) COP(Ref_FaultCodeList[Wrk_FaultDescFSC.POS].Desc,Val_FaultDesc,1) ,XIO(Wrk_FaultDescFSC.FD) COP(Ref_FaultCodeList[0].Desc,Val_FaultDesc,1) ];
				RC: "Val_Fdbk is the current state of the device feedback, as seen on the AOI$'s Inputs:$N"
				    "0 = Stopped$N"
				    "1 = Running Forward$N"
				    "2 = Running Reverse$N"
				    "3 = Accelerating$N"
				    "4 = Decelerating$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Changed Running/Stoppped / Forward/Reverse  #####$N"
				    "#####  to Running Fwd / Running Rev / Stopped.  #####";
				N: [XIC(Sts_Stopped) XIO(Sts_Accel) XIO(Sts_Decel) CLR(Val_Fdbk) ,XIC(Sts_RunningFwd) MOV(1,Val_Fdbk) ,XIC(Sts_RunningRev) MOV(2,Val_Fdbk) ,XIC(Sts_Accel) MOV(3,Val_Fdbk) ,XIC(Sts_Decel) MOV(4,Val_Fdbk) ];
				RC: "When Out of Service, set drive to stop.";
				N: OTU(Wrk_Run)OTU(Wrk_Jog);
				RC: "Reset the fault and command retrigger timers.";
				N: RES(Wrk_StartT)RES(Wrk_StopT)RES(Wrk_JogT)RES(Wrk_StartRetrigT)RES(Wrk_StopRetrigT);
				RC: "Set drive to Stop in Programmed Out of Service (PooS).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-03:  Added Audible Alert on start.  #####";
				N: [OTU(Out_Start) OTL(Out_Stop) OTU(Out_Run) OTU(Out_Jog) ,OTU(Out_Fwd) OTU(Out_Rev) OTU(Out_ClearFault) OTU(Out_Horn) ,CLR(Out_SpeedRef) CLR(Out_Datalink) ];
				RC: "============================================================$N"
				    "REMAINING DRIVE VALUES AND STATUS$N"
				    "============================================================$N"
				    "This rung copies a number of values from the drive directly$N"
				    "to their final Value and Status out";
				N: NEQ(Inp_LastFaultCode,0)MOV(Inp_LastFaultCode,Val_LastFaultCode);
				RC: "If the drive is Faulted, this rung finds the Fault Description for$N"
				    "the given Fault Code within the Reference Fault Code List $N"
				    "(In/Out Parameter).  (The same PF75x Fault Code List$N"
				    "can be referenced by ALL instances of this instruction!!!)$N"
				    "$N"
				    "1.  Find the number of entries in the Fault Code List (Array SIZE).$N"
				    "2.  Search (FSC) the Fault Code List for a matching Code.$N"
				    "3.  If found, copy the corresponding Description to Val_FaultDesc.$N"
				    "4.  If NOT found, copy list entry zero ($QNo Help Available for this code$Q).$N"
				    "$N"
				    "And if the drive is not faulted, clear the Val_FaultDesc string.";
				N: [XIC(Sts_DriveFault) [RES(Wrk_FaultDescFSC) SIZE(Ref_FaultCodeList,0,Wrk_FaultDescFSC.LEN) ,FSC(Wrk_FaultDescFSC,?,?,ALL,Ref_FaultCodeList[Wrk_FaultDescFSC.POS].Code=Val_LastFaultCode) ,XIC(Wrk_FaultDescFSC.FD) COP(Ref_FaultCodeList[Wrk_FaultDescFSC.POS].Desc,Val_FaultDesc,1) ,XIO(Wrk_FaultDescFSC.FD) COP(Ref_FaultCodeList[0].Desc,Val_FaultDesc,1) ] ,XIO(Sts_DriveFault) FLL(0,Val_FaultDesc,1) ];
				RC: "Show the drive as Out of Service and Not Ready, not Available, and with no$N"
				    "Maintenance Bypass breadcrumb.$N"
				    "Clear speed reference and output datalink values.$N"
				    "Show the enumerated drive command as NONE.$N"
				    "Show the enumerated drive status as STOPPED, RUNNING FORWARD, OR RUNNING REVERSE.$N"
				    "Show the enumberated drive fault status as NONE, except show$N"
				    "as CONFIG ERR if there is a configuration error.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  Updated Val_Sts to common enumeration across all motors and drives.  #####";
				N: [OTL(Sts_NotRdy) OTU(Sts_Available) OTU(Sts_MaintByp) ,OTL(Nrdy_OoS) OTU(Nrdy_Intlk) OTU(Nrdy_Perm) ,OTU(Nrdy_PrioStop) OTU(Nrdy_Fail) OTU(Nrdy_IOFault) ,OTU(Sts_StartingFwd) OTU(Sts_StoppingFwd) OTU(Sts_JoggingFwd) OTU(Sts_Horn) ,CLR(Val_SpeedRef) ,XIC(Sts_Stopped) MOV(1,Val_Sts) ,XIC(Sts_RunningFwd) MOV(2,Val_Sts) ,XIC(Sts_RunningRev) MOV(3,Val_Sts) ,CLR(Val_Cmd) CLR(Val_Fault) ,XIC(Sts_Err) OTE(Nrdy_CfgErr) MOV(34,Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed go";
				N: [CLR(Wrk_SrcQ) ,[XIO(Cfg_HasRunFdbk) ,XIO(Cfg_HasSpeedFdbk) ] MOV(1,Wrk_SrcQ) ,XIO(Cfg_HasRunFdbk) XIO(Cfg_HasSpeedFdbk) MOV(2,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,[XIC(Err_FdbkRaw) ,XIC(Err_FdbkEU) ] MOV(35,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: MOV(20,SrcQ);
				RC: "If the device is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then show the alarms as $QParent object out of service$Q.$N"
				    "Show the overall acknowledgement status.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Changed P_Mode to P_CmdSrc, added Out of Service.  #####";
				N: [OTL(FailToStart.Inp_OoS) P_Alarm(FailToStart) ,OTL(FailToStop.Inp_OoS) P_Alarm(FailToStop) ,OTL(IntlkTrip.Inp_OoS) P_Alarm(IntlkTrip) ,OTL(DriveFault.Inp_OoS) P_Alarm(DriveFault) ,OTL(IOFault.Inp_OoS) P_Alarm(IOFault) ,CLR(Val_Notify) CLR(Val_NotifyAll) ,[XIC(FailToStart.Val_Notify.0) ,XIC(FailToStop.Val_Notify.0) ,XIC(IntlkTrip.Val_Notify.0) ,XIC(DriveFault.Val_Notify.0) ,XIC(IOFault.Val_Notify.0) ] OTL(Val_Notify.0) OTL(Val_NotifyAll.0) ,[XIC(FailToStart.Sts_AlmInh) ,XIC(FailToStop.Sts_AlmInh) ,XIC(IntlkTrip.Sts_AlmInh) ,XIC(DriveFault.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ] OTE(Sts_AlmInh) ];
		END_ROUTINE

		ROUTINE Logic (Description := "Normal Scan: control / monitor Variable-Speed Drive")
				RC: "Copyright ? Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_VSD :  PROCESS -- VARIABLE SPEED DRIVE$N"
				    "============================================================$N"
				    "Revision 4.10.01 Release  2019-10-16:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-13:  Changed $QMode$Q to $QCommand Source$Q.$N"
				    "Added audible alert on commanded start.  Added unacked alarm count.$N"
				    "Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "Changed Start / Stop / Fwd / Rev / Jog to StartFwd / StartRev /Stop / JogFwd / JogRev.$N"
				    "Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyAck and Sts_ResetReqd for use by external objects.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "Added configurable decimal places for display on HMI.$N"
				    "Modifications to Output Datalink clamp limit restrictions / checking.$N"
				    "Changed delay / time configuration items to REAL seconds.$N"
				    "Updated Val_Sts to common enumeration across all motors and drives.$N"
				    "V4.00.02  2018-10-30:  Corrected handling Allow Local when horn is enabled$N"
				    "V4.10.00  2019-03-25:  Changed availability to use input availability from interlocks.$N"
				    "Added Horn Status, Horn Inhibit. Updated to P_CmdSrc V4.10.00.$N"
				    "Modified simulated run feedback to handle run at zero speed ref.$N"
				    "Added Cfg_HasMoreObj.$N"
				    "V4.10.01  2019-10-16:  Corrected handling of Start Horn on shed conditions.$N"
				    "Modified to lock out jog when jog time expires until jog commands$N"
				    "are cleared. Modified to handle overlapping Horn and Jog times.$N"
				    "============================================================$N"
				    "This Instruction controls and monitors a Variable-Speed Drive (AC or DC) and provides:$N"
				    "$N"
				    "*  Starting, stopping, jogging of drive, setting speed reference and direction$N"
				    "*  Monitoring of run feedback, display of actual drive status, including accel, decel, direction, speed$N"
				    "*  Detection of Failure to Start, Failure to Stop, Drive Fault$N"
				    "*  Monitoring of Permissive conditions to allow starting$N"
				    "* Monitoring of Interlock conditions to stop / prevent starting$N"
				    "* Simulation, providing feedback of a working drive while disabling outputs$N"
				    "* Monitoring of I/O communication faults$N"
				    "* Alarms for Fail to Start, Fail to Stop, Interlock Trip, Drive Fault, I/O Fault$N"
				    "* Option to automatically reset faults and alarms when operator commands$N"
				    "motor to start or stop$N"
				    "* Supports HMI $Qbreadcrumbs$Q for Alarm Inhibited, Bad Configuration,$N"
				    "Not Ready, Maintenance Bypass Active$N"
				    "* $QAvailable$Q status for use by automation logic to know whether motor$N"
				    "can be controlled by other objects.$N"
				    "* Horn output for audible alert prior to starting motor.$N"
				    "$N"
				    "Command Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$N"
				    "Command Sources: Operator, External, Program, External, Override, Maintenance,$N"
				    "Out of Service, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)[LOWER(Cfg_Desc,Cfg_Label) LOWER(Cfg_Tag,Cfg_Area) LOWER(Cfg_FwdText,Cfg_RevText) LOWER(Cfg_SpeedRefEU,Cfg_SpeedFdbkEU) ,LOWER(Cfg_InpDatalinkLabel,Cfg_InpDatalinkEU) LOWER(Cfg_OutDatalinkLabel,Cfg_OutDatalinkEU) LOWER(HMI_Lib,HMI_Type) ];
				RC: "This rung handles received Command Source selection Inputs and Commands:$N"
				    "$N"
				    "NOTE:  All Commands for Command Source and Alarm are aliased directly to the$N"
				    "corresponding Commands in the contained P_CmdSrc and P_Alarm AOIs.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Changed P_Mode to P_CmdSrc.  #####";
				N: LBL(SkipText)P_CmdSrc(CmdSrc);
				RC: "This rung handles simple First-Come First-Served Ownership Arbitration.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "============================================================$N"
				    "CONFIGURATION PROCESSING$N"
				    "============================================================$N"
				    "If the device is configured to not HAVE device feedback input (engineer),$N"
				    "it cannot be USE the feedback";
				N: XIO(Cfg_HasRunFdbk)OTU(Cfg_UseRunFdbk)OTU(Cfg_AllowLocal);
				RC: "If the device is configured to not HAVE speed feedback input (engineer),$N"
				    "it cannot be USE the feedback (maintenance).";
				N: XIO(Cfg_HasSpeedFdbk)OTU(Cfg_UseSpeedFdbk);
				RC: "============================================================$N"
				    "COMMAND SOURCE PROCESSING: $QASPECT$Q OWNERSHIP$N"
				    "============================================================$N"
				    "Using the Command Source determined above, and the Cfg_OperKeep,$N"
				    "Cfg_ProgKeep and";
				N: [XIC(Cfg_OperKeep.0) ONS(Wrk_OperKeep0ONS) OTU(Cfg_ProgKeep.0) OTU(Cfg_ExtKeep.0) ,XIC(Cfg_OperKeep.1) ONS(Wrk_OperKeep1ONS) OTU(Cfg_ProgKeep.1) OTU(Cfg_ExtKeep.1) ,XIC(Cfg_OperKeep.3) ONS(Wrk_OperKeep3ONS) OTU(Cfg_ProgKeep.3) OTU(Cfg_ExtKeep.3) ,XIC(Cfg_ProgKeep.0) ONS(Wrk_ProgKeep0ONS) OTU(Cfg_OperKeep.0) OTU(Cfg_ExtKeep.0) ,XIC(Cfg_ProgKeep.1) ONS(Wrk_ProgKeep1ONS) OTU(Cfg_OperKeep.1) OTU(Cfg_ExtKeep.1) ,XIC(Cfg_ProgKeep.3) ONS(Wrk_ProgKeep3ONS) OTU(Cfg_OperKeep.3) OTU(Cfg_ExtKeep.3) ,XIC(Cfg_ExtKeep.0) ONS(Wrk_ExtKeep0ONS) OTU(Cfg_ProgKeep.0) OTU(Cfg_OperKeep.0) ,XIC(Cfg_ExtKeep.1) ONS(Wrk_ExtKeep1ONS) OTU(Cfg_ProgKeep.1) OTU(Cfg_OperKeep.1) ,XIC(Cfg_ExtKeep.3) ONS(Wrk_ExtKeep3ONS) OTU(Cfg_ProgKeep.3) OTU(Cfg_OperKeep.3) ];
				RC: "These three rungs determine who actually currently owns the various aspects of the drive:$N"
				    "the Operator, the Program, or the External command source.$N"
				    "$N"
				    "These rungs help simplify the logic later, removing the repetition of these branch structures!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Using P_CmdSrc, added External command source.  #####";
				N: [[XIC(Sts_Oper) XIO(Cfg_ProgKeep.0) XIO(Cfg_ExtKeep.0) ,XIC(Sts_Maint) ,[XIC(Sts_Prog) ,XIC(Sts_Ext) ] XIC(Cfg_OperKeep.0) ] OTE(Wrk_OperHas0) ,[XIC(Sts_Oper) XIO(Cfg_ProgKeep.1) XIO(Cfg_ExtKeep.1) ,XIC(Sts_Maint) ,[XIC(Sts_Prog) ,XIC(Sts_Ext) ] XIC(Cfg_OperKeep.1) ] OTE(Wrk_OperHas1) ,[XIC(Sts_Oper) XIO(Cfg_ProgKeep.3) XIO(Cfg_ExtKeep.3) ,XIC(Sts_Maint) ,[XIC(Sts_Prog) ,XIC(Sts_Ext) ] XIC(Cfg_OperKeep.3) ] OTE(Wrk_OperHas3) ];
				N: [[XIC(Sts_Prog) XIO(Cfg_OperKeep.0) XIO(Cfg_ExtKeep.0) ,[XIC(Sts_Oper) ,XIC(Sts_Ext) ] XIC(Cfg_ProgKeep.0) ] OTE(Wrk_ProgHas0) ,[XIC(Sts_Prog) XIO(Cfg_OperKeep.1) XIO(Cfg_ExtKeep.1) ,[XIC(Sts_Oper) ,XIC(Sts_Ext) ] XIC(Cfg_ProgKeep.1) ] OTE(Wrk_ProgHas1) ,[XIC(Sts_Prog) XIO(Cfg_OperKeep.3) XIO(Cfg_ExtKeep.3) ,[XIC(Sts_Oper) ,XIC(Sts_Ext) ] XIC(Cfg_ProgKeep.3) ] OTE(Wrk_ProgHas3) ];
				N: [[XIC(Sts_Ext) XIO(Cfg_ProgKeep.0) XIO(Cfg_OperKeep.0) ,[XIC(Sts_Prog) ,XIC(Sts_Oper) ] XIC(Cfg_ExtKeep.0) ] OTE(Wrk_ExtHas0) ,[XIC(Sts_Ext) XIO(Cfg_ProgKeep.1) XIO(Cfg_OperKeep.1) ,[XIC(Sts_Prog) ,XIC(Sts_Oper) ] XIC(Cfg_ExtKeep.1) ] OTE(Wrk_ExtHas1) ,[XIC(Sts_Ext) XIO(Cfg_ProgKeep.3) XIO(Cfg_OperKeep.3) ,[XIC(Sts_Prog) ,XIC(Sts_Oper) ] XIC(Cfg_ExtKeep.3) ] OTE(Wrk_ExtHas3) ];
				RC: "These rungs get Configuration data (such as timer presets) and distribute as needed.$N"
				    "Note that some Configuration data are used directly in-place.$N"
				    "$N"
				    "Enter the time (in seconds) for the Drive to successfully start before declaring a fault.$N"
				    "Enter the time (in seconds) for the Drive to successfully stop before declaring a fault.$N"
				    "Enter the time (in seconds) for the Drive Fault Reset output to be pulsed when a reset is received.$N"
				    "(The reset pulse time is also used for pulsing Start or Stop$N"
				    "output on a start or stop command retrigger in Maintenance.)$N"
				    "$N"
				    "If the timer preset calcuated wraps negative (more than 2.14... million seconds), then max out the$N"
				    "or clear the Timer Preset (as appropriate) and flag it.  Note that a negative timer preset will fault the controller!!!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Added audible alert prior to commanded start.  #####$N"
				    "#####  Changed delay / time configuration items to REAL seconds.  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added Inp_HornInh to disable Horn operation.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to handle overlapping Horn and Jog times.  #####";
				N: [[MUL(Cfg_FailToStartT,1000.0,Wrk_StartT.PRE) XIC(Wrk_StartT.PRE.31) MOV(2147483647,Wrk_StartT.PRE) ,MUL(Cfg_FailToStopT,1000.0,Wrk_StopT.PRE) XIC(Wrk_StopT.PRE.31) MOV(2147483647,Wrk_StopT.PRE) ,MUL(Cfg_ResetPulseT,1000.0,Wrk_ResetT.PRE) XIC(Wrk_ResetT.PRE.31) CLR(Wrk_ResetT.PRE) ,[GRT(Cfg_StartHornT,1000.0) CLR(Cfg_StartHornT) ,MUL(Cfg_StartHornT,1000.0,Wrk_StartHornT.PRE) ,XIC(Inp_HornInh) CLR(Wrk_StartHornT.PRE) ] XIC(Wrk_StartHornT.PRE.31) CLR(Wrk_StartHornT.PRE) ,CPT(Wrk_JogT.PRE,Cfg_MaxJogT*1000.0+Wrk_StartHornT.PRE) XIC(Wrk_JogT.PRE.31) CLR(Wrk_JogT.PRE) ] OTE(Err_Timer) ,MOV(Wrk_StartT.PRE,Wrk_StartInhT.PRE) MOV(Wrk_StopT.PRE,Wrk_StopInhT.PRE) MOV(Wrk_ResetT.PRE,Wrk_StartRetrigT.PRE) MOV(Wrk_ResetT.PRE,Wrk_StopRetrigT.PRE) ];
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Bad Raw Scaling configs$N"
				    "Bad Engineering Units Scaling configs$N"
				    "Bad Min or Max Speed Reference clamp limit$N"
				    "Bad simulation speed ramp time$N"
				    "Bad timer config from (rung above)$N"
				    "Bad Alarm config (from P_Alarm)$N"
				    "Bad Cfg_OperKeep / Cfg_ProgKeep config$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Modified to allow the special case where min and max clamping  #####$N"
				    "#####  limits (speed or output datalink) can be EQUAL (clamp at a specific value).  #####$N"
				    "#####  Changed delay / time configuration items to REAL seconds.  #####";
				N: [XIC(Cfg_HasSpeedFdbk) [EQU(Cfg_SpeedFdbkRawMax,Cfg_SpeedFdbkRawMin) OTE(Err_FdbkRaw) ,EQU(Cfg_SpeedFdbkEUMax,Cfg_SpeedFdbkEUMin) OTE(Err_FdbkEU) ] ,EQU(Cfg_SpeedRefEUMax,Cfg_SpeedRefEUMin) OTE(Err_RefEU) ,EQU(Cfg_SpeedRefRawMax,Cfg_SpeedRefRawMin) OTE(Err_RefRaw) ,XIC(Cfg_HasInpDatalink) [EQU(Cfg_InpDatalinkRawMax,Cfg_InpDatalinkRawMin) OTE(Err_InpDLRaw) ,EQU(Cfg_InpDatalinkEUMax,Cfg_InpDatalinkEUMin) OTE(Err_InpDLEU) ] ,XIC(Cfg_HasOutDatalink) [LES(Cfg_OutDatalinkMax,Cfg_OutDatalinkMin) OTE(Err_OutDLLim) ,EQU(Cfg_OutDatalinkEUMax,Cfg_OutDatalinkEUMin) OTE(Err_OutDLEU) ,EQU(Cfg_OutDatalinkRawMax,Cfg_OutDatalinkRawMin) OTE(Err_OutDLRaw) ] ,[LES(Cfg_MaxSpdRef,Cfg_MinSpdRef) ,LES(Cfg_MinSpdRef,0.0) ] OTE(Err_RefLim) ,LES(Cfg_SimRampT,0.0) OTE(Err_Sim) ,XIC(Err_Timer) ]OTE(Nrdy_CfgErr);
				RC: "This rung publishes the Values for the scaled speed reference range.$N"
				    "If this instruction is reverse scaled by reversing the scaled (EU) min and max configurations,$N"
				    "the values are swapped so the the EUMax Value is always greater than the EUMin Value.$N"
				    "This makes the HMI bargraph and trend coding easier, and provides values$N"
				    "that can be pinned to the configuration of another block so the VSD$'s range$N"
				    " and other block$'s range are in lockstep.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Added configurable decimal places for display on HMI.  #####$N"
				    "#####  Added checks to ensure Datalink clamp limits are within scaled (EU) range.  #####";
				N: [GEQ(Cfg_SpeedRefEUMax,Cfg_SpeedRefEUMin) MOV(Cfg_SpeedRefEUMin,Val_SpeedRefEUMin) MOV(Cfg_SpeedRefEUMax,Val_SpeedRefEUMax) ,LES(Cfg_SpeedRefEUMax,Cfg_SpeedRefEUMin) MOV(Cfg_SpeedRefEUMin,Val_SpeedRefEUMax) MOV(Cfg_SpeedRefEUMax,Val_SpeedRefEUMin) ,LES(Cfg_OutDatalinkMin,Cfg_OutDatalinkEUMin) MOV(Cfg_OutDatalinkEUMin,Cfg_OutDatalinkMin) ,GRT(Cfg_OutDatalinkMin,Cfg_OutDatalinkEUMax) MOV(Cfg_OutDatalinkEUMax,Cfg_OutDatalinkMin) ,LES(Cfg_OutDatalinkMax,Cfg_OutDatalinkEUMin) MOV(Cfg_OutDatalinkEUMin,Cfg_OutDatalinkMax) ,GRT(Cfg_OutDatalinkMax,Cfg_OutDatalinkEUMax) MOV(Cfg_OutDatalinkEUMax,Cfg_OutDatalinkMax) ,LIM(7,Cfg_DecPlcs,-1) MOV(2,Cfg_DecPlcs) ,LIM(7,Cfg_InpDLDecPlcs,-1) MOV(2,Cfg_InpDLDecPlcs) ,LIM(7,Cfg_OutDLDecPlcs,-1) MOV(2,Cfg_OutDLDecPlcs) ];
				RC: "This rung publishes the Values for the scaled speed feedback range.$N"
				    "If this instruction is reverse scaled by reversing the scaled (EU) min and max configurations,$N"
				    "the values are swapped so the the EUMax Value is always greater than the EUMin Value.$N"
				    "This makes the HMI bargraph and trend coding easier, and provides values$N"
				    "that can be pinned to the configuration of a PID, so the VSD and PID ranges are in lockstep.";
				N: [GEQ(Cfg_SpeedFdbkEUMax,Cfg_SpeedFdbkEUMin) MOV(Cfg_SpeedFdbkEUMin,Val_SpeedFdbkEUMin) MOV(Cfg_SpeedFdbkEUMax,Val_SpeedFdbkEUMax) ,LES(Cfg_SpeedFdbkEUMax,Cfg_SpeedFdbkEUMin) MOV(Cfg_SpeedFdbkEUMin,Val_SpeedFdbkEUMax) MOV(Cfg_SpeedFdbkEUMax,Val_SpeedFdbkEUMin) ];
				RC: "============================================================$N"
				    "SETTINGS PROCESSING$N"
				    "============================================================$N"
				    "This rung handles received Program Settings:$N"
				    "$N"
				    "First, handle clamping of the Program Output Datalink Setting.";
				N: [GRT(PSet_OutDatalink,Cfg_OutDatalinkMax) MOV(Cfg_OutDatalinkMax,PSet_OutDatalink) ,LES(PSet_OutDatalink,Cfg_OutDatalinkMin) MOV(Cfg_OutDatalinkMin,PSet_OutDatalink) ,XIC(Wrk_ProgHas3) MOV(PSet_OutDatalink,Wrk_OutDatalink) ,XIC(Wrk_ProgHas0) MOV(PSet_SpeedRef,Wrk_SpeedRef) ];
				RC: "This rung handles received Operator Settings:$N"
				    "$N"
				    "First, handle clamping of the Operator Output Datalink Setting.$N"
				    "(Clamping of the Speed Reference is handled below.)$N"
				    "$N"
				    "Then, if the command source is Operator and the Program and External do not retain the Output Datalink,$N"
				    "or if the command source is Maintenance,$N"
				    "or if the command source is Program or External but the Operator retains the Output Datalink,$N"
				    "use the Operator Setting for the Output Datalink.$N"
				    "$N"
				    "The Operator Setting for the Speed Reference is handled similarly.$N"
				    "$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [GRT(OSet_OutDatalink,Cfg_OutDatalinkMax) MOV(Cfg_OutDatalinkMax,OSet_OutDatalink) ,LES(OSet_OutDatalink,Cfg_OutDatalinkMin) MOV(Cfg_OutDatalinkMin,OSet_OutDatalink) ,XIC(Wrk_OperHas3) MOV(OSet_OutDatalink,Wrk_OutDatalink) ,XIC(Wrk_OperHas0) MOV(OSet_SpeedRef,Wrk_SpeedRef) ];
				RC: "This rung handles received External Settings:$N"
				    "$N"
				    "First, handle clamping of the External Output Datalink Setting.$N"
				    "(Clamping of the Speed Reference is handled below.)$N"
				    "$N"
				    "Then, if the command source is External and the Program and Operator do not retain the Output Datalink,$N"
				    "or if the command source is Program or Operator but External retains the Output Datalink,$N"
				    "use the External Setting for the Output Datalink.$N"
				    "$N"
				    "The External Setting for the Speed Reference is handled similarly.$N"
				    "$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [GRT(XSet_OutDatalink,Cfg_OutDatalinkMax) MOV(Cfg_OutDatalinkMax,XSet_OutDatalink) ,LES(XSet_OutDatalink,Cfg_OutDatalinkMin) MOV(Cfg_OutDatalinkMin,XSet_OutDatalink) ,XIC(Wrk_ExtHas3) MOV(XSet_OutDatalink,Wrk_OutDatalink) ,XIC(Wrk_ExtHas0) MOV(XSet_SpeedRef,Wrk_SpeedRef) ];
				RC: "This rung handles Override command source for Output Datalink and Speed Reference.$N"
				    "$N"
				    "First, handle clamping of the Override Output Datalink Input.$N"
				    "(Clamping of the Speed Reference is handled below.)$N"
				    "Then, if the command source is Override, use the Override Output Datalink Input$N"
				    "and the Override Speed Reference Input.$N"
				    "$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [GRT(Inp_OvrdOutDatalink,Cfg_OutDatalinkMax) MOV(Cfg_OutDatalinkMax,Inp_OvrdOutDatalink) ,LES(Inp_OvrdOutDatalink,Cfg_OutDatalinkMin) MOV(Cfg_OutDatalinkMin,Inp_OvrdOutDatalink) ,XIC(Sts_Ovrd) MOV(Inp_OvrdSpeed,Wrk_SpeedRef) MOV(Inp_OvrdOutDatalink,Wrk_OutDatalink) ];
				RC: "Ready to receive a new OSet_SpeedRef if tracking is NOT enabled,$N"
				    "or we$'re in Operator or Maintenance, or,$N"
				    "if we$'re in Hand or Ovrd, tracking is NOT configured for Ovrd and Hand.$N"
				    "$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [XIO(Cfg_SetTrack) ,XIC(Wrk_OperHas0) ,[XIC(Sts_Hand) ,XIC(Sts_Ovrd) ] XIO(Cfg_SetTrackOvrdHand) ]OTE(ORdy_SpeedRef);
				RC: "Ready to receive other Operator Settings (OSet_xxx) if tracking is NOT enabled,$N"
				    "or we$'re in Operator or Maintenance.$N"
				    "$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [XIO(Cfg_SetTrack) ,XIC(Wrk_OperHas3) ]OTE(ORdy_OSet);
				RC: "============================================================$N"
				    "DEVICE FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "In preparation for ramping the simulated speed feedback, this rung$N"
				    "determines the time since the previ";
				N: MOV(2147483647,Wrk_ScanT.PRE)TON(Wrk_ScanT,?,?)DIV(Wrk_ScanT.ACC,1000.0,Wrk_ScanTime)CLR(Wrk_ScanT.ACC);
				RC: "If the device is in Hand Mode, or if the device was switched from$N"
				    "simulated to real THIS SCAN (ONS), we need to align the object$N"
				    "state with the actual state of the drive.";
				N: [XIC(Sts_Hand) ,XIO(Inp_Sim) ONS(Wrk_NoLongerSim) ]OTE(Wrk_Hand);
				RC: "============================================================$N"
				    "SPEED FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "If not in simulation and scaling config is valid, the speed feedback is scaled from the raw Input.$N"
				    "$N"
				    "If";
				N: XIO(Inp_Sim)XIO(Err_FdbkRaw)[XIC(Cfg_HasSpeedFdbk) [XIC(Cfg_SimScaleEU) ONS(Wrk_SimScaleEUONS) OTU(Cfg_SimScaleRaw) ,XIC(Cfg_SimScaleRaw) ONS(Wrk_SimScaleRawONS) OTU(Cfg_SimScaleEU) ,CPT(Val_SpeedFdbk,(Inp_SpeedFdbk-Cfg_SpeedFdbkRawMin)/(Cfg_SpeedFdbkRawMax-Cfg_SpeedFdbkRawMin)*(Cfg_SpeedFdbkEUMax-Cfg_SpeedFdbkEUMin)+Cfg_SpeedFdbkEUMin) ,XIC(Wrk_Hand) [XIO(Cfg_SimScaleEU) XIO(Cfg_SimScaleRaw) MOV(Val_SpeedFdbk,Wrk_SpeedRef) ,XIC(Cfg_SimScaleEU) XIO(Cfg_SimScaleRaw) CPT(Wrk_SpeedRef,(Val_SpeedFdbk-Cfg_SpeedFdbkEUMin)/(Cfg_SpeedFdbkEUMax-Cfg_SpeedFdbkEUMin)*(Cfg_SpeedRefEUMax-Cfg_SpeedRefEUMin)+Cfg_SpeedRefEUMin) ,XIC(Cfg_SimScaleRaw) XIO(Cfg_SimScaleEU) CPT(Wrk_SpeedRef,(Inp_SpeedFdbk-Cfg_SpeedRefRawMin)/(Cfg_SpeedRefRawMax-Cfg_SpeedRefRawMin)*(Cfg_SpeedRefEUMax-Cfg_SpeedRefEUMin)+Cfg_SpeedRefEUMin) ] ] ,XIO(Cfg_HasSpeedFdbk) [XIC(Wrk_RunFdbk) MOV(Wrk_SpeedRef,Val_SpeedFdbk) ,XIO(Wrk_RunFdbk) CLR(Val_SpeedFdbk) ] ]JMP(SkipSpeedSim);
				RC: "If the Speed Feedback scaling config values are invalid, just clear$N"
				    "Val_SpeedFdbk and skip the actual speed feedback processing.";
				N: [XIO(Inp_Sim) XIC(Err_FdbkRaw) ,XIC(Err_FdbkEU) ,XIC(Inp_Sim) [XIC(Cfg_SimScaleEU) XIC(Err_RefEU) ,XIC(Cfg_SimScaleRaw) [XIC(Err_FdbkRaw) ,XIC(Err_RefEU) ] ] ]CLR(Val_SpeedFdbk)JMP(SkipSpeedSim);
				RC: "If in simulation, simulate accel/decel.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Changed delay / time configuration items to REAL seconds.  #####";
				N: XIC(Inp_Sim)[[XIC(Wrk_Run) ,XIC(Wrk_Jog) ] [XIO(Cfg_SimScaleEU) XIO(Cfg_SimScaleRaw) MOV(Wrk_SpeedRef,Wrk_SimFdbkTgt) ,[XIC(Cfg_SimScaleEU) XIO(Cfg_SimScaleRaw) CPT(Wrk_SimFdbkTgt,(Wrk_SpeedRef-Cfg_SpeedRefEUMin)/(Cfg_SpeedRefEUMax-Cfg_SpeedRefEUMin)*(Cfg_SpeedFdbkEUMax-Cfg_SpeedFdbkEUMin)+Cfg_SpeedFdbkEUMin) ,XIC(Cfg_SimScaleRaw) [CPT(Wrk_SimFdbkTgt,(Wrk_SpeedRef-Cfg_SpeedRefEUMin)/(Cfg_SpeedRefEUMax-Cfg_SpeedRefEUMin)*(Cfg_SpeedRefRawMax-Cfg_SpeedRefRawMin)+Cfg_SpeedRefRawMin) ,CPT(Wrk_SimFdbkTgt,(Wrk_SimFdbkTgt-Cfg_SpeedFdbkRawMin)/(Cfg_SpeedFdbkRawMax-Cfg_SpeedFdbkRawMin)*(Cfg_SpeedFdbkEUMax-Cfg_SpeedFdbkEUMin)+Cfg_SpeedFdbkEUMin) ] ] ] ,[XIO(Wrk_Run) XIO(Wrk_Jog) ,XIO(Wrk_Rev) XIO(Sts_ActualDir) ,XIC(Wrk_Rev) XIC(Sts_ActualDir) ] CLR(Wrk_SimFdbkTgt) ,GRT(Cfg_SimRampT,0.0) [CPT(Wrk_Step,Cfg_MaxSpdRef/Cfg_SimRampT*Wrk_ScanTime) ,XIC(Cfg_SimScaleEU) XIO(Cfg_SimScaleRaw) CPT(Wrk_Step,(Wrk_Step-Cfg_SpeedRefEUMin)/(Cfg_SpeedRefEUMax-Cfg_SpeedRefEUMin)*(Cfg_SpeedFdbkEUMax-Cfg_SpeedFdbkEUMin)+Cfg_SpeedFdbkEUMin) ,XIC(Cfg_SimScaleRaw) [CPT(Wrk_Step,(Wrk_Step-Cfg_SpeedRefEUMin)/(Cfg_SpeedRefEUMax-Cfg_SpeedRefEUMin)*(Cfg_SpeedRefRawMax-Cfg_SpeedRefRawMin)+Cfg_SpeedRefRawMin) ,CPT(Wrk_Step,(Wrk_Step-Cfg_SpeedFdbkRawMin)/(Cfg_SpeedFdbkRawMax-Cfg_SpeedFdbkRawMin)*(Cfg_SpeedFdbkEUMax-Cfg_SpeedFdbkEUMin)+Cfg_SpeedFdbkEUMin) ] ] ,LEQ(Cfg_SimRampT,0.0) MOV(1.50000000e+038,Wrk_Step) ,CMP(ABS(Val_SpeedFdbk-Wrk_SimFdbkTgt)<=Wrk_Step) MOV(Wrk_SimFdbkTgt,Val_SpeedFdbk) ,CMP((Val_SpeedFdbk-Wrk_SimFdbkTgt)>Wrk_Step) SUB(Val_SpeedFdbk,Wrk_Step,Val_SpeedFdbk) ,CMP((Wrk_SimFdbkTgt-Val_SpeedFdbk)>Wrk_Step) ADD(Val_SpeedFdbk,Wrk_Step,Val_SpeedFdbk) ];
				RC: "============================================================$N"
				    "INPUT DATALINK PROCESSING$N"
				    "============================================================$N"
				    "Scale the Input Datalink (if we have one) to its engineering units.";
				N: LBL(SkipSpeedSim)[XIO(Err_InpDLEU) XIC(Cfg_HasInpDatalink) CPT(Val_InpDatalink,Cfg_InpDatalinkEUMin+(Cfg_InpDatalinkEUMax-Cfg_InpDatalinkEUMin)/(Cfg_InpDatalinkRawMax-Cfg_InpDatalinkRawMin)*(Inp_Datalink-Cfg_InpDatalinkRawMin)) ,[XIO(Cfg_HasInpDatalink) ,XIC(Err_InpDLEU) ] CLR(Val_InpDatalink) ];
				RC: "============================================================$N"
				    "RUN FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "If the drive is NOT being simulated and it HAS and IS USING a run feedback,$N"
				    "use the state of the run feed";
				N: [XIO(Inp_Sim) XIC(Cfg_UseRunFdbk) XIC(Inp_Running) ,[XIC(Inp_Sim) ,XIO(Cfg_UseRunFdbk) ] [XIC(Cfg_UseSpeedFdbk) [CMP(ABS(Val_SpeedFdbk)>(0.001*Cfg_SpeedFdbkEUMax)) ,XIC(Wrk_Run) ,XIC(Wrk_Jog) ] ,XIO(Cfg_UseSpeedFdbk) [XIC(Wrk_StartRetrigT.DN) ,XIC(Wrk_StopRetrigT.TT) ] ] ]OTE(Wrk_RunFdbk);
				RC: "This rung copies the drive Status Word bits to external Status parameters of the instruction.$N"
				    "When this instruction is in simulation, simulated status is generated to $Qact like$Q a drive.";
				N: [[XIO(Inp_Sim) XIC(Inp_CommandDir) ,XIC(Inp_Sim) XIO(Wrk_Rev) ] OTE(Sts_CommandDir) ,[XIO(Inp_Sim) [XIC(Inp_ActualDir) OTL(Sts_ActualDir) ,XIO(Inp_ActualDir) OTU(Sts_ActualDir) ] ,XIC(Inp_Sim) EQU(Val_SpeedFdbk,0.0) [XIO(Wrk_Rev) OTL(Sts_ActualDir) ,XIC(Wrk_Rev) OTU(Sts_ActualDir) ] ] ,[XIO(Inp_Sim) XIC(Inp_Accelerating) ,XIC(Inp_Sim) LES(Val_SpeedFdbk,Wrk_SimFdbkTgt) ] OTE(Sts_Accel) ,[XIO(Inp_Sim) XIC(Inp_Decelerating) ,XIC(Inp_Sim) GRT(Val_SpeedFdbk,Wrk_SimFdbkTgt) ] OTE(Sts_Decel) ,XIO(Inp_Sim) XIC(Inp_Alarm) OTE(Sts_Alarm) ,XIO(Inp_Sim) XIO(Inp_Ready) OTE(Sts_NotReady) ,[XIO(Inp_Sim) XIC(Inp_AtSpeed) ,XIC(Inp_Sim) EQU(Wrk_SimFdbkTgt,Val_SpeedFdbk) NEQ(Wrk_SimFdbkTgt,0.0) ] OTE(Sts_AtSpeed) ];
				RC: "Val_Fdbk is the current state of the device feedback, as seen on the AOI$'s Inputs:$N"
				    "0 = Stopped$N"
				    "1 = Running Forward$N"
				    "2 = Running Reverse$N"
				    "3 = Accelerating$N"
				    "4 = Decelerating";
				N: [XIO(Wrk_RunFdbk) XIO(Sts_Accel) XIO(Sts_Decel) CLR(Val_Fdbk) ,XIC(Wrk_RunFdbk) XIC(Sts_ActualDir) MOV(1,Val_Fdbk) ,XIC(Wrk_RunFdbk) XIO(Sts_ActualDir) MOV(2,Val_Fdbk) ,XIC(Sts_Accel) MOV(3,Val_Fdbk) ,XIC(Sts_Decel) MOV(4,Val_Fdbk) ];
				RC: "============================================================$N"
				    "INTERLOCK / PERMISSIVE BYPASS / CHECK COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Bypass Command bypasses the Bypassable Permissives and Interlocks.";
				N: XIC(MCmd_Bypass)OTU(MCmd_Bypass)OTL(Wrk_Bypass);
				RC: "The Check Command enables checking of ALL$N"
				    "Permissives and Interlocks (cancels the bypass).";
				N: XIC(MCmd_Check)OTU(MCmd_Check)OTU(Wrk_Bypass);
				RC: "If the internal Bypass flag is set, Bypassable Interlocks and Permissives ARE BYPASSED.$N"
				    "Bypassing is ACTIVE if Bypass selected OR in Maintenance Mode,$N"
				    "or in Override Mode if Override Bypassing is configured.";
				N: [XIC(Wrk_Bypass) OTE(Sts_Bypass) ,XIC(Sts_Maint) ,XIC(Sts_Ovrd) XIC(Cfg_OvrdPermIntlk) ]OTE(Sts_BypActive);
				RC: "If a Maintenance Bypass function is active, display the Maintenance Bypass$N"
				    "Indicator (triangle symbol) on the graphic symbol.  Bypass functions are:$N"
				    "*  Interlock / Permissive Bypass function is enabled$N"
				    "*  Motor HAS run feedback designated by engineer, but$N"
				    "maintenance has selected to NOT USE run feedback";
				N: [XIC(Sts_Bypass) ,XIC(Cfg_HasRunFdbk) XIO(Cfg_UseRunFdbk) ]OTE(Sts_MaintByp);
				RC: "Ready for Interlock / Permissive Bypass if not bypassed.$N"
				    "Ready to cancel Bypass (resume checking) if bypassed.";
				N: [XIO(Wrk_Bypass) OTE(MRdy_Bypass) ,XIC(Wrk_Bypass) OTE(MRdy_Check) ];
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(XCmd_Reset) OTU(XCmd_Reset) ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ONS(Wrk_ResetONS) ,[XIC(OCmd_StartFwd) ,XIC(OCmd_StartRev) ,XIC(OCmd_Stop) ,[XIC(OCmd_JogFwd) ,XIC(OCmd_JogRev) ] XIC(Cfg_HasJog) ] XIC(Cfg_OCmdResets) XIC(Wrk_OperHas1) ,[XIC(XCmd_StartFwd) ,XIC(XCmd_StartRev) ,XIC(XCmd_Stop) ,[XIC(XCmd_JogFwd) ,XIC(XCmd_JogRev) ] XIC(Cfg_HasJog) ] XIC(Cfg_XCmdResets) XIC(Wrk_ExtHas1) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(PCmd_FailToStartAck) ,OTL(PCmd_FailToStopAck) ,OTL(PCmd_DriveFaultAck) ,OTL(PCmd_IntlkTripAck) ,OTL(PCmd_IOFaultAck) ] ][OTL(FailToStart.PCmd_Reset) OTL(FailToStop.PCmd_Reset) OTL(IntlkTrip.PCmd_Reset) OTL(IOFault.PCmd_Reset) ,XIC(Sts_FailToStart) RES(Wrk_StartT) ,XIC(Sts_FailToStop) RES(Wrk_StopT) ,OTU(Nrdy_PrioStop) OTU(Nrdy_Fail) ,[XIO(Inp_IOFault) ,XIC(Inp_Sim) ] OTU(Nrdy_IOFault) ,TOF(Wrk_ResetT,?,?) ];
				RC: "The Hold Timer $Qdone$Q bit comes on immediately and stays on$N"
				    "for the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.";
				N: XIC(Wrk_ResetT.DN)[XIC(Inp_Faulted) XIO(Inp_Sim) OTE(Out_ClearFault) ,OTL(DriveFault.PCmd_Reset) ];
				RC: "============================================================$N"
				    "DRIVE START / STOP COMMAND HANDLING$N"
				    "============================================================$N"
				    "In preparation for the Start / Stop logic that follows, this rung$N"
				    "stashes away the Permissive";
				N: [[XIC(Inp_FwdPermOK) ,XIC(Sts_BypActive) ] XIC(Inp_FwdNBPermOK) OTE(Wrk_FwdPermOK) ,[XIC(Inp_RevPermOK) ,XIC(Sts_BypActive) ] XIC(Inp_RevNBPermOK) OTE(Wrk_RevPermOK) ];
				RC: "The drive is NOT READY TO RUN if:$N"
				    "* Interlocks are not OK and not bypassed;$N"
				    "* Non-bypassable Interlocks are not OK;$N"
				    "* Permissives are not OK and not bypassed,$N"
				    "or Non-Bypassable Permissives are not OK, $N"
				    "and the motor is not already starting or running;$N"
				    "* The drive (not simulated) reports that it is faulted;$N"
				    "* There$'s an I/O failure and the motor is NOT being simulated;$N"
				    "* The motor has a Fail to Start that has not been reset;$N"
				    "* The drive is disabled (by Maintenance);$N"
				    "* This instruction instance has a configuration error.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  V4.00.00  2018-07-13:  Replaced start / stop / fwd / rev with start fwd / start rev / stop  #####";
				N: [XIC(Sts_OoS) OTE(Nrdy_OoS) ,XIC(Nrdy_CfgErr) ,[XIO(Inp_IntlkOK) XIO(Sts_BypActive) ,XIO(Inp_NBIntlkOK) ] [[XIC(Wrk_Run) ,XIC(Wrk_Jog) ] XIO(Sts_Hand) OTE(Sts_IntlkTrip) ,OTE(Nrdy_Intlk) ] ,XIO(Wrk_FwdPermOK) XIO(Sts_StartingFwd) XIO(Sts_RunningFwd) [XIO(Wrk_RevPermOK) XIO(Sts_StartingRev) XIO(Sts_RunningRev) ,XIO(Cfg_HasReverse) ] OTE(Nrdy_Perm) ,XIO(Inp_Sim) [XIC(Inp_Faulted) OTE(Sts_DriveFault) OTE(Nrdy_Trip) ,XIO(Inp_Ready) OTE(Nrdy_DriveNR) ] ,XIC(Inp_IOFault) XIO(Inp_Sim) OTE(Sts_IOFault) XIC(Cfg_ShedOnIOFault) OTL(Nrdy_IOFault) ]OTE(Wrk_NotRdy);
				RC: "The drive is NOT READY TO RUN if:$N"
				    "* Interlocks are not OK and not bypassed;$N"
				    "* Non-bypassable Interlocks are not OK;$N"
				    "* Permissives are not OK and not bypassed,$N"
				    "or Non-Bypassable Permissives are not OK, $N"
				    "and the motor is not already starting or running;$N"
				    "* The drive (not simulated) reports that it is faulted;$N"
				    "* There$'s an I/O failure and the motor is NOT being simulated;$N"
				    "* The motor has a Fail to Start that has not been reset;$N"
				    "* The drive is disabled (by Maintenance);$N"
				    "* This instruction instance has a configuration error.";
				N: [XIC(Wrk_NotRdy) ,XIC(Nrdy_PrioStop) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) ]OTE(Sts_NotRdy);
				RC: "The motor is AVAILABLE to be run by automation if it is in PROGRAM$N"
				    "Mode and the $QNot Ready$Q status is cleared.$N"
				    "#####  V4.10.00  2019-03-25:  Changed availability to use input availability from interlocks.  #####";
				N: XIC(Sts_Prog)XIO(Nrdy_PrioStop)XIO(Nrdy_Fail)XIO(Nrdy_CfgErr)XIO(Nrdy_DriveNR)XIO(Nrdy_Trip)XIO(Nrdy_OoS)XIO(Nrdy_Perm)XIO(Nrdy_IOFault)[[XIC(Inp_IntlkOK) ,XIC(Sts_BypActive) ] XIC(Inp_NBIntlkOK) ,XIC(Inp_IntlkAvail) ]OTE(Sts_Available);
				RC: "If we$'re not timing an HMI or programmed Start or Stop,$N"
				    "and there$'s no sealed-in fail-to-start or fail-to-stop,$N"
				    "and if Local Start/Stop Control is permitted,$N"
				    "and if we are using run feedback (not in simulation),$N"
				    "detect a local start or stop transition and track state with it.$N"
				    "(Don$'t track the Start if conditions do not allow the motor to run$N"
				    "or a Jog operation is active.)$N"
				    "$N"
				    "#####  V4.00.00 2018-07-13:  Changed Start / Stop / Jog / Fwd / Rev to StartFwd /  #####$N"
				    "#####  StartRev / Stop / JogFwd / JogRev.  Deleted Cfg_PCmdClear.  #####$N"
				    "##### V4.00.02  2018-10-30:  Corrected handling Allow Local when horn is enabled.  #####";
				N: XIC(Cfg_AllowLocal)XIO(Wrk_StartInhT.TT)XIO(Wrk_StartHornT.TT)XIO(Wrk_StopInhT.TT)XIO(Sts_FailToStart)XIO(Sts_FailToStop)XIC(Cfg_UseRunFdbk)XIO(Inp_Sim)XIO(Wrk_Jog)[XIC(Inp_Running) XIO(Sts_NotRdy) OTL(Wrk_Run) ,XIO(Inp_Running) OTU(Wrk_Run) ,[XIC(Inp_CommandDir) ,XIO(Cfg_HasReverse) ] OTU(Wrk_Rev) ,XIO(Inp_CommandDir) XIC(Cfg_HasReverse) OTL(Wrk_Rev) ];
				RC: "These next several rungs, in priority order, determine whether$N"
				    "the drive should be running, jogging or stopped.$N"
				    "$N"
				    "If a Drive START FORWARD command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is RUN, mark the Drive to RUN FORWARD.$N"
				    "Permissives must be OK or bypassed to start the Drive (Interlocks are checked below...).$N"
				    "The drive must be READY (or in simulation), and the drive can$'t already be jogging.$N"
				    "(Command Sources are mutually exclusive, thus handling the priority.)$N"
				    "$N"
				    "#####  V4.00.00 2018-07-13:  Changed Start / Stop / Jog / Fwd / Rev to StartFwd /  #####$N"
				    "#####  StartRev / Stop / JogFwd / JogRev.  Deleted Cfg_PCmdClear.  #####$N"
				    "#####  Added audible alert prior to commanded start.  #####$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [XIC(OCmd_StartFwd) OTU(OCmd_StartFwd) [XIC(Wrk_OperHas1) ,XIC(Sts_Maint) OTL(Wrk_Retrigger) RES(Wrk_StartRetrigT) ] ,XIC(XCmd_StartFwd) OTU(XCmd_StartFwd) XIC(Wrk_ExtHas1) ,XIC(PCmd_StartFwd) OTU(PCmd_StartFwd) XIC(Wrk_ProgHas1) ,EQU(Inp_OvrdCmd,2) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]XIO(Sts_NotRdy)XIC(Wrk_FwdPermOK)XIO(Wrk_Jog)[[XIO(Wrk_Run) OTL(Wrk_StartHorn) ,XIC(CmdSrc.Sts_Maint) ] OTL(Wrk_Retrigger) RES(Wrk_StartRetrigT) ,OTL(Wrk_Run) OTU(Wrk_Rev) ];
				RC: "These next several rungs, in priority order, determine whether$N"
				    "the drive should be running, jogging or stopped.$N"
				    "$N"
				    "If a Drive START REVERSE command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is RUN, mark the Drive to RUN REVERSE.$N"
				    "Permissives must be OK or bypassed to start the Drive (Interlocks are checked below...).$N"
				    "The drive must be READY (or in simulation), and the drive can$'t already be jogging.$N"
				    "(Command Sources are mutually exclusive, thus handling the priority.)$N"
				    "$N"
				    "#####  V4.00.00 2018-07-13:  Changed Start / Stop / Jog / Fwd / Rev to StartFwd /  #####$N"
				    "#####  StartRev / Stop / JogFwd / JogRev.  Deleted Cfg_PCmdClear.  #####$N"
				    "#####  Added audible alert prior to commanded start.  #####$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [XIC(OCmd_StartRev) OTU(OCmd_StartRev) [XIC(Wrk_OperHas1) ,XIC(Sts_Maint) OTL(Wrk_Retrigger) RES(Wrk_StartRetrigT) ] ,XIC(XCmd_StartRev) OTU(XCmd_StartRev) XIC(Wrk_ExtHas1) ,XIC(PCmd_StartRev) OTU(PCmd_StartRev) XIC(Wrk_ProgHas1) ,EQU(Inp_OvrdCmd,3) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]XIC(Cfg_HasReverse)XIO(Sts_NotRdy)XIC(Wrk_RevPermOK)XIO(Wrk_Jog)[[XIO(Wrk_Run) OTL(Wrk_StartHorn) ,XIC(CmdSrc.Sts_Maint) ] OTL(Wrk_Retrigger) RES(Wrk_StartRetrigT) ,OTL(Wrk_Run) OTL(Wrk_Rev) ];
				RC: "This rung determines if the Drive SHOULD BE JOGGING FORWARD.  This is when:$N"
				    "$N"
				    "* The Operator is requesting to Jog$N"
				    "* The Drive is in OPER or MAINT$N"
				    "* Permissives and Interlocks are OK or bypassed if in OPER$N"
				    "* Non-Bypassable Interlocks and Permissives are OK,$N"
				    "* The drive is Ready (or in simulation), AND$N"
				    "* The drive is not otherwise requested to RUN$N"
				    "$N"
				    "#####  V4.00.00 2018-07-13:  Changed Start / Stop / Jog / Fwd / Rev to StartFwd /  #####$N"
				    "#####  StartRev / Stop / JogFwd / JogRev.  Deleted Cfg_PCmdClear.  #####$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [XIC(OCmd_JogFwd) XIC(Wrk_OperHas1) ,XIC(XCmd_JogFwd) XIC(Wrk_ExtHas1) ]XIO(Sts_NotRdy)XIC(Wrk_FwdPermOK)XIO(Wrk_Run)OTL(Wrk_Jog)OTU(Wrk_Rev)OTL(Wrk_StartHorn);
				RC: "This rung determines if the Drive SHOULD BE JOGGING REVERSE.  This is when:$N"
				    "$N"
				    "* The Operator is requesting to Jog$N"
				    "* The Drive is in OPER or MAINT$N"
				    "* Permissives and Interlocks are OK or bypassed if in OPER$N"
				    "* Non-Bypassable Interlocks and Permissives are OK,$N"
				    "* The drive is Ready (or in simulation), AND$N"
				    "* The drive is not otherwise requested to RUN$N"
				    "$N"
				    "#####  V4.00.00 2018-07-13:  Changed Start / Stop / Jog / Fwd / Rev to StartFwd /  #####$N"
				    "#####  StartRev / Stop / JogFwd / JogRev.  Deleted Cfg_PCmdClear.  #####$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [XIC(OCmd_JogRev) XIC(Wrk_OperHas1) ,XIC(XCmd_JogRev) XIC(Wrk_ExtHas1) ]XIC(Cfg_HasReverse)XIO(Sts_NotRdy)XIC(Wrk_RevPermOK)XIO(Wrk_Run)OTL(Wrk_Jog)OTL(Wrk_Rev)OTL(Wrk_StartHorn);
				RC: "If the drive is being jogged, run the Jog Timer.";
				N: XIC(Wrk_Jog)TON(Wrk_JogT,?,?);
				RC: "If we are sounding the audible start alert (start command accepte) and we lose$N"
				    "the permissive before actually starting the motor, cancel the start$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Added audible alert on commanded start.  #####";
				N: XIC(Wrk_StartHorn)[XIO(Wrk_FwdPermOK) XIO(Wrk_Rev) ,XIO(Wrk_RevPermOK) XIC(Wrk_Rev) ]OTU(Wrk_Run)OTU(Wrk_Jog)OTU(OCmd_JogFwd)OTU(OCmd_JogRev)OTU(XCmd_JogFwd)OTU(XCmd_JogFwd)OTU(Wrk_StartHorn);
				RC: "If the drive is changed to a Command Source other than Ext, Oper or Maint,$N"
				    "or if the Jog command goes away,$N"
				    "or if the Jog command does not clear within the Maximum Jog Time,$N"
				    "stop jogging.$N"
				    "$N"
				    "#####  V4.00.00 2018-07-13:  Changed Start / Stop / Jog / Fwd / Rev to StartFwd /  #####$N"
				    "#####  StartRev / Stop / JogFwd / JogRev.  Deleted Cfg_PCmdClear.  #####$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####";
				N: [[XIC(Wrk_OperHas1) XIO(OCmd_JogFwd) XIO(OCmd_JogRev) ,XIC(Wrk_ExtHas1) XIO(XCmd_JogFwd) XIO(XCmd_JogRev) ,XIO(Wrk_OperHas1) XIO(Wrk_ExtHas1) ,XIO(Cfg_HasJog) ] OTU(Wrk_Jog) ,XIC(Wrk_JogT.DN) NEQ(Wrk_JogT.PRE,0) ]OTU(OCmd_JogFwd)OTU(OCmd_JogRev)OTU(XCmd_JogFwd)OTU(XCmd_JogRev);
				RC: "If a Drive STOP command is received in Operator, External,$N"
				    "Program or Maintenance, or if in Override and the Override State$N"
				    "is STOP, mark the Drive TO STOP (jogging or running).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External Commands.  #####";
				N: [XIC(OCmd_Stop) OTU(OCmd_Stop) [XIC(Wrk_OperHas1) ,XIC(Cfg_OperStopPrio) XIO(Wrk_OperHas1) OTL(Nrdy_PrioStop) ] ,XIC(XCmd_Stop) OTU(XCmd_Stop) [XIC(Wrk_ExtHas1) ,XIC(Cfg_ExtStopPrio) XIO(Wrk_ExtHas1) OTL(Nrdy_PrioStop) ] ,XIC(PCmd_Stop) OTU(PCmd_Stop) XIC(Wrk_ProgHas1) ,EQU(Inp_OvrdCmd,1) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ,XIC(Wrk_NotRdy) ,[XIC(Nrdy_PrioStop) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) ] XIO(Sts_Hand) ][[XIC(Wrk_Run) ,XIC(Wrk_Jog) ,[XIC(Sts_Oper) ,XIC(Sts_Maint) ] ONS(Wrk_NotRdyONS) ] OTL(Wrk_Retrigger) RES(Wrk_StopRetrigT) ,OTU(Wrk_Run) OTU(Wrk_Jog) OTU(Wrk_StartHorn) ,OTU(OCmd_JogFwd) OTU(OCmd_JogRev) OTU(XCmd_JogFwd) OTU(XCmd_JogRev) ];
				RC: "Higher Priority: HAND wins over other Modes:$N"
				    "If in Hand, have the Drive follow the RunFeedback.";
				N: [XIC(Wrk_Hand) ,XIC(S:FS) ][XIC(Wrk_RunFdbk) OTL(Wrk_Run) ,XIO(Wrk_RunFdbk) OTU(Wrk_Run) ,[XIC(Inp_CommandDir) ,XIO(Cfg_HasReverse) ] OTU(Wrk_Rev) ,XIO(Inp_CommandDir) XIC(Cfg_HasReverse) OTL(Wrk_Rev) ];
				RC: "If anything stops the motor, also stop the pre-start audible.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Added audible alert prior to commanded start.  #####";
				N: XIO(Wrk_Run)XIO(Wrk_Jog)OTU(Wrk_StartHorn);
				RC: "============================================================$N"
				    "START HORN TIMER$N"
				    "============================================================$N"
				    "If the horn should be sounding, run the start horn timer.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Added audible alert pr";
				N: [XIC(Wrk_Run) ,XIC(Wrk_Jog) ][XIC(Wrk_StartHorn) TON(Wrk_StartHornT,?,?) TON(Wrk_StartHornT,?,?) ,XIC(Wrk_StartHornT.DN) OTU(Wrk_StartHorn) ];
				RC: "============================================================$N"
				    "DRIVE START RETRIGGER AND FAIL TO START DETECTION$N"
				    "============================================================$N"
				    "If the drive SHOULD BE RUNNING, run a Start Timer to check for Fail to Start,$N"
				    "";
				N: [XIC(Wrk_Run) ,XIC(Wrk_Jog) [XIC(Wrk_JogT.TT) ,EQU(Wrk_JogT.PRE,0) ] ]XIO(Wrk_StartHorn)[TON(Wrk_StartT,?,?) ,TON(Wrk_StartRetrigT,?,?) TON(Wrk_StartRetrigT,?,?) ,XIO(Wrk_RunFdbk) TON(Wrk_StartInhT,?,?) ,XIC(Wrk_StartRetrigT.DN) OTU(Wrk_Retrigger) ];
				RC: "If the Start Timer times out and the motor run feedback (or simulated feedback) never showed up,$N"
				    "show the motor as $QFAILED TO START$Q";
				N: XIC(Wrk_StartT.DN)XIO(Wrk_RunFdbk)XIO(Sts_Maint)OTE(Sts_FailToStart);
				RC: "============================================================$N"
				    "DRIVE STOP RETRIGGER AND FAIL TO STOP DETECTION$N"
				    "============================================================$N"
				    "If the drive SHOULD BE STOPPED, run a Stop Timer to check for Fail to Stop,$N"
				    " and";
				N: XIO(Wrk_Run)[XIO(Wrk_Jog) ,XIC(Wrk_JogT.DN) NEQ(Wrk_JogT.PRE,0) ][TON(Wrk_StopT,?,?) ,TON(Wrk_StopRetrigT,?,?) TON(Wrk_StopRetrigT,?,?) ,XIC(Wrk_RunFdbk) TON(Wrk_StopInhT,?,?) ,XIC(Wrk_StopRetrigT.DN) OTU(Wrk_Retrigger) ];
				RC: "If the Stop Timer times out and the motor run feedback (or simulated feedback)$N"
				    "never showed $Qstopped$Q, show the motor as $QFAILED TO STOP$Q";
				N: XIC(Wrk_StopT.DN)XIC(Wrk_RunFdbk)XIO(Sts_Maint)OTE(Sts_FailToStop);
				RC: "============================================================$N"
				    "SHED ON FAULT LOGIC$N"
				    "============================================================$N"
				    "This rung handles latching in of conditions which are configured to cause$N"
				    "drive to shed (de-energize).";
				N: XIC(Sts_FailToStart)XIC(Cfg_ShedOnFailToStart)OTL(Nrdy_Fail);
				RC: "If a shed condition is latched in above, de-energize the drive.$N"
				    "$N"
				    "#####  V4.10.01  2019-10-16:  Corrected handling of Start Horn on shed conditions.  #####";
				N: [XIC(Nrdy_PrioStop) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) ]XIO(Sts_Hand)OTU(Wrk_Run)OTU(Wrk_Jog)OTU(Wrk_StartHorn);
				RC: "============================================================$N"
				    "DEVICE COMMAND ENUMERATED VALUE$N"
				    "============================================================$N"
				    "Val_Cmd is the command currently being processed:$N"
				    "0 = None$N"
				    "1 = Stop$N"
				    "2 = Start Forward$N"
				    "3 = Star";
				N: [CLR(Wrk_Cmd) ,XIO(Wrk_Run) XIO(Wrk_Jog) [XIC(Wrk_RunFdbk) ,XIC(Wrk_Retrigger) ] MOV(1,Wrk_Cmd) ,XIC(Wrk_Run) [XIO(Wrk_RunFdbk) ,XIC(Wrk_Retrigger) ] [XIC(Sts_CommandDir) MOV(2,Wrk_Cmd) ,XIO(Sts_CommandDir) MOV(3,Wrk_Cmd) ] ,XIC(Wrk_Jog) [XIC(Wrk_JogT.TT) ,EQU(Wrk_JogT.PRE,0) ] [XIC(Sts_CommandDir) MOV(4,Wrk_Cmd) ,XIO(Sts_CommandDir) MOV(5,Wrk_Cmd) ] ,MOV(Wrk_Cmd,Val_Cmd) ];
				RC: "============================================================$N"
				    "OUTPUT GENERATION$N"
				    "============================================================$N"
				    "If the Drive is NOT SIMULATED, generate the appropriate outputs for the Drive.$N"
				    "$N"
				    "If the Drive should be running";
				N: XIO(Inp_Sim)XIO(Sts_Hand)[XIO(Sts_NotRdy) XIO(Wrk_StartHorn) [XIC(Wrk_Run) [OTE(Out_Run) ,[XIO(Wrk_RunFdbk) ,XIC(Wrk_Retrigger) ] OTE(Out_Start) ] ,XIC(Wrk_Jog) [XIC(Wrk_JogT.TT) ,EQU(Wrk_JogT.PRE,0) ] OTE(Out_Jog) ] ,XIO(Wrk_Run) [XIO(Wrk_Jog) ,XIC(Wrk_JogT.DN) NEQ(Wrk_JogT.PRE,0) ] [XIC(Wrk_RunFdbk) ,XIC(Wrk_Retrigger) ] OTE(Out_Stop) ,XIC(Wrk_StartHorn) OTE(Out_Horn) ,XIO(Wrk_Rev) OTE(Out_Fwd) ,XIC(Wrk_Rev) OTE(Out_Rev) ];
				RC: "Check the selected speed reference against the configured Maximum and Minimum$N"
				    "allowed reference limits and ensure the speed is within limits.$N"
				    "Be sure the speed reference is not negative.  This object supports reversing$N"
				    "by command only; negative speed reference is NOT supported!";
				N: [GRT(Wrk_SpeedRef,Cfg_MaxSpdRef) MOV(Cfg_MaxSpdRef,Wrk_SpeedRef) ,LES(Wrk_SpeedRef,Cfg_MinSpdRef) MOV(Cfg_MinSpdRef,Wrk_SpeedRef) ,LES(Wrk_SpeedRef,0.0) CLR(Wrk_SpeedRef) ]OTE(Sts_SpeedLimited);
				RC: "If the drive is NOT simulated and its scaling config is valid, scale the$N"
				    "final speed reference from engineering units to Raw (drive) Units.$N"
				    "$N"
				    "If the drive is SIMULATED, set the Speed Reference output to ZERO.";
				N: [XIO(Inp_Sim) XIO(Err_RefEU) CPT(Out_SpeedRef,(Wrk_SpeedRef-Cfg_SpeedRefEUMin)*(Cfg_SpeedRefRawMax-Cfg_SpeedRefRawMin)/(Cfg_SpeedRefEUMax-Cfg_SpeedRefEUMin)+Cfg_SpeedRefRawMin) ,[XIC(Inp_Sim) ,XIC(Err_RefEU) ] CLR(Out_SpeedRef) ];
				RC: "If NOT in simulation, the Output Datalink exists, and its scaling is valid,$N"
				    "the working value is scaled to generate Out_Datalink.$N"
				    "If in simulation, the Output Datalink does not exist, or its scaling is invalid,$N"
				    "Out_Datalink is cleared.";
				N: [XIO(Inp_Sim) XIC(Cfg_HasOutDatalink) XIO(Err_OutDLEU) CPT(Out_Datalink,(Wrk_OutDatalink-Cfg_OutDatalinkEUMin)*(Cfg_OutDatalinkRawMax-Cfg_OutDatalinkRawMin)/(Cfg_OutDatalinkEUMax-Cfg_OutDatalinkEUMin)+Cfg_OutDatalinkRawMin) ,[XIC(Inp_Sim) ,XIO(Cfg_HasOutDatalink) ,XIC(Err_OutDLEU) ] CLR(Out_Datalink) ];
				RC: "If the Output Datalink exists and its scaling is valid, the working value is copied to Val_OutDatalink.$N"
				    "If the Output Datalink does not exist, or its scaling is invalid, Val_OutDatalink is cleared.";
				N: [XIC(Cfg_HasOutDatalink) XIO(Err_OutDLEU) MOV(Wrk_OutDatalink,Val_OutDatalink) ,[XIO(Cfg_HasOutDatalink) ,XIC(Err_OutDLEU) ] CLR(Val_OutDatalink) ];
				RC: "Val_SpeedRef (commanded speed)$N"
				    "$N"
				    "Based on Mode and Tracking settings, copy the Speed$N"
				    "Reference Value back into the Operator and Program Settings.$N"
				    "$N"
				    "#####  Changed P_Mode to P_CmdSrc. Added External Command Source and Commands.  #####";
				N: [MOV(Wrk_SpeedRef,Val_SpeedRef) ,XIC(Cfg_SetTrack) [[XIO(Sts_Ovrd) XIO(Sts_Hand) ,XIC(Cfg_SetTrackOvrdHand) ] MOV(Val_SpeedRef,PSet_SpeedRef) MOV(Val_SpeedRef,OSet_SpeedRef) MOV(Val_SpeedRef,XSet_SpeedRef) ,MOV(Val_OutDatalink,PSet_OutDatalink) MOV(Val_OutDatalink,OSet_OutDatalink) MOV(Val_OutDatalink,XSet_OutDatalink) ] ];
				RC: "This rung generates the Starting, Running, Stopping, Stopped and Jogging Status bits.$N"
				    "$N"
				    "If the Drive is commanded to run (Output on) and the feedback doesn$'t yet show it running,$N"
				    "the Drive is STARTING.$N"
				    "$N"
				    "If the Drive is commanded to run (Output on) and the feedback shows it running,$N"
				    "the Drive is RUNNING.$N"
				    "$N"
				    "If the Drive is commanded to stoop (Output off) and the feedback still shows it running,$N"
				    "the Drive is STOPPING.$N"
				    "$N"
				    "If the Drive is commanded to stop (Output off) and the feedback shows it has stopped,$N"
				    "the Drive is STOPPED.$N"
				    "$N"
				    "If the Drive is commanded to jog, show the status as JOGGING.$N"
				    "$N"
				    "If the audible alert is active, show the Status as HORN.$N"
				    "$N"
				    "#####  V4.00.00 2018-07-13:  Changed Start / Stop / Jog / Fwd / Rev to StartFwd / StartRev / Stop / JogFwd / JogRev  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added Horn Status.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####";
				N: [XIO(Wrk_StartHorn) XIC(Wrk_Run) XIO(Wrk_Jog) [XIO(Wrk_RunFdbk) [XIC(Sts_CommandDir) OTE(Sts_StartingFwd) ,XIO(Sts_CommandDir) OTE(Sts_StartingRev) ] ,XIC(Wrk_RunFdbk) [XIC(Sts_ActualDir) OTE(Sts_RunningFwd) ,XIO(Sts_ActualDir) OTE(Sts_RunningRev) ] ] ,XIO(Wrk_Run) [XIO(Wrk_Jog) ,XIC(Wrk_JogT.DN) NEQ(Wrk_JogT.PRE,0) ] [XIC(Wrk_RunFdbk) [XIC(Sts_ActualDir) OTE(Sts_StoppingFwd) ,XIO(Sts_ActualDir) OTE(Sts_StoppingRev) ] ,XIO(Wrk_RunFdbk) OTE(Sts_Stopped) ] ,XIO(Wrk_StartHorn) XIC(Wrk_Jog) [XIC(Wrk_JogT.TT) ,EQU(Wrk_JogT.PRE,0) ] [XIC(Sts_CommandDir) OTE(Sts_JoggingFwd) ,XIO(Sts_CommandDir) OTE(Sts_JoggingRev) ] ,XIC(Wrk_StartHorn) OTE(Sts_Horn) ];
				RC: "============================================================$N"
				    "OPERATOR COMMAND READIES$N"
				    "============================================================$N"
				    "Ready to Start if in Operator Manual, Stopped, and Permissives and Interlocks are OK.$N"
				    "$N"
				    "Ready to Stop if";
				N: XIO(Wrk_NotRdy)[XIO(Sts_NotRdy) ,XIC(Cfg_OCmdResets) ][XIC(Wrk_OperHas1) [XIC(Inp_Ready) ,XIC(Inp_Sim) ] [[XIC(Sts_Stopped) ,XIC(Sts_Maint) [XIC(Sts_RunningFwd) ,XIC(Sts_RunningRev) ] ] [XIC(Wrk_FwdPermOK) OTE(ORdy_StartFwd) ,XIC(Wrk_RevPermOK) OTE(ORdy_StartRev) ] ,XIC(Cfg_HasJog) XIO(Wrk_Run) [XIC(Wrk_FwdPermOK) OTE(ORdy_JogFwd) ,XIC(Wrk_RevPermOK) OTE(ORdy_JogRev) ] ] ,[XIC(Wrk_OperHas1) ,XIC(Cfg_OperStopPrio) ] XIO(Sts_StoppingFwd) XIO(Sts_StoppingRev) OTE(ORdy_Stop) ];
				RC: "============================================================$N"
				    "REMAINING DRIVE VALUES AND STATUS$N"
				    "============================================================$N"
				    "This rung copies a number of values from the drive directly$N"
				    "to their final Value and Status out";
				N: NEQ(Inp_LastFaultCode,0)MOV(Inp_LastFaultCode,Val_LastFaultCode);
				RC: "If the drive is Faulted, this rung finds the Fault Description for$N"
				    "the given Fault Code within the Reference Fault Code List $N"
				    "(In/Out Parameter).  (The same Fault Code List tag$N"
				    "can be referenced by ALL instances of this instruction$N"
				    "that use the fault code -- same drive class!!!)$N"
				    "$N"
				    "1.  Find the number of entries in the Fault Code List (Array SIZE).$N"
				    "2.  Search (FSC) the Fault Code List for a matching Code.$N"
				    "3.  If found, copy the corresponding Description to Val_FaultDesc.$N"
				    "4.  If NOT found, copy list entry zero ($QNo Help Available for this code$Q).";
				N: XIC(Sts_DriveFault)[RES(Wrk_FaultDescFSC) SIZE(Ref_FaultCodeList,0,Wrk_FaultDescFSC.LEN) ,FSC(Wrk_FaultDescFSC,?,?,ALL,Ref_FaultCodeList[Wrk_FaultDescFSC.POS].Code=Inp_LastFaultCode) ,XIC(Wrk_FaultDescFSC.FD) COP(Ref_FaultCodeList[Wrk_FaultDescFSC.POS].Desc,Val_FaultDesc,1) ,XIO(Wrk_FaultDescFSC.FD) COP(Ref_FaultCodeList[0].Desc,Val_FaultDesc,1) ];
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "The various alarms are ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1), EXCEPT:$N"
				    "* If the motor DOES NOT HAVE";
				N: [OTL(IntlkTrip.PCfg_AllowExist) OTL(DriveFault.PCfg_AllowExist) OTL(IOFault.PCfg_AllowExist) ,[XIC(Cfg_HasRunFdbk) ,XIC(Cfg_HasSpeedFdbk) ] OTE(FailToStart.PCfg_AllowExist) OTE(FailToStop.PCfg_AllowExist) ];
				RC: "Let the Alarm instance know if this object is taken Out of Service$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Now using P_CmdSrc, including Out of Service.  #####";
				N: XIC(CmdSrc.Sts_OoS)OTE(FailToStart.Inp_OoS)OTE(FailToStop.Inp_OoS)OTE(IntlkTrip.Inp_OoS)OTE(DriveFault.Inp_OoS)OTE(IOFault.Inp_OoS);
				RC: "Handle Motor Failed to Start Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(FailToStart);
				RC: "Handle Motor Failed to Stop Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(FailToStop);
				RC: "Handle Interlock Trip Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IntlkTrip);
				RC: "Handle Drive Fault Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(DriveFault);
				RC: "Handle I/O Fault Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IOFault);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q box on the graphic symbol).";
				N: [XIC(FailToStart.Sts_AlmInh) ,XIC(FailToStop.Sts_AlmInh) ,XIC(IntlkTrip.Sts_AlmInh) ,XIC(DriveFault.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Bad Raw Scaling configs$N"
				    "Bad Engineering Units Scaling configs$N"
				    "Bad Min or Max Speed Reference clamp limit$N"
				    "Bad simulation speed ramp time$N"
				    "Bad timer config from (rung above)$N"
				    "Bad Alarm config (from P_Alarm)$N"
				    "Bad Cfg_OperKeep / Cfg_ProgKeep config$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Modified to allow the special case where min and max clamping  #####$N"
				    "#####  limits (speed or output datalink) can be EQUAL (clamp at a specific value).  #####$N"
				    "#####  Changed delay / time configuration items to REAL seconds.  #####";
				N: [XIC(Nrdy_CfgErr) ,[XIC(FailToStart.Sts_Err) ,XIC(FailToStop.Sts_Err) ,XIC(IntlkTrip.Sts_Err) ,XIC(DriveFault.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "Val_Sts is the current device status, as determined by this AOI,$N"
				    "based on its knowledge of commands executed and feedback.$N"
				    "(This is the status that should be monitored by, for example, FT Historian.)$N"
				    "0 = Powerup / Unknown (in Hand but having no feedback, for example)$N"
				    "0 = Powerup / Unknown$N"
				    "1 = Stopped$N"
				    "2 = Running Forward$N"
				    "3 = Running Reverse$N"
				    "4 = Running Slow$N"
				    "5 = Starting Forward$N"
				    "6 = Starting Reverse$N"
				    "7 = Starting Slow$N"
				    "8 = Jogging Forward$N"
				    "9 = Jogging Reverse$N"
				    "10 = Stopping$N"
				    "14 = Horn$N"
				    "$N"
				    "Val_Fault is the current device fault status, as determined by this AOI,$N"
				    "based on its knowledge of commands executed and feedback.$N"
				    "(This is the fault status that should be monitored by, for example, FT Historian.)$N"
				    "0 = None$N"
				    "16 = Fail to Start$N"
				    "17 = Fail to Stop$N"
				    "18 = Drive Fault$N"
				    "32 = I/O Fault (from Input)$N"
				    "34 = Configuration Error$N"
				    "$N"
				    "#####  V4.00.00 2018-07-13:  Changed Start / Stop / Jog / Fwd / Rev to StartFwd / StartRev / Stop / JogFwd / JogRev  #####$N"
				    "#####  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added Horn Status.  #####";
				N: [CLR(Wrk_Sts) CLR(Wrk_Fault) ,XIC(Sts_Stopped) MOV(1,Wrk_Sts) ,XIC(Sts_RunningFwd) MOV(2,Wrk_Sts) ,XIC(Sts_RunningRev) MOV(3,Wrk_Sts) ,XIC(Sts_StartingFwd) MOV(5,Wrk_Sts) ,XIC(Sts_StartingRev) MOV(6,Wrk_Sts) ,XIC(Sts_JoggingFwd) MOV(8,Wrk_Sts) ,XIC(Sts_JoggingRev) MOV(9,Wrk_Sts) ,[XIC(Sts_StoppingFwd) ,XIC(Sts_StoppingRev) ] MOV(10,Wrk_Sts) ,XIC(Sts_Horn) MOV(14,Wrk_Sts) ,XIC(Nrdy_Fail) MOV(16,Wrk_Fault) ,XIC(Sts_FailToStop) MOV(17,Wrk_Fault) ,XIC(Sts_DriveFault) MOV(18,Wrk_Fault) ,[XIC(Sts_IOFault) ,XIC(Nrdy_IOFault) ] MOV(32,Wrk_Fault) ,XIC(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Sts,Val_Sts) MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed go";
				N: [CLR(Wrk_SrcQ) ,XIC(Cfg_UseSpeedFdbk) MOV(1,Wrk_SrcQ) ,[XIO(Cfg_HasRunFdbk) ,XIO(Cfg_HasSpeedFdbk) ] MOV(2,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,[XIC(Err_FdbkRaw) ,XIC(Err_FdbkEU) ] MOV(35,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration$N"
				    "$N"
				    "If the drive is using run feedback (for state) and has speed feedback, all is live and good.$N"
				    "If the drive is using speed feedback to determine run state, state is assumed good.$N"
				    "If the drive does not have speed feedback, speed is no-feedback assumed good.";
				N: MOV(SrcQ_IO,SrcQ);
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for r";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) ,GRT(FailToStart.Val_Notify,Wrk_Notify) MOV(FailToStart.Val_Notify,Wrk_Notify) ,GRT(FailToStop.Val_Notify,Wrk_Notify) MOV(FailToStop.Val_Notify,Wrk_Notify) ,GRT(IntlkTrip.Val_Notify,Wrk_Notify) MOV(IntlkTrip.Val_Notify,Wrk_Notify) ,GRT(DriveFault.Val_Notify,Wrk_Notify) MOV(DriveFault.Val_Notify,Wrk_Notify) ,GRT(IOFault.Val_Notify,Wrk_Notify) MOV(IOFault.Val_Notify,Wrk_Notify) ,[XIC(FailToStart.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(FailToStop.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IntlkTrip.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(DriveFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IOFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTE(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_Notify,Val_NotifyAll) MOV(Wrk_UnackAlmC,Val_UnackAlmC) ];
				RC: "This rung identifies:$N"
				    "* if a latched Shed condition requires a reset in order to run the motor;$N"
				    "* if that reset or any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(FailToStart.Sts_RdyAck) ,XIC(FailToStop.Sts_RdyAck) ,XIC(IntlkTrip.Sts_RdyAck) ,XIC(IOFault.Sts_RdyAck) ,XIC(DriveFault.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(FailToStart.Sts_RdyReset) ,XIC(FailToStop.Sts_RdyReset) ,XIC(IntlkTrip.Sts_RdyReset) ,XIC(DriveFault.Sts_RdyReset) ,XIC(IOFault.Sts_RdyReset) ,XIC(Nrdy_Trip) ,XIC(Nrdy_PrioStop) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) XIO(Sts_IOFault) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear Ownership, set drive to STOP, clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, set the Ownership to NO OWNER (0).";
				N: CLR(PSet_Owner)CLR(Val_Owner);
				RC: "============================================================$N"
				    "$QASPECT$Q OWNERSHIP$N"
				    "============================================================$N"
				    "Using the Command Source determined above, and the Cfg_OperKeep, Cfg_ProgKeep and$N"
				    "Cfg_ExtKeep bits, determin";
				N: [[XIC(Cfg_OperKeep.0) XIC(Cfg_ProgKeep.0) ,XIC(Cfg_OperKeep.0) XIC(Cfg_ExtKeep.0) ,XIC(Cfg_ExtKeep.0) XIC(Cfg_ProgKeep.0) ] OTU(Cfg_OperKeep.0) OTU(Cfg_ProgKeep.0) OTU(Cfg_ExtKeep.0) ,[XIC(Cfg_OperKeep.1) XIC(Cfg_ProgKeep.1) ,XIC(Cfg_OperKeep.1) XIC(Cfg_ExtKeep.1) ,XIC(Cfg_ExtKeep.1) XIC(Cfg_ProgKeep.1) ] OTU(Cfg_OperKeep.1) OTU(Cfg_ProgKeep.1) OTU(Cfg_ExtKeep.1) ,[XIC(Cfg_OperKeep.3) XIC(Cfg_ProgKeep.3) ,XIC(Cfg_OperKeep.3) XIC(Cfg_ExtKeep.3) ,XIC(Cfg_ExtKeep.3) XIC(Cfg_ProgKeep.3) ] OTU(Cfg_OperKeep.3) OTU(Cfg_ProgKeep.3) OTU(Cfg_ExtKeep.3) ];
				RC: "$QLurking$Q Commands not handled elsewhere are cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Commands.  #####";
				N: [OTU(OCmd_StartFwd) OTU(OCmd_StartRev) OTU(OCmd_Stop) ,OTU(OCmd_JogFwd) OTU(OCmd_JogRev) ,OTU(XCmd_StartFwd) OTU(XCmd_StartRev) OTU(XCmd_Stop) ,OTU(XCmd_JogFwd) OTU(XCmd_JogRev) ,OTU(PCmd_StartFwd) OTU(PCmd_StartRev) OTU(PCmd_Stop) ,OTU(MCmd_Bypass) OTU(MCmd_Check) ,CLR(Inp_OvrdCmd) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####";
				N: [OTU(ORdy_StartFwd) OTU(ORdy_StartRev) OTU(ORdy_Stop) ,OTU(ORdy_JogFwd) OTU(ORdy_JogRev) ,OTU(MRdy_Bypass) OTU(MRdy_Check) ,OTU(ORdy_Reset) OTU(ORdy_ResetAckAll) OTU(Sts_RdyAck) OTU(ORdy_SpeedRef) ];
				RC: "On powerup (prescan), set drive to stop.";
				N: OTU(Wrk_Run)OTU(Wrk_Jog);
				RC: "Reset the fault condition Shed latches.";
				N: OTU(Nrdy_PrioStop)OTU(Nrdy_Fail)OTU(Nrdy_IOFault);
				RC: "Outputs are cleared on Prescan.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-13:  Added Autible Alert on start.  #####";
				N: [OTU(Out_Start) OTU(Out_Stop) OTU(Out_Run) OTU(Out_Jog) ,OTU(Out_Fwd) OTU(Out_Rev) OTU(Out_ClearFault) OTU(Out_Horn) ,CLR(Out_SpeedRef) CLR(Out_Datalink) ];
				RC: "Show the enumerated drive command as NONE.$N"
				    "Show the enumerated drive feedback as NONE.$N"
				    "Show the enumerated drive status as POWERUP / UNKNOWN.";
				N: CLR(Val_Cmd)CLR(Val_Fdbk)CLR(Val_Sts);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION CM_Pump (Description := "Pump Control Module",
	                                       Revision := "1.2",
	                                       RevisionNote := "1.0 Published$N1.1 Using the P_VSD block$N1.2 Included Pump Cal into the AOI",
	                                       Vendor := "AES Inc.",
	                                       ExecutePrescan := No,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := No,
	                                       CreatedDate := "2020-04-01T07:52:09.093Z",
	                                       CreatedBy := "Not Available",
	                                       EditedDate := "2021-04-26T16:14:15.507Z",
	                                       EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                       SoftwareRevision := "v32.03")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Drive : P_VSD (Description := "Pump Drive",
			                 Usage := InOut,
			                 Required := Yes,
			                 Visible := Yes);
			Intlk : P_Intlk (Description := "Pump Interlocks",
			                 Usage := InOut,
			                 Required := Yes,
			                 Visible := Yes);
			OwnerID : DINT (Description := "Pump Owner ID",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			Sts_Available : BOOL (Description := "Control Module is Available For Control",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_CMOwned : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_InPosition : BOOL (Description := "Pump running at Commanded Speed",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Cal_CollectionType : BOOL (Description := "0 = Mass, 1 = Volume",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			Cal_CollectedQuantity : REAL (Description := "Operator Input Collected Mass or Volume obtained",
			                                 Usage := Input,
			                                 RADIX := Float,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0.00000000e+000);
			Cal_Density : REAL (Description := "Operator Input Density (g/ml)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			Cal_Duration : REAL (Description := "Operator Input pump run duration (min)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			Cal_PumpSpeed : REAL (Description := "Set Pump Speed in %",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0.00000000e+000);
			Cal_CmdStart : BOOL (Description := "Start Cal Sequence",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cal_CmdStop : BOOL (Description := "Stop/Abort Cal Sequence",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Cal_Aborted : BOOL (Description := "Calibration Sequence is Aborted",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Cal_Complete : BOOL (Description := "Calibration Sequence is Complete",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Cal_Running : BOOL (Description := "Calibration Sequence is Active",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Cal_EUMax : REAL (Description := "Calculated max EU (mL/min)",
			                     Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0.00000000e+000);
			Cal_Phase2Active : BOOL (Description := "Cal Pump run complete, now calculating Pump EU Max",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Cal_CmdPhase2Accept : BOOL (Description := "Accept button pressed by Operator after inputing collected volume or mass",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 0);
			SPDev : REAL (Description := "Setpoint Deviation Allowed",
			                 Usage := Input,
			                 RADIX := Float,
			                 Required := No,
			                 Visible := No,
			                 DefaultData := 0.00000000e+000);
			RunTime_Current : DINT (Description := "Current RunTime",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			RunTime_Life : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			RunTime_Reset : BOOL (Description := "Reset Runtime Life",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Req_FeedReplace : BOOL (Description := "Feed Replace Request from Pump Scale",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			FeedReplace_Active : BOOL (Description := "Feed Replace Sequence Active on this pump",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			Val_AlarmState : DINT (Description := "Alarm State$N20 = Interlock Active$N21 = Failed to Start$N22 = Failed to Stop$N22 = Drive in Alarm$N23 = Drive Faulted",
			                          COMMENT.0 := "Stopped",
			                          COMMENT.1 := "Running Fwd",
			                          COMMENT.2 := "Running Rev",
			                          COMMENT.3 := "Starting",
			                          COMMENT.4 := "Stopping",
			                          COMMENT.20 := "Fail to Start",
			                          COMMENT.21 := "Fail to Stop",
			                          COMMENT.22 := "Drive Alarm",
			                          COMMENT.23 := "Drive Fault",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Cal_Started : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Cal_Runtime : REAL (Description := "Accumulation time converted to minutes$N-For HMI-",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0.00000000e+000);
		END_PARAMETERS

		LOCAL_TAGS
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			Ref_HrCount : COUNTER (Description := "Refrence Hours",
			                      ExternalAccess := None,
			                      DefaultData := "[0,8766,0]");
			Ref_Timer : TIMER (Description := "Reference Timer",
			                    ExternalAccess := None,
			                    DefaultData := "[0,3700000,0]");
			SPDev_HiHiLimit : REAL (Description := "Setpoint Deveation HiHi Limit",
			                          RADIX := Float,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0.00000000e+000);
			SPDev_LoLoLimit : REAL (Description := "Setpoint Deveation LoLo Limit",
			                          RADIX := Float,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0.00000000e+000);
			Time : DINT (Description := "Current runtime in seconds",
			               RADIX := Decimal,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			Cal_CalculatedVol : REAL (Description := "Internal calculated volume if the operator selected volume",
			                            RADIX := Float,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0.00000000e+000);
			Cal_RunTimer : TIMER (ExternalAccess := None,
			                       DefaultData := "[0,0,0]");
			Cal_RunTimer2 : TIMER (Description := "Run Timer used to calculate how long the pump is running",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "============================================================$N"
				    "Pump Control Module$N"
				    "============================================================";
				N: NOP();
				RC: "Pump Ownership Logic";
				N: XIC(s:fs)MOV(0,OwnerID);
				N: [XIO(Cal_Running) MOV(OwnerID,Drive.PSet_Owner) ,NEQ(OwnerID,0) OTE(Sts_CMOwned) ,EQU(OwnerID,0) OTE(Sts_Available) ];
				RC: "Interlock Mapping Logic";
				N: XIC(Intlk.Sts_IntlkOK)XIO(FeedReplace_Active)OTE(Drive.Inp_IntlkOK);
				N: XIO(FeedReplace_Active)ONS(ONS.1)OTL(Intlk.PCmd_Reset);
				RC: "Pump is in positon when it is running and at speed";
				N: [XIC(Drive.Cfg_HasRunFdbk) [XIC(Drive.Sts_RunningFwd) ,XIC(Drive.Sts_RunningRev) ] LIM(SPDev_LoLoLimit,Drive.Val_SpeedFdbk,SPDev_HiHiLimit) ,XIO(Drive.Cfg_HasRunFdbk) ][OTE(Sts_InPosition) ,OTE(Drive.Inp_AtSpeed) ];
				RC: "Pump Calibration Logic$N"
				    "$N"
				    "When the Operator presses start on the HMI, convert the pump cal duration input by operator to ms for the timer and start the pump.$N"
				    "Once hte pump finished running, the operator will inpu the volume or mass collected and the Pump EU max is calculated.$N"
				    "Set the pump EUMax to the calibrated EUMax after a calibration is completed";
				N: XIC(Cal_CmdStart)RES(Cal_RunTimer)RES(Cal_RunTimer2)CPT(Cal_RunTimer.PRE,Cal_Duration * 60000)CPT(Cal_RunTimer2.PRE,Cal_Duration * 60000 * 2)OTL(Drive.PCmd_Prog)OTU(Cal_CmdStop)OTU(Cal_Complete)OTU(Cal_Aborted)OTL(Cal_Started);
				N: XIC(Cal_Started)XIO(Cal_RunTimer.DN)[MOV(0,Drive.Cfg_SpeedRefEUMin) MOV(0,Drive.Cfg_SpeedFdbkEUMin) MOV(0,Drive.Cfg_MinSpdRef) ,MOV(100,Drive.Cfg_SpeedRefEUMax) MOV(100,Drive.Cfg_SpeedFdbkEUMax) MOV(100,Drive.Cfg_MaxSpdRef) ][MOV(Cal_PumpSpeed,Drive.PSet_SpeedRef) OTL(Drive.PCmd_StartFwd) ,RTO(Cal_RunTimer,?,?) ];
				N: XIC(Cal_Started)XIC(Drive.Sts_Prog)XIC(Drive.Sts_RunningFwd)OTL(Cal_Running);
				N: XIC(Cal_Running)XIC(Cal_RunTimer.DN)OTL(Drive.PCmd_Stop)MOV(0,Drive.PSet_SpeedRef)OTL(Cal_Phase2Active)OTU(Cal_Started);
				N: [XIC(Cal_Started) ,XIC(Cal_Running) ]XIC(Drive.Sts_RunningFwd)RTO(Cal_RunTimer2,?,?);
				N: XIC(Cal_Phase2Active)XIC(Cal_CmdPhase2Accept)[XIC(Cal_CollectionType) [GRT(Cal_Density,0) DIV(Cal_CollectedQuantity,Cal_Density,Cal_CalculatedVol) ,LEQ(Cal_Density,0) MOV(Cal_CollectedQuantity,Cal_CalculatedVol) ] ,XIO(Cal_CollectionType) MOV(Cal_CollectedQuantity,Cal_CalculatedVol) ]CPT(Cal_EUMax,(Cal_CalculatedVol / Cal_Runtime) * (100 / Cal_PumpSpeed))OTU(Cal_Running)OTL(Cal_Complete);
				N: XIC(Cal_Complete)ONS(ONS.2)MOV(Cal_EUMax,Drive.Cfg_SpeedRefEUMax)MOV(Cal_EUMax,Drive.Cfg_SpeedFdbkEUMax)MOV(Cal_EUMax,Drive.Cfg_MaxSpdRef)OTU(Cal_Phase2Active)RES(Cal_RunTimer)RES(Cal_RunTimer2);
				N: XIC(Cal_CmdStop)ONS(ONS.0)MOV(0,Drive.PSet_SpeedRef)OTL(Drive.PCmd_Stop)OTU(Cal_Started)OTU(Cal_Running)OTU(Cal_Phase2Active)OTU(Cal_Complete)OTU(Cal_CmdStop)RES(Cal_RunTimer)RES(Cal_RunTimer2)OTL(Cal_Aborted);
				N: CPT(Cal_Runtime,Cal_RunTimer2.ACC / 60000);
				RC: "$N"
				    "Alarms$N"
				    " ";
				N: [XIO(Intlk.Sts_IntlkOK) MOV(20,Val_AlarmState) ,XIC(Drive.Alm_FailToStart) MOV(21,Val_AlarmState) ,XIC(Drive.Alm_FailToStop) MOV(22,Val_AlarmState) ,XIC(Drive.Alm_DriveFault) MOV(23,Val_AlarmState) ,XIC(Drive.Alm_IOFault) MOV(24,Val_AlarmState) ];
				RC: "Get reference time for time calculations.$N"
				    "Reset the timer every hour to prevent overruns and count up the number of hours yearly$N"
				    "";
				N: [XIC(Drive.Sts_RunningFwd) ,XIC(Drive.Sts_RunningRev) ][[XIO(Ref_Timer.DN) TON(Ref_Timer,?,?) ,GEQ(Ref_Timer.ACC,3600000) [CTU(Ref_HrCount,?,?) ,RES(Ref_Timer) ,XIC(Ref_HrCount.DN) RES(Ref_HrCount) ] ] ,CPT(Time,Ref_Timer.ACC/1000 + Ref_HrCount.ACC*3600) ];
				N: XIC(Drive.Sts_Stopped)[RES(Ref_Timer) RES(Ref_HrCount) ,MOV(0,RunTime_Current) ];
				RC: "Calculate Runtime$N"
				    "Runtimes are Accumulated when the device is $QRunning$Q$N"
				    "(Time is in seconds, Runtimes are in hours)";
				N: [XIC(Drive.Sts_RunningFwd) ,XIC(Drive.Sts_RunningRev) ][CPT(RunTime_Life,( Time / 3600) + RunTime_Life) ,CPT(RunTime_Current,Time) ];
				RC: "Reset Runtime Holding Registers$N"
				    "Current (since last start) is reset when device is determined $QStopped$Q$N"
				    "Life (lifetime/total) is reset only when selected to be reset (One-Time Push Button)";
				N: XIC(RunTime_Reset)MOV(0,RunTime_Life)OTU(RunTime_Reset);
				RC: "Calculating the Setpoint Deviation ";
				N: [ADD(Drive.Val_SpeedRef,SPDev,SPDev_HiHiLimit) ,SUB(Drive.Val_SpeedRef,SPDev,SPDev_LoLoLimit) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION CM_Totalizer2 (Revision := "1.0",
	                                             Vendor := "AES",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2021-04-15T00:43:30.963Z",
	                                             CreatedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                             EditedDate := "2021-04-16T05:20:33.136Z",
	                                             EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                             SoftwareRevision := "v32.03")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			CMD : BOOL (Description := "Start Command",
			               Usage := Input,
			               RADIX := Decimal,
			               Required := No,
			               Visible := No,
			               DefaultData := 0);
			Cmd_Reset : BOOL (Description := "Reset Totalizers",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Inp_Flowrate : REAL (Description := "Input from Flow Meter",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0.00000000e+000);
			Inp_Target_Setpoint : REAL (Description := "Setpoint for Totalizer",
			                               Usage := Input,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := Yes,
			                               DefaultData := 0.00000000e+000);
			Inp_TimeBase : INT (Description := "Time Base of Flowrate Input$N0=Seconds$N1=Minutes$N2=Hours$N3=Days",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 1);
			Sts_Complete : BOOL (Description := "1 = Totalization Complete",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_Running : BOOL (Description := "1 = Totalizer Running",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Display_Totalized_Count : REAL (Description := "Current Totalized Count",
			                                   Usage := Output,
			                                   RADIX := Float,
			                                   Required := No,
			                                   Visible := Yes,
			                                   ExternalAccess := Read/Write,
			                                   DefaultData := 0.00000000e+000);
			Display_Totalized_Remaining : REAL (Description := "Total Remaining to Feed",
			                                       Usage := Output,
			                                       RADIX := Float,
			                                       Required := No,
			                                       Visible := Yes,
			                                       ExternalAccess := Read Only,
			                                       DefaultData := 0.00000000e+000);
			Display_Previous_Count : REAL (Description := "Previous Totalized Value before Last Reset",
			                                  Usage := Output,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read Only,
			                                  DefaultData := 0.00000000e+000);
			Sts_ResetDone : BOOL (Description := "Reset Complete",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Inp_EU : STRING_8 (Description := "Engineering Units to Display on HMI",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[0,'$00$00$00$00$00$00$00$00']");
			Cfg_Tagname : STRING_12 (Description := "Tagname Used For the HMI",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[7,'FIQ0xxx$00$00$00$00$00']");
			SUB_01 : FBD_MATH (ExternalAccess := None,
			                 DefaultData := "[3,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			Totalizer : TOTALIZER (ExternalAccess := None,
			                    DefaultData := "[1,0.00000000e+000,0,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,1,0,0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,5.60519386e-045,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			BOR_01 : FBD_BOOLEAN_OR (ExternalAccess := None,
			                 DefaultData := "[1,1,5.60519386e-045]");
			BNOT_01 : FBD_BOOLEAN_NOT (ExternalAccess := None,
			                  DefaultData := "[3,1,5.60519386e-045]");
			OSRI_01 : FBD_ONESHOT (ExternalAccess := None,
			                  DefaultData := "[1,1,5.60519386e-045]");
		END_LOCAL_TAGS

		FBD_ROUTINE Logic (SheetSize := "Tabloid - 11 x 17 in",
		                   SheetOrientation := Landscape)
			SHEET  (Name := "")
				IREF  (ID := 0,
				       X := 140,
				       Y := 160,
				       Operand := "CMD",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 1,
				       X := 140,
				       Y := 240,
				       Operand := "CMD",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 2,
				       X := 140,
				       Y := 280,
				       Operand := "Cmd_Reset",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 3,
				       X := 540,
				       Y := 480,
				       Operand := "Display_Totalized_Count",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 4,
				       X := 140,
				       Y := 100,
				       Operand := "Inp_Flowrate",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 5,
				       X := 140,
				       Y := 140,
				       Operand := "Inp_Target_Setpoint",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 6,
				       X := 540,
				       Y := 460,
				       Operand := "Inp_Target_Setpoint",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 7,
				       X := 140,
				       Y := 120,
				       Operand := "Inp_TimeBase",
				       HideDescription := No)
				END_IREF

				OREF  (ID := 8,
				       X := 940,
				       Y := 120,
				       Operand := "Display_Previous_Count",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 9,
				       X := 940,
				       Y := 100,
				       Operand := "Display_Totalized_Count",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 10,
				       X := 820,
				       Y := 460,
				       Operand := "Display_Totalized_Remaining",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 11,
				       X := 950,
				       Y := 200,
				       Operand := "Sts_Complete",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 12,
				       X := 940,
				       Y := 180,
				       Operand := "Sts_ResetDone",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 13,
				       X := 930,
				       Y := 160,
				       Operand := "Sts_Running",
				       HideDescription := No)
				END_OREF

				BNOT_BLOCK  (ID := 14,
				             X := 220,
				             Y := 180,
				             Operand := "BNOT_01",
				             VisiblePins := "In, Out",
				             HideDescription := No)
				END_BNOT_BLOCK

				BOR_BLOCK  (ID := 15,
				            X := 360,
				            Y := 180,
				            Operand := "BOR_01",
				            VisiblePins := "In1, In2, Out",
				            HideDescription := No)
				END_BOR_BLOCK

				OSRI_BLOCK  (ID := 16,
				             X := 340,
				             Y := 300,
				             Operand := "OSRI_01",
				             VisiblePins := "InputBit, OutputBit",
				             HideDescription := No)
				END_OSRI_BLOCK

				SUB_BLOCK  (ID := 17,
				            X := 640,
				            Y := 400,
				            Operand := "SUB_01",
				            VisiblePins := "SourceA, SourceB, Dest",
				            HideDescription := No)
				END_SUB_BLOCK

				TOT_BLOCK  (ID := 18,
				            X := 600,
				            Y := 40,
				            Operand := "Totalizer",
				            VisiblePins := "In, TimeBase, Target, ProgProgReq, ProgStartReq, ProgStopReq, ProgResetReq, Total, OldTotal, ProgOper, RunStop, ProgResetDone, TargetFlag, TargetDev1Flag, TargetDev2Flag",
				            HideDescription := No)
				END_TOT_BLOCK

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 18,
				       ToParameter := "ProgProgReq")
				END_WIRE

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 18,
				       ToParameter := "ProgStartReq")
				END_WIRE

				WIRE  (FromElementID := 1,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "In2")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 16,
				       ToParameter := "InputBit")
				END_WIRE

				WIRE  (FromElementID := 3,
				       FromParameter := "",
				       ToElementID := 17,
				       ToParameter := "SourceB")
				END_WIRE

				WIRE  (FromElementID := 4,
				       FromParameter := "",
				       ToElementID := 18,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 5,
				       FromParameter := "",
				       ToElementID := 18,
				       ToParameter := "Target")
				END_WIRE

				WIRE  (FromElementID := 6,
				       FromParameter := "",
				       ToElementID := 17,
				       ToParameter := "SourceA")
				END_WIRE

				WIRE  (FromElementID := 7,
				       FromParameter := "",
				       ToElementID := 18,
				       ToParameter := "TimeBase")
				END_WIRE

				WIRE  (FromElementID := 14,
				       FromParameter := "Out",
				       ToElementID := 15,
				       ToParameter := "In1")
				END_WIRE

				WIRE  (FromElementID := 15,
				       FromParameter := "Out",
				       ToElementID := 18,
				       ToParameter := "ProgStopReq")
				END_WIRE

				WIRE  (FromElementID := 16,
				       FromParameter := "OutputBit",
				       ToElementID := 18,
				       ToParameter := "ProgResetReq")
				END_WIRE

				WIRE  (FromElementID := 17,
				       FromParameter := "Dest",
				       ToElementID := 10,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 18,
				       FromParameter := "OldTotal",
				       ToElementID := 8,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 18,
				       FromParameter := "Total",
				       ToElementID := 9,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 18,
				       FromParameter := "TargetFlag",
				       ToElementID := 11,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 18,
				       FromParameter := "ProgResetDone",
				       ToElementID := 12,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 18,
				       FromParameter := "RunStop",
				       ToElementID := 13,
				       ToParameter := "")
				END_WIRE

			END_SHEET

		END_FBD_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_Gate (Description := "Condition Gate/Delay",
	                                      Revision := "4.10",
	                                      RevisionExtension := ".00 Release",
	                                      RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                      Vendor := "Rockwell Automation",
	                                      ExecutePrescan := Yes,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := Yes,
	                                      CreatedDate := "2012-10-01T18:56:53.162Z",
	                                      CreatedBy := "Not Available",
	                                      EditedDate := "2020-12-08T03:31:27.787Z",
	                                      EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                      SoftwareRevision := "v32.02",
	                                      AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction provides a $Qgate$Q for a discrete Input signal and$Nprovides on-delay and off-delay timing for the gated signal.$N$NWhen the Gate input is true, the instruction Input is passed through$Nto the Output, with on-delay and off-delay timing applied.$N$NWhen the Gate input is false, the Output is kept off$N(note: off-delay still applies!)$N$NThis instruction is usually used between a comparison$N(analog threshold with deadband or discrete logic)$Nand a P_Alarm instance, but may be used as a$Ngated on-delay/off-delay timer generally.$N$NWhen EnableIn  is FALSE (e.g., on a false LD rung), the Input $QInp$Q$Nis inverted.  Note that the Gate input (Inp_Gate) is NOT inverted!!!$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Unmodified, up-rev only for Library 4.10.00$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-01)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_ (e.g., HMI_Lib, HMI_Type).$N* Changed delay time configuration items to REAL seconds$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp : BOOL (Description := "Input Condition: e.g., result of comparison",
			               Usage := Input,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               DefaultData := 0);
			Inp_Gate : BOOL (Description := "Gate Input: 1=enable On Delay / Off Delay after Gate Delay, 0=disable",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 1);
			Cfg_GateDly : REAL (Description := "Gate Delay (s): time after Gate Input true to enable On/Off Delay",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			Cfg_OnDly : REAL (Description := "On Delay (s): If Gate Delay done, time Inp must be true to set Out true",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0.00000000e+000);
			Cfg_OffDly : REAL (Description := "Off Delay (s): Time after Inp  or Gate goes to 0 for Out to go to 0",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0.00000000e+000);
			Out : BOOL (Description := "Output after On Delay, Off Delay, enabled by Gate",
			               Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			Sts_Gate : BOOL (Description := "1=Gate Delay done, Output is enabled",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config (see detail Err_ bits for reason), display icon",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: On Delay, Off Delay, Gate Delay Time Invalid (use 0 to 2147483 s)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			P_Gate : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Wrk_OffDlyT : TIMER (Description := "Off Delay Timer",
			                      ExternalAccess := Read Only,
			                      DefaultData := "[0,0,0]");
			Wrk_OnDlyT : TIMER (Description := "On Delay Timer",
			                     ExternalAccess := Read Only,
			                     DefaultData := "[0,0,0]");
			Wrk_GateT : TIMER (Description := "Gate Delay Timer",
			                    ExternalAccess := Read Only,
			                    DefaultData := "[0,0,0]");
			Cfg_InpCond : STRING_20 (Description := "Displayed text of P_Gate$'s Input (Inp) Condition",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[15,'Input Condition$00$00$00$00$00']");
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			HMI_Type : STRING_16 (Description := "Must contain AOI name, used for HMI and Information S/W",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[6,'P_Gate$00$00$00$00$00$00$00$00$00$00']");
			Cfg_GateCond : STRING_20 (Description := "Displayed text of P_Gate$'s Gating (Inp_Gate) Condition",
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[16,'Gating Condition$00$00$00$00']");
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Same as main Logic routine, except Inp is inverted (for use in LD logic)  (Inp_Gate is NOT inverted!!!)")
				RC: "============================================================$N"
				    "EnableIn FALSE :  CONFIGURATION PROCESSING$N"
				    "============================================================$N"
				    "Flag a Configuration Error if the Gate Delay, On Delay$N"
				    "or Off Delay timer preset is invalid$N"
				    "(and set timer to default zero preset, non-faulting value).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Changed delay time configuration items to REAL seconds.  #####";
				N: [MUL(Cfg_GateDly,1000.0,Wrk_GateT.PRE) XIC(Wrk_GateT.PRE.31) CLR(Wrk_GateT.PRE) ,MUL(Cfg_OnDly,1000.0,Wrk_OnDlyT.PRE) XIC(Wrk_OnDlyT.PRE.31) CLR(Wrk_OnDlyT.PRE) ,MUL(Cfg_OffDly,1000.0,Wrk_OffDlyT.PRE) XIC(Wrk_OffDlyT.PRE.31) CLR(Wrk_OffDlyT.PRE) ]OTE(Err_Timer)OTE(Sts_Err);
				RC: "============================================================$N"
				    "GATE DELAY, ON DELAY, OFF DELAY PROCESSING$N"
				    "============================================================$N"
				    "FOR THE ENABLE_IN_FALSE ROUTINE, the CONDITION Input is$N"
				    "INVERTED, to support the   XIC (condition)  P_Gate (P_Gate backing tag)$N"
				    "construct for instantiation.  This will use Inp = 1,$N"
				    "making the condition input follow the rung condition.$N"
				    "$N"
				    "If the Gate Input is true, run the Gate Delay timer.$N"
				    "Once the Gate Delay is complete, enable the$N"
				    "On Delay and Off Delay that follow the INVERTED input.$N"
				    "$N"
				    "Report the Gate Delay status and the final Output status (after all delays).$N"
				    "$N"
				    "@@@@@  NOTE: Doubled TONs are used to ensure that  @@@@@$N"
				    "@@@@@  .DN bit transitions on same scan if Preset = 0 !  @@@@@";
				N: [XIC(Inp_Gate) TON(Wrk_GateT,?,?) TON(Wrk_GateT,?,?) ,XIC(Wrk_GateT.DN) OTE(Sts_Gate) XIO(Inp) TON(Wrk_OnDlyT,?,?) TON(Wrk_OnDlyT,?,?) ,[XIC(Inp) ,XIO(Inp_Gate) ] TON(Wrk_OffDlyT,?,?) TON(Wrk_OffDlyT,?,?) ,XIC(Wrk_OnDlyT.DN) OTL(Out) ,XIC(Wrk_OffDlyT.DN) OTU(Out) ];
		END_ROUTINE

		ROUTINE Logic (Description := "Gate the input and apply on-delay and off-delay timing")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_Gate:  PROCESS -- CONDITION GATE / DELAY$N"
				    "============================================================$N"
				    "Revision 4.10.00 Release  2019-03-08:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, and V3.x Revision History archived.$N"
				    "V4.00.00  2018-06-07:  Changed Inf_ items to HMI_ (e.g., HMI_Lib, HMI_Type).$N"
				    "Changed delay time configuration items to REAL seconds.$N"
				    "V4.10.00  2019-03-08:  Unmodified, up-rev only for Library 4.10.00$N"
				    "============================================================$N"
				    "This Instruction provides a $Qgate$Q for a discrete Input signal and$N"
				    "provides on-delay and off-delay timing for the gated signal.$N"
				    "$N"
				    "When the Gate input is true, the instruction Input is passed through$N"
				    "to the Output, with on-delay and off-delay timing applied.$N"
				    "$N"
				    "When the Gate input is false, the Output is kept off$N"
				    "(note: off-delay still applies!)$N"
				    "$N"
				    "This instruction is usually used between a comparison$N"
				    "(analog threshold with deadband or discrete logic)$N"
				    "and a P_Alarm instance, but may be used as a$N"
				    "gated on-delay/off-delay timer generally.$N"
				    "$N"
				    "When EnableIn  is FALSE (e.g., on a false LD rung),$N"
				    "the Input $QInp$Q is inverted.  Note that the Gate$N"
				    "input (Inp_Gate) is NOT inverted!!!$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.";
				N: JMP(SkipText)LOWER(Cfg_InpCond,Cfg_GateCond)LOWER(HMI_Lib,HMI_Type);
				RC: "============================================================$N"
				    "CONFIGURATION PROCESSING$N"
				    "============================================================$N"
				    "Flag a Configuration Error if the Gate Delay, On Delay$N"
				    "or Off Delay timer preset is invalid$N"
				    "(and set timer to default zero preset, non-faulting value).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-07:  Changed delay time configuration items to REAL seconds.  #####";
				N: LBL(SkipText)[MUL(Cfg_GateDly,1000.0,Wrk_GateT.PRE) XIC(Wrk_GateT.PRE.31) CLR(Wrk_GateT.PRE) ,MUL(Cfg_OnDly,1000.0,Wrk_OnDlyT.PRE) XIC(Wrk_OnDlyT.PRE.31) CLR(Wrk_OnDlyT.PRE) ,MUL(Cfg_OffDly,1000.0,Wrk_OffDlyT.PRE) XIC(Wrk_OffDlyT.PRE.31) CLR(Wrk_OffDlyT.PRE) ]OTE(Err_Timer)OTE(Sts_Err);
				RC: "============================================================$N"
				    "GATE DELAY, ON DELAY, OFF DELAY PROCESSING$N"
				    "============================================================$N"
				    "If the Gate Input is true, run the Gate Delay timer.$N"
				    "Once the Gate Delay is complete, enable the$N"
				    "On Delay and Off Delay that follow the input.$N"
				    "$N"
				    "Report the Gate Delay status and the final Output status (after all delays).$N"
				    "$N"
				    "@@@@@  NOTE: Doubled TONs are used to ensure that  @@@@@$N"
				    "@@@@@  .DN bit transitions on same scan if Preset = 0 !  @@@@@";
				N: [XIC(Inp_Gate) TON(Wrk_GateT,?,?) TON(Wrk_GateT,?,?) ,XIC(Wrk_GateT.DN) OTE(Sts_Gate) XIC(Inp) TON(Wrk_OnDlyT,?,?) TON(Wrk_OnDlyT,?,?) ,[XIO(Inp) ,XIO(Inp_Gate) ] TON(Wrk_OffDlyT,?,?) TON(Wrk_OffDlyT,?,?) ,XIC(Wrk_OnDlyT.DN) OTL(Out) ,XIC(Wrk_OffDlyT.DN) OTU(Out) ];
		END_ROUTINE

		ROUTINE Prescan (Description := "Set the Gate Input to 1 (default value) on prescan")
				RC: "============================================================$N"
				    "PRESCAN PROCESSING$N"
				    "============================================================$N"
				    "Set the Gate Input to 1 (default value) on Prescan to enable$N"
				    "statuses / alarms that have Gate input unconnected.";
				N: OTL(Inp_Gate);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_AInAdv (Description := "Advanced Analog Input",
	                                        Revision := "4.10",
	                                        RevisionExtension := ".00 Release",
	                                        RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                        Vendor := "Rockwell Automation",
	                                        ExecutePrescan := Yes,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := Yes,
	                                        CreatedDate := "2008-03-13T19:51:06.608Z",
	                                        CreatedBy := "Not Available",
	                                        EditedDate := "2020-12-08T03:29:41.294Z",
	                                        EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                        SoftwareRevision := "v32.02",
	                                        AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction monitors an Analog Input from a flow, level, pressure,$Ntemperature, or any other analog sensor, and provides:$N$N*  Scaling, from Input (Raw) to PV (Engineering) Units$N*  High-High, High, Low and Low-Low Status and Alarms, with Gate$N    inputs and configurable on-delay, off-delay and gate delay times$N*  Monitoring of bad/uncertain PV status, floating point exceptions$N    and out-of-range conditions, with PV Fail alarm$N*  Setting of a simulated input signal for process simulation$N*  Capturing of the lowest and highest PV excursion values$N*  Configuration for status thresholds, deadbands and range limits$N*  Maintenance Commands to allow manual override of the input signal (Substitute PV)$N$N**  Calculation of (filtered) signal rate of change with High Rate of Change alarm$N**  Square Root characterization for flow scaling based on differential-pressure input$N**  Reference (setpoint) value entry and alarms for deviation from reference (high, low)$N$N** = advanced capabilities in this instruction$N*  = basic capabilities included in P_AIn (analog input basic) instruction$NAlarms are provided by P_Alarm AOI instances.$NGating of status provided by P_Gate AOI instances.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.01)$NSee 4.10 Release Notes for details.$N* Added Control Limits.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.00 Release Notes for details.$N* Modified handling of SrcQ_IO and SrcQ.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-03)$NSee 4.00 Release Notes for details.$N* Removed P_Mode, PSet/Val_Owner and related OSets,$N   PSets and Vals.  Thresholds are now Cfgs.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added notify and unack count rollup for Channel object.$N* Added Err_Rate.$N* Changed Out-of-Range limit checks to use raw Input (Inp_PV)$N   instead of scaled PV (Val).  Changing EU scaling will not$N   necessitate changing fail thresholds and deadband.$N* Deleted Cfg_PCmdClear.  All Program Commands are now self-clearing.$N* Aligned ready bit naming with command bit names.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N* Removed Err_DB, code ensures Status Deadband configs are always valid.$N* Added configurable decimal places for display on HMI.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_PV : REAL (Description := "Input Signal (process variable) from Sensor",
			                  Usage := Input,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0.00000000e+000);
			Inp_PVSrcQ : DINT (Description := "Input Source and Quality (from Channel object, if available) (enum)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Inp_PVNotify : DINT (Description := "Related PV object alarm prio and ack status (enum)",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Inp_PVBad : BOOL (Description := "1=PV or I/O Comms Status Bad, 0=OK",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Inp_PVUncertain : BOOL (Description := "1=PV Value Not Reliable, 0=OK",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Inp_Sim : BOOL (Description := "1=Use simulated PV (Set_SimPV); 0=Use Input (Inp_PV)",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Inp_HiHiGate OF HiHiGate.Inp_Gate (Description := "High-High Status Gate, 1=enabled",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			Inp_HiGate OF HiGate.Inp_Gate (Description := "High Status Gate, 1=enabled",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_LoGate OF LoGate.Inp_Gate (Description := "Low Status Gate, 1=enabled",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_LoLoGate OF LoLoGate.Inp_Gate (Description := "Low-Low Status Gate, 1=enabled",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			Inp_HiRoCGate OF HiRoCGate.Inp_Gate (Description := "High Rate of Change Status Gate, 1=enabled",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			Inp_HiDevGate OF HiDevGate.Inp_Gate (Description := "High Deviation Status Gate, 1=enabled",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			Inp_LoDevGate OF LoDevGate.Inp_Gate (Description := "Low Deviation Status Gate, 1=enabled",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			Inp_FailGate OF FailGate.Inp_Gate (Description := "Fail Status Gate, 1=enabled",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			Inp_Reset : BOOL (Description := "1=Reset all Alarms requiring reset",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_UseSqRt : BOOL (Description := "1=Use Square Root characterization for DP to flow; 0=Linear",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Cfg_HasRoC : BOOL (Description := "1=Enables the Rate of Change calc and HiRoC alarm",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_HasDev : BOOL (Description := "1=Enables Reference entry and Deviation calc and alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_NoSubstPV : BOOL (Description := "1=Disallow selection of Substitute PV",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_HasChanObj : BOOL (Description := "1=Tells HMI a Channel object (AIChan, etc.) is used for Inp_PV",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_UseChanSrcQ : BOOL (Description := "1=Pass thru connected Channel$'s SrcQ value, 0=generate SrcQ",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_PVDecPlcs : DINT (Description := "Number of decimal places for PV display (0..6)",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 2);
			Cfg_HasHiHiAlm OF HiHi.Cfg_Exists (Description := "1=High-High Alarm exists and will be checked",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			Cfg_HasHiAlm OF Hi.Cfg_Exists (Description := "1=High Alarm exists and will be checked",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			Cfg_HasLoAlm OF Lo.Cfg_Exists (Description := "1=Low Alarm exists and will be checked",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			Cfg_HasLoLoAlm OF LoLo.Cfg_Exists (Description := "1=Low-Low Alarm exists and will be checked",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			Cfg_HasHiRoCAlm OF HiRoC.Cfg_Exists (Description := "1=High Rate of Change Alarm exists and will be checked",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_HasHiDevAlm OF HiDev.Cfg_Exists (Description := "1=High Deviation Alarm exists and will be checked",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_HasLoDevAlm OF LoDev.Cfg_Exists (Description := "1=Low Deviation Alarm exists and will be checked",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_HasFailAlm OF Fail.Cfg_Exists (Description := "1=Analog Input Failure Alarm exists and should be scanned",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			Cfg_HiHiResetReqd OF HiHi.Cfg_ResetReqd (Description := "1=Reset required to clear High-High Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_HiResetReqd OF Hi.Cfg_ResetReqd (Description := "1=Reset required to clear High Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_LoResetReqd OF Lo.Cfg_ResetReqd (Description := "1=Reset required to clear Low Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_LoLoResetReqd OF LoLo.Cfg_ResetReqd (Description := "1=Reset required to clear Low-Low Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_HiRoCResetReqd OF HiRoC.Cfg_ResetReqd (Description := "1=Reset required to clear High Rate of Change Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_HiDevResetReqd OF HiDev.Cfg_ResetReqd (Description := "1=Reset required to clear High Deviation Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_LoDevResetReqd OF LoDev.Cfg_ResetReqd (Description := "1=Reset required to clear Low Deviation Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_FailResetReqd OF Fail.Cfg_ResetReqd (Description := "1=Reset required to clear Analog InputFailure Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_HiHiAckReqd OF HiHi.Cfg_AckReqd (Description := "1=Acknowledge required for High-High Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_HiAckReqd OF Hi.Cfg_AckReqd (Description := "1=Acknowledge required for High Alarm",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			Cfg_LoAckReqd OF Lo.Cfg_AckReqd (Description := "1=Acknlowledge required for Low Alarm",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			Cfg_LoLoAckReqd OF LoLo.Cfg_AckReqd (Description := "1=Acknowledge required for Low-Low Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_HiRoCAckReqd OF HiRoC.Cfg_AckReqd (Description := "1=Acknowledge required for High Rate of Change Alarm",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_HiDevAckReqd OF HiDev.Cfg_AckReqd (Description := "1=Acknowledge required for High Deviation Alarm",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_LoDevAckReqd OF LoDev.Cfg_AckReqd (Description := "1=Acknowledge required for Low Deviation Alarm",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_FailAckReqd OF Fail.Cfg_AckReqd (Description := "1=Acknowledge required for Analog Input Failure Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			Cfg_HiHiSeverity OF HiHi.Cfg_Severity (Description := "High-High Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_HiSeverity OF Hi.Cfg_Severity (Description := "High Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			Cfg_LoSeverity OF Lo.Cfg_Severity (Description := "Low Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			Cfg_LoLoSeverity OF LoLo.Cfg_Severity (Description := "Low-Low Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_HiRoCSeverity OF HiRoC.Cfg_Severity (Description := "High Rate of Change Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_HiDevSeverity OF HiDev.Cfg_Severity (Description := "High Deviation Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_LoDevSeverity OF LoDev.Cfg_Severity (Description := "Low Deviation Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_FailSeverity OF Fail.Cfg_Severity (Description := "Failure Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_InpRawMin : REAL (Description := "Input (unscaled) Minimum for Scaling",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0.00000000e+000);
			Cfg_InpRawMax : REAL (Description := "Input (unscaled) Maximum for Scaling",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 1.00000000e+002);
			Cfg_PVEUMin : REAL (Description := "PV (Output) Minimum for Scaling to EU",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			Cfg_PVEUMax : REAL (Description := "PV (Output) Maximum for Scaling to EU",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1.00000000e+002);
			Cfg_FiltTC : REAL (Description := "PV Filter Time Constant (sec),$N0.0 = unfiltered",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0.00000000e+000);
			Cfg_RateTime : REAL (Description := "PV Rate of Change time base (sec) 60=/min, 3600=/hr",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+000);
			Cfg_Ref : REAL (Description := "Analog Reference for Deviation Alarms (EU)",
			                   Usage := Input,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0.00000000e+000);
			Cfg_CtrlHiHiLim : REAL (Description := "Current High-High Control Threshold",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 1.50000000e+038);
			Cfg_CtrlHiHiDB : REAL (Description := "High-High Control Deadband (EU)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 1.00000000e+000);
			Cfg_CtrlHiLim : REAL (Description := "Current High Control Threshold",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 1.50000000e+038);
			Cfg_CtrlHiDB : REAL (Description := "High Control Deadband (EU)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+000);
			Cfg_CtrlLoLim : REAL (Description := "Current Low Control Threshold",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := -1.50000000e+038);
			Cfg_CtrlLoDB : REAL (Description := "Low Control Deadband (EU)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+000);
			Cfg_CtrlLoLoLim : REAL (Description := "Current Low-Low Control Threshold",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := -1.50000000e+038);
			Cfg_CtrlLoLoDB : REAL (Description := "Low-Low Control Deadband (EU)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 1.00000000e+000);
			Cfg_HiHiLim : REAL (Description := "Current High-High Status Threshold",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 1.50000000e+038);
			Cfg_HiHiDB : REAL (Description := "High-High Status Deadband (EU)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 1.00000000e+000);
			Cfg_HiHiOnDly OF HiHiGate.Cfg_OnDly (Description := "Minimum time above High-High Limit to raise Status (sec)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No);
			Cfg_HiHiOffDly OF HiHiGate.Cfg_OffDly (Description := "Minimum time below High-High Limit (minus deadband) to clear Status (sec)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No);
			Cfg_HiHiGateDly OF HiHiGate.Cfg_GateDly (Description := "High-High Status Gate Delay (s)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No);
			Cfg_HiLim : REAL (Description := "Current High Status Threshold",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 1.50000000e+038);
			Cfg_HiDB : REAL (Description := "High Status Deadband (EU)",
			                    Usage := Input,
			                    RADIX := Float,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 1.00000000e+000);
			Cfg_HiOnDly OF HiGate.Cfg_OnDly (Description := "Minimum time above High Limit to raise Status (sec)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No);
			Cfg_HiOffDly OF HiGate.Cfg_OffDly (Description := "Minimum time below High Limit (minus deadband) to clear Status (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No);
			Cfg_HiGateDly OF HiGate.Cfg_GateDly (Description := "High Status Gate Delay (s)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No);
			Cfg_LoLim : REAL (Description := "Current Low Status Threshold",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := -1.50000000e+038);
			Cfg_LoDB : REAL (Description := "Low Status Deadband (EU)",
			                    Usage := Input,
			                    RADIX := Float,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 1.00000000e+000);
			Cfg_LoOnDly OF LoGate.Cfg_OnDly (Description := "Minimum time below Low Limit to raise Status (sec)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No);
			Cfg_LoOffDly OF LoGate.Cfg_OffDly (Description := "Minimum time above Low Limit (plus deadband) to clear Status (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No);
			Cfg_LoGateDly OF LoGate.Cfg_GateDly (Description := "Low Status Gate Delay (s)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No);
			Cfg_LoLoLim : REAL (Description := "Current Low-Low Status Threshold",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := -1.50000000e+038);
			Cfg_LoLoDB : REAL (Description := "Low-Low Status Deadband (EU)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 1.00000000e+000);
			Cfg_LoLoOnDly OF LoLoGate.Cfg_OnDly (Description := "Minimum time below Low-Low Limit to raise Status (sec)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No);
			Cfg_LoLoOffDly OF LoLoGate.Cfg_OffDly (Description := "Minimum time above Low-Low Limit (plus deadband) to clear Status (sec)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No);
			Cfg_LoLoGateDly OF LoLoGate.Cfg_GateDly (Description := "Low-Low Status Gate Delay (s)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No);
			Cfg_HiRoCLim : REAL (Description := "Current High Rate of Change Status Threshold",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 1.50000000e+038);
			Cfg_HiRoCDB : REAL (Description := "High Rate of Change Status Deadband (EU/rate time)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1.00000000e+000);
			Cfg_HiRoCOnDly OF HiRoCGate.Cfg_OnDly (Description := "Minimum time above High Rate of Change Limit to raise Status (sec)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No);
			Cfg_HiRoCOffDly OF HiRoCGate.Cfg_OffDly (Description := "Minimum time below High Rate of Change Limit (minus deadband) to clear Status (sec)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No);
			Cfg_HiRoCGateDly OF HiRoCGate.Cfg_GateDly (Description := "High Rate of Change Status Gate Delay (s)",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No);
			Cfg_HiDevLim : REAL (Description := "Current High Deviation Status Threshold",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 1.50000000e+038);
			Cfg_HiDevDB : REAL (Description := "High Deviation Status Deadband (EU)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1.00000000e+000);
			Cfg_HiDevOnDly OF HiDevGate.Cfg_OnDly (Description := "Minimum time above High Deviation Limit to raise Status (sec)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No);
			Cfg_HiDevOffDly OF HiDevGate.Cfg_OffDly (Description := "Minimum time below High Deviation Limit (minus deadband) to clear Status (sec)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No);
			Cfg_HiDevGateDly OF HiDevGate.Cfg_GateDly (Description := "High Deviation Status Gate Delay (s)",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No);
			Cfg_LoDevLim : REAL (Description := "Current Low Deviation Status Threshold",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := -1.50000000e+038);
			Cfg_LoDevDB : REAL (Description := "Low Deviation Status Deadband (EU)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1.00000000e+000);
			Cfg_LoDevOnDly OF LoDevGate.Cfg_OnDly (Description := "Minimum time below Low Deviation Limit to raise Status (sec)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No);
			Cfg_LoDevOffDly OF LoDevGate.Cfg_OffDly (Description := "Minimum time above Low Deviation Limit (plus deadband) to clear Status (sec)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No);
			Cfg_LoDevGateDly OF LoDevGate.Cfg_GateDly (Description := "Low Deviation Status Gate Delay (s)",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No);
			Cfg_FailHiLim : REAL (Description := "Out-of-Range (fail) High Limit (EU)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 1.03958336e+002);
			Cfg_FailLoLim : REAL (Description := "Out-of-Range (fail) Low Limit (EU)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := -2.08333325e+000);
			Cfg_FailDB : REAL (Description := "Out-of-Range (fail) High/Low Deadband (EU)",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 4.16666657e-001);
			Cfg_FailOnDly OF FailGate.Cfg_OnDly (Description := "Minimum time Bad or Out of Range to raise Fail Status (sec)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No);
			Cfg_FailOffDly OF FailGate.Cfg_OffDly (Description := "Minimum time OK or In Range to clear Fail Status (sec)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No);
			Cfg_FailGateDly OF FailGate.Cfg_GateDly (Description := "Fail Status Gate Delay (s)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No);
			MSet_SubstPV : REAL (Description := "Maintenance-Entered Substitute PV (EU)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			Set_SimPV : REAL (Description := "PV used in Simulation (Inp_Sim=1) (EU)",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0.00000000e+000);
			PCmd_ClearCapt : BOOL (Description := "Program Command to Clear the captured min / max PV excursion values",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			PCmd_Reset : BOOL (Description := "Program Command to Reset all Alarms requiring Reset",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_HiHiAck OF HiHi.PCmd_Ack (Description := "Program Command to Acknowledge High-High Alarm",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			PCmd_HiHiSuppress OF HiHi.PCmd_Suppress (Description := "Program Command to Suppress High-High Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_HiHiUnsuppress OF HiHi.PCmd_Unsuppress (Description := "Program Command to Unsuppress High-High Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_HiHiUnshelve OF HiHi.PCmd_Unshelve (Description := "Program Command to Unshelve High-High Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_HiAck OF Hi.PCmd_Ack (Description := "Program Command to Acknowledge High Alarm",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			PCmd_HiSuppress OF Hi.PCmd_Suppress (Description := "Program Command to Suppress High Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_HiUnsuppress OF Hi.PCmd_Unsuppress (Description := "Program Command to Unsuppress High Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_HiUnshelve OF Hi.PCmd_Unshelve (Description := "Program Command to Unshelve High Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_LoAck OF Lo.PCmd_Ack (Description := "Program Command to Acknowledge Low Alarm",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			PCmd_LoSuppress OF Lo.PCmd_Suppress (Description := "Program Command to Suppress Low Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_LoUnsuppress OF Lo.PCmd_Unsuppress (Description := "Program Command to Unsuppress Low Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_LoUnshelve OF Lo.PCmd_Unshelve (Description := "Program Command to Unshelve Low Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_LoLoAck OF LoLo.PCmd_Ack (Description := "Program Command to Acknowledge Low-Low Alarm",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			PCmd_LoLoSuppress OF LoLo.PCmd_Suppress (Description := "Program Command to Suppress Low-Low Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_LoLoUnsuppress OF LoLo.PCmd_Unsuppress (Description := "Program Command to Unsuppress Low-Low Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_LoLoUnshelve OF LoLo.PCmd_Unshelve (Description := "Program Command to Unshelve Low-Low Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_HiRoCAck OF HiRoC.PCmd_Ack (Description := "Program Command to Acknowledge High Rate of Change Alarm",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			PCmd_HiRoCSuppress OF HiRoC.PCmd_Suppress (Description := "Program Command to Suppress High Rate of Change Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_HiRoCUnsuppress OF HiRoC.PCmd_Unsuppress (Description := "Program Command to Unsuppress High Rate of Change Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_HiRoCUnshelve OF HiRoC.PCmd_Unshelve (Description := "Program Command to Unshelve High Rate of Change Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_HiDevAck OF HiDev.PCmd_Ack (Description := "Program Command to Acknowledge High Deviation Alarm",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			PCmd_HiDevSuppress OF HiDev.PCmd_Suppress (Description := "Program Command to Suppress High Deviation Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_HiDevUnsuppress OF HiDev.PCmd_Unsuppress (Description := "Program Command to Unsuppress High Deviation Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_HiDevUnshelve OF HiDev.PCmd_Unshelve (Description := "Program Command to Unshelve High Deviation Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_LoDevAck OF LoDev.PCmd_Ack (Description := "Program Command to Acknowledge Low Deviation Alarm",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No);
			PCmd_LoDevSuppress OF LoDev.PCmd_Suppress (Description := "Program Command to Suppress Low Deviation Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_LoDevUnsuppress OF LoDev.PCmd_Unsuppress (Description := "Program Command to Unsuppress Low Deviation Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_LoDevUnshelve OF LoDev.PCmd_Unshelve (Description := "Program Command to Unshelve Low Deviation Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_FailAck OF Fail.PCmd_Ack (Description := "Program Command to Acknowldege Analog Input Failure Alarm",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No);
			PCmd_FailSuppress OF Fail.PCmd_Suppress (Description := "Program Command to Suppress Analog Input Failure Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_FailUnsuppress OF Fail.PCmd_Unsuppress (Description := "Program Command to Unsuppress Analog Input Failure Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_FailUnshelve OF Fail.PCmd_Unshelve (Description := "Program Command to Unshelve Analog Input Failure Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Val : REAL (Description := "Analog Input Value (incl. Manual Override, if used)",
			               Usage := Output,
			               RADIX := Float,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0.00000000e+000);
			Val_InpPV : REAL (Description := "Analog Input Value (actual, before Substitute PV selection)",
			                     Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0.00000000e+000);
			Val_RoC : REAL (Description := "Analog Value Rate of Change (EU/rate time)",
			                   Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0.00000000e+000);
			Val_Dev : REAL (Description := "Calculated Deviation from Reference (EU)",
			                   Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0.00000000e+000);
			Val_PVMinCapt : REAL (Description := "Captured PV Minimum (excursion) since last cleared",
			                         Usage := Output,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 1.50000000e+038);
			Val_PVMaxCapt : REAL (Description := "Captured PV Maximum (excursion) since last cleared",
			                         Usage := Output,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := -1.50000000e+038);
			Val_PVEUMin : REAL (Description := "Minimum of scaled range = MIN (Cfg_PVEUMin, Cfg_PVEUMax)",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0.00000000e+000);
			Val_PVEUMax : REAL (Description := "Maximum of scaled range = MAX (Cfg_PVEUMin, Cfg_PVEUMax)",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 1.00000000e+002);
			SrcQ_IO : DINT (Description := "Source and Quality of primary I/O (enumeration)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			SrcQ : DINT (Description := "Source and Quality of primary Val/Sts (enumeration)",
			                Usage := Output,
			                RADIX := Decimal,
			                Required := No,
			                Visible := No,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
			Val_Fault : DINT (Description := "Device Fault Status 0=none, 20=Lo, 21=Hi, 22=LoDev, 23=HiDev, 24=LoLo, 25=HiHi, 26=HiRoC 32=Fail, 34=CfgErr",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : DINT (Description := "Highest Alarm prio and ack status this object + channel (enum)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : DINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_SubstPV : BOOL (Description := "1=Using Substitute PV (Input being overridden)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_PVBad : BOOL (Description := "1=PV Bad quality or Out of Range",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_PVUncertain : BOOL (Description := "1=PV Value is Uncertain (quality)",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=A Maintenance Bypass is Active, display icon",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=An Alarm is Shelved, Disabled or Suppressed: display icon",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Raw : BOOL (Description := "1=Error in Config: Raw Input Scaling Min = Max",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_EU : BOOL (Description := "1=Error in Config: Scaled EU Min = Max",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: On-Delay, Off-Delay, Gate Delay Time Invalid (use 0 to 2147483 s)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_Rate : BOOL (Description := "1=Error in Config: Invalid Rate Time (use 1.0, 60.0, 3600.0, 86400.0...)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Err_Filt : BOOL (Description := "1=-Error in Config: PV filter params (RateTime, TC)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time, Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_CtrlHiHi : BOOL (Description := "1=Analog Input is above High-High Control limit",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_CtrlHi : BOOL (Description := "1=Analog Input is above High Control limit",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_CtrlLo : BOOL (Description := "1=Analog Input is above Low Control limit",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_CtrlLoLo : BOOL (Description := "1=Analog Input is above Low-Low Control limit",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_HiHiCmp OF HiHiGate.Inp (Description := "PV High-High comparison result 1=High-High",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_HiHiGate OF HiHiGate.Sts_Gate (Description := "PV High-High Gate Delay Status, 1=done",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_HiHi OF HiHi.Inp (Description := "1=Analog Input is above High-High limit",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read/Write);
			Alm_HiHi OF HiHi.Alm (Description := "1=Analog Input is in High-High Alarm",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write);
			Ack_HiHi OF HiHi.Ack (Description := "1=High-High Alarm has been acknowledged",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write);
			Sts_HiHiDisabled OF HiHi.Disabled (Description := "1=High-High Alarm has been Disabled by Maintenance",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_HiHiShelved OF HiHi.Shelved (Description := "1=High-High Alarm has been Shelved by Operator",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Sts_HiHiSuppressed OF HiHi.Suppressed (Description := "1=High-High Alarm has been Suppressed by Program",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_HiCmp OF HiGate.Inp (Description := "PV High comparison result 1=High",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Sts_HiGate OF HiGate.Sts_Gate (Description := "PV High Gate Delay Status, 1=done",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_Hi OF Hi.Inp (Description := "1=Analog Input is above High limit",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Alm_Hi OF Hi.Alm (Description := "1=Analog Input is in High Alarm",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Ack_Hi OF Hi.Ack (Description := "1=High Alarm has been acknowledged",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Sts_HiDisabled OF Hi.Disabled (Description := "1=High Alarm has been Disabled by Maintenance",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Sts_HiShelved OF Hi.Shelved (Description := "1=High Alarm has been Shelved by Operator",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_HiSuppressed OF Hi.Suppressed (Description := "1=High Alarm has been Suppressed by Program",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_LoCmp OF LoGate.Inp (Description := "PV Low comparison result 1=Low",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Sts_LoGate OF LoGate.Sts_Gate (Description := "PV Low Gate Delay Status, 1=done",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_Lo OF Lo.Inp (Description := "1=Analog Input is below Low limit",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write);
			Alm_Lo OF Lo.Alm (Description := "1=Analog Input is in Low Alarm",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Ack_Lo OF Lo.Ack (Description := "1=Low Alarm has been acknowledged",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write);
			Sts_LoDisabled OF Lo.Disabled (Description := "1=Low Alarm has been Disabled by Maintenance",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Sts_LoShelved OF Lo.Shelved (Description := "1=Low Alarm has been Shelved by Operator",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_LoSuppressed OF Lo.Suppressed (Description := "1=Low Alarm has been Suppressed by Program",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_LoLoCmp OF LoLoGate.Inp (Description := "PV Low-Low comparison result 1=Low-Low",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_LoLoGate OF LoLoGate.Sts_Gate (Description := "PV Low-Low Gate Delay Status, 1=done",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_LoLo OF LoLo.Inp (Description := "1=Analog Input is below Low-Low limit",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read/Write);
			Alm_LoLo OF LoLo.Alm (Description := "1=Analog Input is in Low-Low Alarm",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write);
			Ack_LoLo OF LoLo.Ack (Description := "1=Low-Low Alarm has been acknowledged",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write);
			Sts_LoLoDisabled OF LoLo.Disabled (Description := "1=Low-Low Alarm has been Disabled by Maintenance",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_LoLoShelved OF LoLo.Shelved (Description := "1=Low-Low Alarm has been Shelved by Operator",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Sts_LoLoSuppressed OF LoLo.Suppressed (Description := "1=Low Low Alarm has been Suppressed by Program",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_HiRoCCmp OF HiRoCGate.Inp (Description := "PV High Rate of Change comparison result 1=High",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read/Write);
			Sts_HiRoCGate OF HiRoCGate.Sts_Gate (Description := "PV High Rate of Change Gate Delay Status, 1=done",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_HiRoC OF HiRoC.Inp (Description := "1=Analog Input Rate of Change is above High limit",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write);
			Alm_HiRoC OF HiRoC.Alm (Description := "1=Analog Input Rate of Change is in High Alarm",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Ack_HiRoC OF HiRoC.Ack (Description := "1=High Rate of Change Alarm has been acknowledged",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Sts_HiRoCDisabled OF HiRoC.Disabled (Description := "1=High Rate of Change Alarm has been Disabled by Maintenance",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Sts_HiRoCShelved OF HiRoC.Shelved (Description := "1=High Rate of Change Alarm has been Shelved by Operator",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_HiRoCSuppressed OF HiRoC.Suppressed (Description := "1=High Rate of Change Alarm has been Suppressed by Program",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_HiDevCmp OF HiDevGate.Inp (Description := "PV High Deviation comparison result 1=Dev High",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read/Write);
			Sts_HiDevGate OF HiDevGate.Sts_Gate (Description := "PV High Deviation Gate Delay Status, 1=done",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_HiDev OF HiDev.Inp (Description := "1=Analog Input Deviation is above High limit",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write);
			Alm_HiDev OF HiDev.Alm (Description := "1=Analog Input Deviation is in High Alarm",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Ack_HiDev OF HiDev.Ack (Description := "1=High Deviation Alarm has been acknowledged",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Sts_HiDevDisabled OF HiDev.Disabled (Description := "1=High Deviation Alarm has been Disabled by Maintenance",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Sts_HiDevShelved OF HiDev.Shelved (Description := "1=High Deviation Alarm has been Shelved by Operator",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_HiDevSuppressed OF HiDev.Suppressed (Description := "1=High Deviation Alarm has been Suppressed by Program",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_LoDevCmp OF LoDevGate.Inp (Description := "PV Low Deviation comparison result 1=Dev Low",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read/Write);
			Sts_LoDevGate OF LoDevGate.Sts_Gate (Description := "PV Low Deviation Gate Delay Status, 1=done",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_LoDev OF LoDev.Inp (Description := "1=Analog Input Deviation is below Low limit",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write);
			Alm_LoDev OF LoDev.Alm (Description := "1=Analog Input Deviation is in Low Alarm",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Ack_LoDev OF LoDev.Ack (Description := "1=Low Deviation Alarm has been acknowledged",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write);
			Sts_LoDevDisabled OF LoDev.Disabled (Description := "1=Low Deviation Alarm has been Disabled by Maintenance",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Sts_LoDevShelved OF LoDev.Shelved (Description := "1=Low Deviation Alarm has been Shelved by Operator",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_LoDevSuppressed OF LoDev.Suppressed (Description := "1=Low Deviation Alarm has been Suppressed by Program",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_FailCmp OF FailGate.Inp (Description := "PV Fail comparison result 1=Out of Range",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_FailGate OF FailGate.Sts_Gate (Description := "PV Fail Gate Delay Status, 1=done",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_Fail OF Fail.Inp (Description := "1=Analog Input is Out of Range or PV Bad",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read/Write);
			Alm_Fail OF Fail.Alm (Description := "1=Analog Input Failure Alarm (Bad or Out of Range)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write);
			Ack_Fail OF Fail.Ack (Description := "1=Analog Input Failure Alarm has been acknowledged",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write);
			Sts_FailDisabled OF Fail.Disabled (Description := "1=Analog input Failure Alarm has been Disabled by Maintenance",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_FailShelved OF Fail.Shelved (Description := "1=Analog Input Failure Alarm has been Shelved by Operator",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Sts_FailSuppressed OF Fail.Suppressed (Description := "1=Analog Input Failure Alarm has been Suppressed by Program",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			P_AInAdv : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			LoLo : P_Alarm (Description := "Low-Low Alarm",
			               ExternalAccess := Read/Write,
			               DefaultData := "[961,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13,'Low-Low Alarm$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Lo : P_Alarm (Description := "Low Alarm",
			             ExternalAccess := Read/Write,
			             DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'Low Alarm$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Hi : P_Alarm (Description := "High Alarm",
			             ExternalAccess := Read/Write,
			             DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'High Alarm$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			HiHi : P_Alarm (Description := "High-High Alarm",
			               ExternalAccess := Read/Write,
			               DefaultData := "[961,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'High-High Alarm$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Cfg_EU : STRING_8 (Description := "Engineering Units for display on HMI",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[1,'%$00$00$00$00$00$00$00']");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[8,'P_AinAdv$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[12,'Analog Input$00$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[21,'Advanced Analog Input$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Fail : P_Alarm (Description := "Analog Input Failure Alarm (bad quality or out of range)",
			               ExternalAccess := Read/Write,
			               DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13,'Input Failure$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Wrk_Notify : DINT (Description := "Buffer for building Val_Notify",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_Fault : DINT (Description := "Buffer for building Val_Fault",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_SrcQ : DINT (Description := "Register for building Source / Quality enumeration",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_SubstPV : BOOL (Description := "Internal flag: Using Substitute PV",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_PVSq : REAL (Description := "Square of PV, for square root characterization",
			                   RADIX := Float,
			                   ExternalAccess := None,
			                   DefaultData := 0.00000000e+000);
			Wrk_EUMinSq : REAL (Description := "Square of EU Min, for square root characterization",
			                      RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			Wrk_EUMaxSq : REAL (Description := "Square of EU Max, for square root characterization",
			                      RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			Wrk_UnfiltPV : REAL (Description := "Unfiltered PV, input to 1st order filter",
			                       RADIX := Float,
			                       ExternalAccess := None,
			                       DefaultData := 0.00000000e+000);
			Wrk_ScanTime : REAL (Description := "Time since this instance was last scanned",
			                       RADIX := Float,
			                       ExternalAccess := None,
			                       DefaultData := 0.00000000e+000);
			Wrk_FiltPV : REAL (Description := "Filtered PV",
			                     RADIX := Float,
			                     ExternalAccess := None,
			                     DefaultData := 0.00000000e+000);
			Wrk_RoC : REAL (Description := "Calculated Rate of Change of PV",
			                  RADIX := Float,
			                  ExternalAccess := None,
			                  DefaultData := 0.00000000e+000);
			Wrk_PrevPV : REAL (Description := "Previous scan$'s value of Filtered PV",
			                     RADIX := Float,
			                     ExternalAccess := None,
			                     DefaultData := 0.00000000e+000);
			LoDev : P_Alarm (Description := "Low Deviation Alarm",
			                ExternalAccess := Read/Write,
			                DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19,'Low Deviation Alarm$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			HiDev : P_Alarm (Description := "High Deviation Alarm",
			                ExternalAccess := Read/Write,
			                DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20,'High Deviation Alarm'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			HiRoC : P_Alarm (Description := "High Rate of Change Alarm",
			                ExternalAccess := Read/Write,
			                DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19,'High Rate of Change$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Wrk_ScanT : TIMER (Description := "Scan Timer (milliseconds, always runs)",
			                    ExternalAccess := None,
			                    DefaultData := "[0,2147483647,0]");
			Wrk_Alpha : REAL (Description := "Filter multiplier = (1 / (1+TC/dT) )",
			                    RADIX := Float,
			                    ExternalAccess := None,
			                    DefaultData := 0.00000000e+000);
			Wrk_ValidONS : BOOL (Description := "Selected PV goes from Infinite or Not a Number to VALID",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_InpInfNaN : BOOL (Description := "Input (Inp_PV or Set_SimPV) Infinite or Not a Number",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_InpDINT : DINT (Description := "Input REAL bit pattern as a DINT (check for Inf/NaN)",
			                      RADIX := Hex,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_SelPVDINT : DINT (Description := "Selected PV check for Infinite or Non A Number",
			                        RADIX := Hex,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_SelPVInfNaN : BOOL (Description := "Selected PV (Input or Substitute) is Infinite or NaN",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			HMI_Type : STRING_16 (Description := "Must contain AOI name, used for HMI and Information S/W",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[8,'P_AInAdv$00$00$00$00$00$00$00$00']");
			Wrk_HiRoC : BOOL (Description := "Internal flag: High Rate of Change Status",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_LoDev : BOOL (Description := "Internal flag: Low Deviation Status",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_HiDev : BOOL (Description := "Internal flag: High Deviation Status",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_Fail : BOOL (Description := "Internal flag: Fail Status",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_LoLo : BOOL (Description := "Internal flag: Low-Low Status",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_Lo : BOOL (Description := "Internal flag: Low Status",
			                 RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			Wrk_HiHi : BOOL (Description := "Internal flag: High-High Status",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_Hi : BOOL (Description := "Internal flag: High Status",
			                 RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			LoDevGate : P_Gate (Description := "Low Deviation Alarm Gate / Delay Block",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[16,'PV Deviation Low$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			HiRoCGate : P_Gate (Description := "High Rate of Change Alarm Gate / Delay Block",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[20,'PV Hi Rate of Change'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			HiDevGate : P_Gate (Description := "High Deviation Alarm Gate / Delay Block",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[17,'PV Deviation High$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			LoLoGate : P_Gate (Description := "Low-Low Alarm Gate / Delay Block",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[10,'PV Low-Low$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			LoGate : P_Gate (Description := "Low Alarm Gate / Delay Block",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[6,'PV Low$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			HiHiGate : P_Gate (Description := "High-High Alarm Gate / Delay Block",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[12,'PV High-High$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			HiGate : P_Gate (Description := "High Alarm Gate / Delay Block",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[7,'PV High$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			FailGate : P_Gate (Description := "Fail Alarm Gate / Delay Block",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[13,'Input Failure$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			Wrk_UnackAlmC : DINT (Description := "Buffer for building Val_UnackAlmC",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Val_Notify : DINT (Description := "Highest Alarm prio and ack status this object only (enum)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			OCmd_ResetAckAll : BOOL (Description := "Operator Command to Reset and Acknowledge all Alarms",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Operator Command to Reset all Alarms requiring Reset",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			OCmd_ClearCapt : BOOL (Description := "Operator Command to Clear the captured min / max PV excursion values",
			                         RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			MCmd_InpPV : BOOL (Description := "Maintenance Command to use Input PV (normal)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_SubstPV : BOOL (Description := "Maintenance Command to use Substitute PV (override input)",
			                       RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			ORdy_ResetAckAll : BOOL (Description := "1=Ready for OCmd_ResetAckAll (enables HMI button)",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_InpPV : BOOL (Description := "1=Ready for MCmd_InpPV (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_SubstPV : BOOL (Description := "1=Ready for MCmd_SubstPV (enables HMI button)",
			                       RADIX := Decimal,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Wrk_RawPV : REAL (Description := "Value of raw PV to be used for Out of Range checking",
			                    RADIX := Float,
			                    ExternalAccess := None,
			                    DefaultData := 0.00000000e+000);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Off-Scan: no Val update or alarm checking.  PV Bad Quality ($Qstale$Q) is asserted.")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Deleted rungs for Mode, Owner.  #####$N"
				    "$N"
				    "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "This rung publishes the Values for the scaled range.$N"
				    "If this instruction is reverse scaled by reversing the scaled (EU) min and max configurations,$N"
				    "the values are swapped so the the EUMax Value is always greater than the EUMin Value.$N"
				    "This makes the HMI bargraph and trend coding easier, and provides values$N"
				    "that can be pinned to the configuration of a PID, so the AIn and PID ranges are in lockstep.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added configurable decimal places for display on HMI.  #####";
				N: [GEQ(Cfg_PVEUMax,Cfg_PVEUMin) MOV(Cfg_PVEUMin,Val_PVEUMin) MOV(Cfg_PVEUMax,Val_PVEUMax) ,LES(Cfg_PVEUMax,Cfg_PVEUMin) MOV(Cfg_PVEUMin,Val_PVEUMax) MOV(Cfg_PVEUMax,Val_PVEUMin) ,LIM(7,Cfg_PVDecPlcs,-1) MOV(2,Cfg_PVDecPlcs) ];
				RC: "If a Threshold Deadband is invalid, set it to a valid value.  (Zero is valid for all deadbands!)$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Removed Err_DB, code ensures Status Deadband configs are always valid.  #####$N"
				    "#####  V4.10.00  2019-03-12:  Added Control Limits, code ensure Control Deadbands are always valid.  #####";
				N: [LES(Cfg_HiHiDB,0.0) CLR(Cfg_HiHiDB) ,LES(Cfg_HiDB,0.0) CLR(Cfg_HiDB) ,LES(Cfg_LoDB,0.0) CLR(Cfg_LoDB) ,LES(Cfg_LoLoDB,0.0) CLR(Cfg_LoLoDB) ,LES(Cfg_CtrlHiHiDB,0.0) CLR(Cfg_CtrlHiHiDB) ,LES(Cfg_CtrlHiDB,0.0) CLR(Cfg_CtrlHiDB) ,LES(Cfg_CtrlLoDB,0.0) CLR(Cfg_CtrlLoDB) ,LES(Cfg_CtrlLoLoDB,0.0) CLR(Cfg_CtrlLoLoDB) ,[GEQ(Cfg_HiRoCDB,Cfg_HiRoCLim) NEQ(Cfg_HiRoCLim,0.0) ,LES(Cfg_HiRoCDB,0.0) ] CLR(Cfg_HiRoCDB) ,LES(Cfg_HiDevDB,0.0) CLR(Cfg_HiDevDB) ,LES(Cfg_LoDevDB,0.0) CLR(Cfg_LoDevDB) ,LES(Cfg_FailDB,0.0) CLR(Cfg_FailDB) ];
				RC: "Flag a Configuration Error if the raw input range or scaled PV range$N"
				    "max and min are set the same (invalid range).$N"
				    "$N"
				    "Since this Analog Input is disabled, indicate that the PV is bad$N"
				    "(Val is not being updated.)$N"
				    "Indicate that this Analog Input is DISABLED (Val_Sts = 33);$N"
				    "if there is a Configuration Error, indicate that as well (Val_Fault=34).";
				N: [OTU(Sts_MaintByp) OTL(Sts_PVBad) ,CLR(Wrk_Fault) ,[EQU(Cfg_InpRawMax,Cfg_InpRawMin) OTE(Err_Raw) ,EQU(Cfg_PVEUMax,Cfg_PVEUMin) OTE(Err_EU) ,LES(Cfg_FiltTC,0.0) OTE(Err_Filt) ] OTE(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "ANALOG INPUT PROCESSING$N"
				    "============================================================$N"
				    "This rung checks the bit pattern of the REAL input (by copying to a DINT) to see if$N"
				    "the input is +Infinity, -Infinity or Not a Number.  Per ANSI 32-bit Float$N"
				    "format, in these cases the Exponent bits (.30 thru .23) will all be 1s:$N"
				    "0111 1111 1000 0000 0000 0000 0000 0000 = +Infinity$N"
				    "1111 1111 1000 0000 0000 0000 0000 0000 = -Infinity$N"
				    "x111 1111 1xxx xxxx xxxx xxxx xxxx xxxx = Not a Number";
				N: [XIO(Inp_Sim) COP(Inp_PV,Wrk_InpDINT,1) ,XIC(Inp_Sim) COP(Set_SimPV,Val_InpPV,1) COP(Set_SimPV,Wrk_InpDINT,1) ]MEQ(Wrk_InpDINT,16#7F80_0000,16#7F80_0000)OTE(Wrk_InpInfNaN);
				RC: "The Process Variable Value (Val_PV) shows the selected input,$N"
				    "regardless of Mode, EVEN WHEN EnableIn IS FALSE!$N"
				    "$N"
				    "Here$'s where we select the input or the substitue PV,$N"
				    "and for the input PV, do the scaling to Engineering Units.$N"
				    "$N"
				    "Scale to the squares of the EUMax and EUMin, then take the Square Root, $N"
				    "if the Square Root characterization is selected.  (This must work even for non-zero-based$N"
				    "inputs, say, +/- 20$Q WC, and show +/- flow, scaled on a square root curve each side of zero!)$N"
				    "$N"
				    "If Square Root characterization is not selected, just do linear scaling.";
				N: [XIO(Err_Raw) XIO(Err_EU) XIO(Wrk_InpInfNaN) [XIO(Inp_Sim) [XIO(Cfg_UseSqRt) CPT(Val_InpPV,(Inp_PV-Cfg_InpRawMin)*(Cfg_PVEUMax-Cfg_PVEUMin)/(Cfg_InpRawMax-Cfg_InpRawMin)+Cfg_PVEUMin) ,XIC(Cfg_UseSqRt) [CPT(Wrk_EUMinSq,Cfg_PVEUMin*ABS(Cfg_PVEUMin)) CPT(Wrk_EUMaxSq,Cfg_PVEUMax*ABS(Cfg_PVEUMax)) ,CPT(Wrk_PVSq,(Inp_PV-Cfg_InpRawMin)*(Wrk_EUMaxSq-Wrk_EUMinSq)/(Cfg_InpRawMax-Cfg_InpRawMin)+Wrk_EUMinSq) ,LES(Wrk_PVSq,0.0) CPT(Val_InpPV,-SQR(-Wrk_PVSq)) ,GEQ(Wrk_PVSq,0.0) SQR(Wrk_PVSq,Val_InpPV) ] ,MOV(Inp_PV,Wrk_RawPV) ] ,XIC(Inp_Sim) [XIO(Cfg_UseSqRt) CPT(Wrk_RawPV,(Set_SimPV-Cfg_PVEUMin)*(Cfg_InpRawMax-Cfg_InpRawMin)/(Cfg_PVEUMax-Cfg_PVEUMin)+Cfg_InpRawMin) ,XIC(Cfg_UseSqRt) [CPT(Wrk_PVSq,Set_SimPV*(ABS(Set_SimPV))) ,CPT(Wrk_EUMinSq,Cfg_PVEUMin*ABS(Cfg_PVEUMin)) CPT(Wrk_EUMaxSq,Cfg_PVEUMax*ABS(Cfg_PVEUMax)) ,CPT(Wrk_RawPV,(Wrk_PVSq-Wrk_EUMinSq)*(Cfg_InpRawMax-Cfg_InpRawMin)/(Wrk_EUMaxSq-Wrk_EUMinSq)+Cfg_InpRawMin) ] ,MOV(Set_SimPV,Val_InpPV) ] ] ,[XIC(Err_Raw) ,XIC(Err_EU) ] MOV(Cfg_PVEUMin,Val_InpPV) MOV(Cfg_InpRawMin,Wrk_RawPV) ,XIC(Wrk_InpInfNaN) COP(Wrk_InpDINT,Val_InpPV,1) COP(Wrk_InpDINT,Wrk_RawPV,1) ];
				RC: "When this Analog Input is not simulated,$N"
				    "the Simulated PV Setting tracks the selected PV for bumpless transfer into Simulation.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Remove P_Mode, threshold settings are now configs (Cfg_xxxLim).  #####$N"
				    "#####  Changed PV Out of Range comparisons to use RAW (INPUT) PV, not scaled/filtered value (Val).  #####";
				N: XIO(Inp_Sim)COP(Val_InpPV,Set_SimPV,1);
				RC: "The Process Variable Input Value (Val_InpPV) shows the scaled input,$N"
				    "regardless of the settings of Mode, Substitute PV, etc., EVEN WHEN EnableIn IS FALSE!$N"
				    "$N"
				    "If NOT in simulation, if the scaling configuration is valid, the Raw Input is scaled to Engineering Units.$N"
				    "In Simulation the Simulated Input must be provided in Engineering Units.";
				N: XIC(Wrk_InpInfNaN)JMP(DoSrcQ);
				RC: "If the Analog Value rises above the Fail High Limit or falls below the$N"
				    "Fail Low Limit, raise the Fail Status Flag.$N"
				    "$N"
				    "If the Analog Value is back in range, that is, it is below the Fail High Limit (minus$N"
				    "deadband) and above the Fail Low Limit (plus deadband),$N"
				    "clear the Fail Status Flag.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####$N"
				    "#####  Changed PV Out of Range comparisons to use RAW (INPUT) PV, not scaled/filtered value (Val).  #####";
				N: XIO(Err_Raw)[[GEQ(Wrk_RawPV,Cfg_FailHiLim) ,LEQ(Wrk_RawPV,Cfg_FailLoLim) ] ,XIC(FailGate.Out) [CMP(Wrk_RawPV>=(Cfg_FailHiLim-Cfg_FailDB)) ,CMP(Wrk_RawPV<=(Cfg_FailLoLim+Cfg_FailDB)) ] ]OTE(Wrk_Fail);
				RC: "============================================================$N"
				    "ENUMERATED STATUS VALUES$N"
				    "============================================================$N"
				    "Source and Quality (Srcq) for Val_InpPV$N"
				    "Start with the Srcq from the Input Channel object if it$'s available.$N"
				    "Otherwise, start based on bad/uncertain input bits.$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Modified to correct precedence and value of Simulated PV.  #####$N"
				    "#####  V4.00.01  2018-08-29:  Modified handling of Simulated PV and scaling config errors.  #####";
				N: LBL(DoSrcQ)[XIO(Cfg_UseChanSrcQ) MOV(1,Wrk_SrcQ) ,XIC(Cfg_UseChanSrcQ) MOV(Inp_PVSrcQ,Wrk_SrcQ) ,XIC(Inp_PVUncertain) MOV(16,Wrk_SrcQ) ,XIC(Inp_PVBad) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(10,Wrk_SrcQ) ,[XIC(Wrk_InpInfNaN) ,XIC(Sts_FailCmp) ] [XIO(Cfg_UseChanSrcQ) ,XIC(Inp_Sim) ] MOV(32,Wrk_SrcQ) ,[XIC(Err_Raw) ,XIC(Err_EU) ] MOV(35,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality (SrcQ) for Val (primary value)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: MOV(19,SrcQ);
				RC: "$QLurking$Q Operator Commands are cleared, as well as the Program Reset.";
				N: OTU(MCmd_InpPV)OTU(MCmd_SubstPV)OTU(OCmd_Reset)OTU(OCmd_ResetAckAll)OTU(PCmd_Reset);
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Remove Rdy_OSet -- AOI no longer has Mode / Owner.  #####";
				N: OTU(MRdy_InpPV)OTU(MRdy_SubstPV)OTU(ORdy_Reset)OTU(Sts_RdyAck)OTU(ORdy_ResetAckAll);
				RC: "The first-order filter$'s scan timer must run and clear every scan, whether the Instruction$N"
				    "is true or not.  Doing so here avoids a bump in the Value on transition to EnableIn TRUE.";
				N: TON(Wrk_ScanT,?,?)CLR(Wrk_ScanT.ACC);
				RC: "Set up the filter initialization one-shot so filter of $QVal$Q in main Logic$N"
				    "will start from first valid value on transition from false to true.";
				N: OTU(Wrk_ValidONS);
				RC: "Clear the Alarms and the Notify Status, and show the Alarms Inhibited breadcrumb.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count including attached Channel object.  #####";
				N: [OTU(Alm_HiHi) OTU(Alm_Hi) OTU(Alm_Lo) OTU(Alm_LoLo) ,OTU(Alm_HiRoC) OTU(Alm_HiDev) OTU(Alm_LoDev) OTU(Alm_Fail) ,OTU(Sts_HiHi) OTU(Sts_Hi) OTU(Sts_Lo) OTU(Sts_LoLo) ,OTU(Sts_HiRoC) OTU(Sts_HiDev) OTU(Sts_LoDev) OTU(Sts_Fail) ,OTL(Sts_AlmInh) CLR(Val_Notify) CLR(Val_NotifyAll) CLR(Val_UnackAlmC) ];
		END_ROUTINE

		ROUTINE Logic (Description := "Normal Scan - PV is scaled and alarms are generated")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_AInAdv:  PROCESS -- ADVANCED ANALOG INPUT$N"
				    "============================================================$N"
				    "Revision 4.10.00 Release  2019-03-12:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, V3.x Revision History archived.$N"
				    "V4.00.00  2018-06-25:  Removed P_Mode, PSet/Val_Owner and related OSets,$N"
				    "   PSets and Vals.  Thresholds are now Cfgs.$N"
				    "Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "Added notify and unack count rollup for Channel object. Added Err_Rate.$N"
				    "Changed Out-of-Range limit checks to use raw Input (Inp_PV)$N"
				    "   instead of scaled PV (Val).  Changing EU scaling will not$N"
				    "   necessitate changing fail thresholds and deadband.$N"
				    "Deleted Cfg_PCmdClear.  All Program Commands are now self-clearing.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N"
				    "Removed Err_DB, code ensures Status Deadband configs are always valid.$N"
				    "Added configurable decimal places for display on HMI.$N"
				    "V4.00.01  2018-08-29:  Modified handling of SrcQ_IO and SrcQ.$N"
				    "V4.10.00  2019-03-12: Added Control Limits. Added Cfg_HasMoreObj.$N"
				    "============================================================$N"
				    "This Instruction monitors an Analog Input from a flow, level, pressure,$N"
				    "temperature, or any other analog sensor, and provides:$N"
				    "$N"
				    "*  Scaling, from Input (Raw) to PV (Engineering) Units$N"
				    "*  High-High, High, Low and Low-Low Status and Alarms, with Gate$N"
				    "inputs and configurable on-delay, off-delay and gate delay times$N"
				    "*  Monitoring of bad/uncertain PV status, floating point exceptions$N"
				    "and out-of-range conditions, with PV Fail alarm$N"
				    "*  Setting of a simulated input signal for process simulation$N"
				    "*  Capturing of the lowest and highest PV excursion values$N"
				    "*  Configurable status thresholds, deadbands and range limits$N"
				    "*  Maintenance Commands to allow manual override of the input signal (Substitute PV)$N"
				    "$N"
				    "**  Calculation of (filtered) signal rate of change with High Rate of Change alarm$N"
				    "**  Square Root characterization for flow scaling based on differential-pressure input$N"
				    "**  Reference (setpoint) value entry and alarms for deviation from reference (high, low)$N"
				    "$N"
				    "** = advanced capabilities in this instruction$N"
				    "*  = basic capabilities included in P_AIn (analog input basic) instruction$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00-00  2018-06-25:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####$N"
				    "#####  Removed two rungs with Mode, Owner functions.  #####$N"
				    "";
				N: JMP(SkipText)LOWER(Cfg_Desc,Cfg_Label)CONCAT(Cfg_Tag,Cfg_Area,Cfg_EU)LOWER(HMI_Lib,HMI_Type);
				RC: "============================================================$N"
				    "CONFIGURATION PROCESSING$N"
				    "============================================================$N"
				    "This rung publishes the Values for the scaled range.$N"
				    "If this instruction is reverse scaled by reversing the scaled (EU) min and max configurations,$N"
				    "the values are swapped so the the EUMax Value is always greater than the EUMin Value.$N"
				    "This makes the HMI bargraph and trend coding easier, and provides values$N"
				    "that can be pinned to the configuration of a PID, so the AIn and PID ranges are in lockstep.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added configurable decimal places for display on HMI.  #####";
				N: LBL(SkipText)[GEQ(Cfg_PVEUMax,Cfg_PVEUMin) MOV(Cfg_PVEUMin,Val_PVEUMin) MOV(Cfg_PVEUMax,Val_PVEUMax) ,LES(Cfg_PVEUMax,Cfg_PVEUMin) MOV(Cfg_PVEUMin,Val_PVEUMax) MOV(Cfg_PVEUMax,Val_PVEUMin) ,LIM(7,Cfg_PVDecPlcs,-1) MOV(2,Cfg_PVDecPlcs) ];
				RC: "If a Threshold Deadband is invalid, set it to a valid value.  (Zero is valid for all deadbands!)$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Removed Err_DB, code ensures Status Deadband configs are always valid.  #####$N"
				    "#####  V4.10.00  2019-03-12:  Added Control Limits, code ensure Control Deadbands are always valid.  #####";
				N: [LES(Cfg_HiHiDB,0.0) CLR(Cfg_HiHiDB) ,LES(Cfg_HiDB,0.0) CLR(Cfg_HiDB) ,LES(Cfg_LoDB,0.0) CLR(Cfg_LoDB) ,LES(Cfg_LoLoDB,0.0) CLR(Cfg_LoLoDB) ,LES(Cfg_CtrlHiHiDB,0.0) CLR(Cfg_CtrlHiHiDB) ,LES(Cfg_CtrlHiDB,0.0) CLR(Cfg_CtrlHiDB) ,LES(Cfg_CtrlLoDB,0.0) CLR(Cfg_CtrlLoDB) ,LES(Cfg_CtrlLoLoDB,0.0) CLR(Cfg_CtrlLoLoDB) ,[GEQ(Cfg_HiRoCDB,Cfg_HiRoCLim) NEQ(Cfg_HiRoCLim,0.0) ,LES(Cfg_HiRoCDB,0.0) ] CLR(Cfg_HiRoCDB) ,LES(Cfg_HiDevDB,0.0) CLR(Cfg_HiDevDB) ,LES(Cfg_LoDevDB,0.0) CLR(Cfg_LoDevDB) ,LES(Cfg_FailDB,0.0) CLR(Cfg_FailDB) ];
				RC: "Ensure each Deviation Deadband is set to a value that allows the Deviation Status to clear.";
				N: [GRT(Cfg_HiDevDB,Cfg_HiDevLim) MOV(Cfg_HiDevLim,Cfg_HiDevDB) ,CMP(Cfg_LoDevDB>(-Cfg_LoDevLim)) NEG(Cfg_LoDevLim,Cfg_LoDevDB) ];
				RC: "Flag a Configuration Error if the raw input range or$N"
				    "scaled PV range max and min are set the same (invalid range),$N"
				    "if the Analog Input Filter Time Constant is set to a negative value,$N"
				    "or if the time used in Rate of Change calculations is less than or equal to zero.$N"
				    "$N"
				    "#####  V4.00.00  2018-03-31:  Added Err_Rate.  #####";
				N: [EQU(Cfg_InpRawMax,Cfg_InpRawMin) OTE(Err_Raw) ,EQU(Cfg_PVEUMax,Cfg_PVEUMin) OTE(Err_EU) ,LES(Cfg_FiltTC,0.0) OTE(Err_Filt) ,LEQ(Cfg_RateTime,0.0) OTE(Err_Rate) ];
				RC: "============================================================$N"
				    "SUBSTITUTE PV / INPUT PV COMMAND PROCESSING$N"
				    "============================================================$N"
				    "These rungs handle the Substitute PV and Input PV Commands:$N"
				    "$N"
				    "MCmd_SubstPV: Maintenance Command to select Maintenance-entered substitute PV$N"
				    "$N"
				    "Do not allow this Command if Cfg_NoSubstPV is set.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Removed check for Maintenance Mode.  #####";
				N: XIC(MCmd_SubstPV)OTU(MCmd_SubstPV)XIO(Cfg_NoSubstPV)OTL(Wrk_SubstPV);
				RC: "MCmd_InpPV: Maintenance Command to cancel Substitute PV and return to Live Input PV.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Removed check for Maintenance Mode.  #####";
				N: [XIC(MCmd_InpPV) OTU(MCmd_InpPV) ,XIC(Cfg_NoSubstPV) ]OTU(Wrk_SubstPV);
				RC: "Show the Substitute / Input PV selection Status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Removed Sts_InpPV.  (It was simply the inverse of Sts_SubstPV!)  #####";
				N: XIC(Wrk_SubstPV)OTE(Sts_SubstPV);
				RC: "Substitute PV is the only Maintenance Bypass for an Analog Input.";
				N: XIC(Sts_SubstPV)OTE(Sts_MaintByp);
				RC: "In Maintenance Mode, commands for Substitue PV and Input PV are available$N"
				    "based on the current state of the internal toggle bit.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Removed check for Maintenance Mode.  #####";
				N: XIO(Cfg_NoSubstPV)[XIO(Wrk_SubstPV) OTE(MRdy_SubstPV) ,XIC(Wrk_SubstPV) OTE(MRdy_InpPV) ];
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(PCmd_HiHiAck) OTL(PCmd_HiAck) ,OTL(PCmd_LoAck) OTL(PCmd_LoLoAck) ,OTL(PCmd_HiRoCAck) OTL(PCmd_HiDevAck) ,OTL(PCmd_LoDevAck) OTL(PCmd_FailAck) ] ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ][OTL(HiHi.PCmd_Reset) OTL(Hi.PCmd_Reset) OTL(Lo.PCmd_Reset) OTL(LoLo.PCmd_Reset) ,OTL(HiRoC.PCmd_Reset) OTL(HiDev.PCmd_Reset) OTL(LoDev.PCmd_Reset) OTL(Fail.PCmd_Reset) ];
				RC: "============================================================$N"
				    "ANALOG INPUT PROCESSING$N"
				    "============================================================$N"
				    "This rung checks the bit pattern of the REAL input (by copying to a DINT) to see if$N"
				    "the input is +Infinity, -Infinity or Not a Number.  Per ANSI 32-bit Float$N"
				    "format, in these cases the Exponent bits (.30 thru .23) will all be 1s:$N"
				    "0111 1111 1000 0000 0000 0000 0000 0000 = +Infinity$N"
				    "1111 1111 1000 0000 0000 0000 0000 0000 = -Infinity$N"
				    "x111 1111 1xxx xxxx xxxx xxxx xxxx xxxx = Not a Number";
				N: [XIO(Inp_Sim) COP(Inp_PV,Wrk_InpDINT,1) ,XIC(Inp_Sim) COP(Set_SimPV,Val_InpPV,1) COP(Set_SimPV,Wrk_InpDINT,1) ]MEQ(Wrk_InpDINT,16#7F80_0000,16#7F80_0000)OTE(Wrk_InpInfNaN);
				RC: "The Process Variable Value (Val_PV) shows the selected input,$N"
				    "regardless of Mode, EVEN WHEN EnableIn IS FALSE!$N"
				    "$N"
				    "Here$'s where we select the input or the substitue PV,$N"
				    "and for the input PV, do the scaling to Engineering Units.$N"
				    "$N"
				    "Scale to the squares of the EUMax and EUMin, then take the Square Root, $N"
				    "if the Square Root characterization is selected.  (This must work even for non-zero-based$N"
				    "inputs, say, +/- 20$Q WC, and show +/- flow, scaled on a square root curve each side of zero!)$N"
				    "$N"
				    "If Square Root characterization is not selected, just do linear scaling.";
				N: [XIO(Err_Raw) XIO(Err_EU) XIO(Wrk_InpInfNaN) [XIO(Inp_Sim) [XIO(Cfg_UseSqRt) CPT(Val_InpPV,(Inp_PV-Cfg_InpRawMin)*(Cfg_PVEUMax-Cfg_PVEUMin)/(Cfg_InpRawMax-Cfg_InpRawMin)+Cfg_PVEUMin) ,XIC(Cfg_UseSqRt) [CPT(Wrk_EUMinSq,Cfg_PVEUMin*ABS(Cfg_PVEUMin)) CPT(Wrk_EUMaxSq,Cfg_PVEUMax*ABS(Cfg_PVEUMax)) ,CPT(Wrk_PVSq,(Inp_PV-Cfg_InpRawMin)*(Wrk_EUMaxSq-Wrk_EUMinSq)/(Cfg_InpRawMax-Cfg_InpRawMin)+Wrk_EUMinSq) ,LES(Wrk_PVSq,0.0) CPT(Val_InpPV,-SQR(-Wrk_PVSq)) ,GEQ(Wrk_PVSq,0.0) SQR(Wrk_PVSq,Val_InpPV) ] ,MOV(Inp_PV,Wrk_RawPV) ] ,XIC(Inp_Sim) [XIO(Cfg_UseSqRt) CPT(Wrk_RawPV,(Set_SimPV-Cfg_PVEUMin)*(Cfg_InpRawMax-Cfg_InpRawMin)/(Cfg_PVEUMax-Cfg_PVEUMin)+Cfg_InpRawMin) ,XIC(Cfg_UseSqRt) [CPT(Wrk_PVSq,Set_SimPV*(ABS(Set_SimPV))) ,CPT(Wrk_EUMinSq,Cfg_PVEUMin*ABS(Cfg_PVEUMin)) CPT(Wrk_EUMaxSq,Cfg_PVEUMax*ABS(Cfg_PVEUMax)) ,CPT(Wrk_RawPV,(Wrk_PVSq-Wrk_EUMinSq)*(Cfg_InpRawMax-Cfg_InpRawMin)/(Wrk_EUMaxSq-Wrk_EUMinSq)+Cfg_InpRawMin) ] ,MOV(Set_SimPV,Val_InpPV) ] ] ,[XIC(Err_Raw) ,XIC(Err_EU) ] MOV(Cfg_PVEUMin,Val_InpPV) MOV(Cfg_InpRawMin,Wrk_RawPV) ,XIC(Wrk_InpInfNaN) COP(Wrk_InpDINT,Val_InpPV,1) COP(Wrk_InpDINT,Wrk_RawPV,1) ];
				RC: "When this Analog Input is not simulated,$N"
				    "the Simulated PV Setting tracks the selected PV for bumpless transfer into Simulation.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Remove P_Mode, threshold settings are now configs (Cfg_xxxLim).  #####$N"
				    "#####  Changed PV Out of Range comparisons to use RAW (INPUT) PV, not scaled/filtered value (Val).  #####";
				N: XIO(Inp_Sim)COP(Val_InpPV,Set_SimPV,1);
				RC: "============================================================$N"
				    "SELECT NORMAL OR SUBSTITUTE PV$N"
				    "============================================================$N"
				    "This rung selects the input to the PV filter.$N"
				    "In normal operation, it$'s the value (Val_InpPV) selected above:$N"
				    "the scaled Input (Inp_PV) or Simulatied PV (Set_SimPV)$N"
				    "(and this value tracks back into the Substitute PV setting).$N"
				    "With Substitute PV enabled, it$'s the value of the entered MSet_SubstPV.";
				N: XIO(Wrk_SubstPV)COP(Val_InpPV,Wrk_UnfiltPV,1)COP(Val_InpPV,MSet_SubstPV,1);
				N: XIC(Wrk_SubstPV)COP(MSet_SubstPV,Wrk_UnfiltPV,1);
				RC: "============================================================$N"
				    "PV FIRST-ORDER FILTER PROCESSING$N"
				    "============================================================$N"
				    "This rung determines whether the Analog PV (unfiltered) is +/-Infinity or +/- NotANumber.$N"
				    "In either case, the value cannot be passed into the filter calculation.  Instead, it is$N"
				    "just copied to the PV directly.";
				N: COP(Wrk_UnfiltPV,Wrk_SelPVDINT,1)MEQ(Wrk_SelPVDINT,16#7F80_0000,16#7F80_0000)OTE(Wrk_SelPVInfNaN);
				RC: "If tracking is enabled, copy the Untiltered PV to the Substitute PV Setting.";
				N: COP(Wrk_UnfiltPV,MSet_SubstPV,1);
				RC: "In preparation for calculating the Filtered PV, this rung$N"
				    "determines the time since the previous scan, using a non-stop TON timer.$N"
				    "When we get here, we read the accumulator (in milliseconds, so$N"
				    "divide by 1000.0 to get seconds), then clear the accumulator.  Next scan the accumulator will have$N"
				    "incremented up to the number of milliseconds since last scan.  (Works for scan times up to 2 million seconds.....)";
				N: MOV(2147483647,Wrk_ScanT.PRE)TON(Wrk_ScanT,?,?)DIV(Wrk_ScanT.ACC,1000.0,Wrk_ScanTime)CLR(Wrk_ScanT.ACC);
				RC: "If the input was +/-Infinity or Not a Number and it becomes a valid number,$N"
				    "initialize the filter to start from the first valid value.";
				N: XIO(Wrk_SelPVInfNaN)ONS(Wrk_ValidONS)MOV(Wrk_UnfiltPV,Wrk_FiltPV)MOV(Wrk_UnfiltPV,Wrk_PrevPV);
				RC: "Calculate the FILTERED PV. $N"
				    "First, calculate $Qalpha$Q, the portion of the difference between input and previous value to move toward the input.$N"
				    "Then calculate the new value.";
				N: [GRT(Cfg_FiltTC,0.0) CPT(Wrk_Alpha,1.0/(1.0+Wrk_ScanTime/Cfg_FiltTC)) ,LEQ(Cfg_FiltTC,0.0) CLR(Wrk_Alpha) ,XIO(Wrk_SelPVInfNaN) CPT(Wrk_FiltPV,(Wrk_Alpha*Wrk_FiltPV)+((1.0-Wrk_Alpha)*Wrk_UnfiltPV)) ];
				RC: "Sts_PVBad and Sts_PVUncertain take care of the PV Quality.$N"
				    "As for the ultimate Value (Val):$N"
				    "If the number is being filtered, pass thru the output of the filter.  It$'s a $Qreal$Q number.$N"
				    "If the number is not being filtered because it is not a number or infinite, pass that thru.";
				N: [XIO(Wrk_SelPVInfNaN) MOV(Wrk_FiltPV,Val) ,XIC(Wrk_SelPVInfNaN) COP(Wrk_UnfiltPV,Val,1) ];
				RC: "============================================================$N"
				    "PV RATE OF CHANGE PROCESSING$N"
				    "============================================================$N"
				    "If the input is NOT being simulated, calculate the instantaneous PV RATE OF CHANGE.$N"
				    "Then stash the current PV away for use in next scan$'s calculation.";
				N: XIC(Cfg_HasRoC)XIO(Wrk_SelPVInfNaN)[XIO(Inp_Sim) GRT(Wrk_ScanTime,0.0) CPT(Wrk_RoC,(Val-Wrk_PrevPV)/Wrk_ScanTime*Cfg_RateTime) ,LEQ(Wrk_ScanTime,0.0) CLR(Wrk_RoC) ,MOV(Val,Wrk_PrevPV) ];
				RC: "If we are using the Substitute PV, NOT using the Rate of Change, or if the PV is$N"
				    "Infinite or Not a Number, just set the Rate of Change Value  to zero.$N"
				    "Otherwise, publish the calculated rate of change.$N"
				    "";
				N: [XIO(Sts_SubstPV) XIC(Cfg_HasRoC) XIO(Wrk_SelPVInfNaN) MOV(Wrk_RoC,Val_RoC) ,[XIC(Sts_SubstPV) ,XIO(Cfg_HasRoC) ,XIC(Wrk_SelPVInfNaN) ] CLR(Val_RoC) ];
				RC: "============================================================$N"
				    "PV DEVIATION FROM REFERENCE PROCESSING$N"
				    "============================================================$N"
				    "The difference between the Value (Val) and the entered$N"
				    "Reference (setpoint) (Val_Ref) is the Deviation (Val_Dev).$N"
				    "If we$'re not using the Deviation, or if the PV is Infinite or Not a Number,$N"
				    "zero the deviation.";
				N: [XIC(Cfg_HasDev) XIO(Wrk_SelPVInfNaN) SUB(Val,Cfg_Ref,Val_Dev) ,[XIO(Cfg_HasDev) ,XIC(Wrk_SelPVInfNaN) ] CLR(Val_Dev) ];
				RC: "============================================================$N"
				    "CAPTURE MIN / MAX PV EXCURSION$N"
				    "============================================================$N"
				    "Capture the PV Maximum Excursion (highest value reached) and$N"
				    "PV Minimum Excursion (lowest value reached) since last cleared.";
				N: XIO(Wrk_SelPVInfNaN)[GRT(Val,Val_PVMaxCapt) MOV(Val,Val_PVMaxCapt) ,LES(Val,Val_PVMinCapt) MOV(Val,Val_PVMinCapt) ];
				RC: "============================================================$N"
				    "CLEAR CAPTURED MIN / MAX COMMAND PROCESSING$N"
				    "============================================================$N"
				    "This rung $Qclears$Q the captured Minimum and Maximum$N"
				    "by setting them to the current PV Value.";
				N: [XIC(OCmd_ClearCapt) OTU(OCmd_ClearCapt) ,XIC(PCmd_ClearCapt) OTU(PCmd_ClearCapt) ]XIO(Wrk_SelPVInfNaN)MOV(Val,Val_PVMaxCapt)MOV(Val,Val_PVMinCapt);
				RC: "============================================================$N"
				    "ANALOG THRESHOLD STATUS PROCESSING$N"
				    "============================================================$N"
				    "If the Analog Value is Infinite or Not a Number, skip the compares$N"
				    "to avoid Minor Faults and just flag the value as Bad below.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####$N"
				    "#####  Changed PV Out of Range comparisons to use RAW (INPUT) PV, not scaled/filtered value (Val).  #####";
				N: XIC(Wrk_SelPVInfNaN)JMP(FailCheck);
				RC: "If the Analog Value exceeds the Control High-High limit,$N"
				    "issue the Control High-High Status.$N"
				    "If the Analog Value falls back below the limit (minus deadband),$N"
				    "clear the Control High-High Status.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-12: Added Control High-High Limit.  #####";
				N: [GEQ(Val,Cfg_CtrlHiHiLim) ,XIC(Sts_CtrlHiHi) CMP(Val>=(Cfg_CtrlHiHiLim-Cfg_CtrlHiHiDB)) ]OTE(Sts_CtrlHiHi);
				RC: "If the Analog Value exceeds the Control High limit,$N"
				    "issue the Control High Status.$N"
				    "If the Analog Value falls back below the limit (minus deadband),$N"
				    "clear the Control High Status.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-12: Added Control High Limit.  #####";
				N: [GEQ(Val,Cfg_CtrlHiLim) ,XIC(Sts_CtrlHi) CMP(Val>=(Cfg_CtrlHiLim-Cfg_CtrlHiDB)) ]OTE(Sts_CtrlHi);
				RC: "If the Analog Value falls below the Control Low limit,$N"
				    "issue the Control Low Status.$N"
				    "If the Analog Value rises back above the limit (plus deadband), $N"
				    "clear the Control Low Status.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-12: Added Control Low Limit.  #####";
				N: [LEQ(Val,Cfg_CtrlLoLim) ,XIC(Sts_CtrlLo) CMP(Val<=(Cfg_CtrlLoLim+Cfg_CtrlLoDB)) ]OTE(Sts_CtrlLo);
				RC: "If the Analog Value falls below the Control Low-Low limit,$N"
				    "issue the Control Low-Low Status.$N"
				    "If the Analog Value rises back above the limit (plus deadband), $N"
				    "clear the Control Low-Low Status.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-12: Added Control Low-Low Limit.  #####";
				N: [LEQ(Val,Cfg_CtrlLoLoLim) ,XIC(Sts_CtrlLoLo) CMP(Val<=(Cfg_CtrlLoLoLim+Cfg_CtrlLoLoDB)) ]OTE(Sts_CtrlLoLo);
				RC: "If the Analog Value exceeds the High-High limit,$N"
				    "issue the High-High Status Flag.$N"
				    "If the Analog Value falls back below the limit (minus deadband),$N"
				    "clear the High-High Status Flag.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####";
				N: [GEQ(Val,Cfg_HiHiLim) ,XIC(HiHiGate.Out) CMP(Val>=(Cfg_HiHiLim-Cfg_HiHiDB)) ]OTE(Wrk_HiHi);
				RC: "If the Analog Value exceeds the High limit,$N"
				    "issue the High Status Flag.$N"
				    "If the Analog Value falls back below the limit (minus deadband), $N"
				    "clear the High Status Flag.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####";
				N: [GEQ(Val,Cfg_HiLim) ,XIC(HiGate.Out) CMP(Val>=(Cfg_HiLim-Cfg_HiDB)) ]OTE(Wrk_Hi);
				RC: "If the Analog Value falls below the Low limit,$N"
				    "issue the Low Status Flag.$N"
				    "If the Analog Value rises back above the limit (plus deadband), $N"
				    "clear the Low Status Flag.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####";
				N: [LEQ(Val,Cfg_LoLim) ,XIC(LoGate.Out) CMP(Val<=(Cfg_LoLim+Cfg_LoDB)) ]OTE(Wrk_Lo);
				RC: "If the Analog Value falls below the Low-Low limit,$N"
				    "issue the Low-Low Status Flag.$N"
				    "If the Analog Value rises back above the limit (plus deadband),$N"
				    "clear the Low-Low Status Flag.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####";
				N: [LEQ(Val,Cfg_LoLoLim) ,XIC(LoLoGate.Out) CMP(Val<=(Cfg_LoLoLim+Cfg_LoLoDB)) ]OTE(Wrk_LoLo);
				RC: "If the absolute value of the PV Rate of Change exceeds the High limit$N"
				    "for the On-Delay Time, issue the PV High Rate of Change Status.$N"
				    "If the absolute value of the PV Rate of Change falls back below the limit$N"
				    "(minus deadband) for the Off-Delay Time, clear the PV High Rate of Change Status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####";
				N: [CMP(ABS(Val_RoC)>=Cfg_HiRoCLim) ,XIC(HiRoCGate.Out) CMP(ABS(Val_RoC)>(Cfg_HiRoCLim-Cfg_HiRoCDB)) ]OTE(Wrk_HiRoC);
				RC: "If the Analog Value exceeds the Reference value by more than the$N"
				    "High Deviation limit for the On-Delay Time, issue the PV High Deviation Status.$N"
				    "If the Analog Value Deviation falls back below the limit (minus deadband) for the$N"
				    "Off-Delay Time, clear the PV High Deviation Status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####";
				N: [GRT(Val_Dev,Cfg_HiDevLim) ,XIC(HiDevGate.Out) CMP(Val_Dev>(Cfg_HiDevLim-Cfg_HiDevDB)) ]OTE(Wrk_HiDev);
				RC: "If the Analog Value falls below the Reference value by more than the$N"
				    "Low Deviation limit for the On-Delay Time, issue the PV Low Deviation Status.$N"
				    "If the Analog Value Deviation rises back above the limit (plus deadband) for the$N"
				    "Off-Delay Time, clear the PV Low Deviation Status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####";
				N: [LES(Val_Dev,Cfg_LoDevLim) ,XIC(LoDevGate.Out) CMP(Val_Dev<(Cfg_LoDevLim+Cfg_LoDevDB)) ]OTE(Wrk_LoDev);
				RC: "If the selected input (real or simulated) is Infinite or NaN, skip the (raw) fail limit check.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed PV Out of Range comparisons to use RAW (INPUT) PV, not scaled/filtered value (Val).  #####";
				N: LBL(FailCheck)XIC(Wrk_InpInfNaN)JMP(Alarms);
				RC: "If the Analog Value rises above the Fail High Limit or falls below the$N"
				    "Fail Low Limit, raise the Fail Status Flag.$N"
				    "$N"
				    "If the Analog Value is back in range, that is, it is below the Fail High Limit (minus$N"
				    "deadband) and above the Fail Low Limit (plus deadband),$N"
				    "clear the Fail Status Flag.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed limits from Values to Configurations (removed Mode, Settings).  #####$N"
				    "#####  Changed PV Out of Range comparisons to use RAW (INPUT) PV, not scaled/filtered value (Val).  #####";
				N: XIO(Err_Raw)[[GEQ(Wrk_RawPV,Cfg_FailHiLim) ,LEQ(Wrk_RawPV,Cfg_FailLoLim) ] ,XIC(FailGate.Out) [CMP(Wrk_RawPV>=(Cfg_FailHiLim-Cfg_FailDB)) ,CMP(Wrk_RawPV<=(Cfg_FailLoLim+Cfg_FailDB)) ] ]OTE(Wrk_Fail);
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "If the High-High Status Flag is set for a time that exceeds the On-Delay Time,$N"
				    "issue the PV High-High Status.$N"
				    "If the High-High Status Flag resets for a time that exceeds the Off-Delay Time, $N"
				    "clear the PV High-High Status.";
				N: LBL(Alarms)[XIC(Wrk_HiHi) OTE(Sts_HiHiCmp) ,P_Gate(HiHiGate) ,XIC(HiHiGate.Out) OTE(Sts_HiHi) ];
				RC: "If the High Status Flag is set for a time that exceeds the On-Delay Time,$N"
				    "issue the PV High Status.$N"
				    "If the High Status Flag resets for a time that exceeds the Off-Delay Time, $N"
				    "clear the PV High Status.";
				N: [XIC(Wrk_Hi) OTE(Sts_HiCmp) ,P_Gate(HiGate) ,XIC(HiGate.Out) OTE(Sts_Hi) ];
				RC: "If the Low Status Flag is set for a time that exceeds the On-Delay Time,$N"
				    "issue the PV Low Status.$N"
				    "If the Low Status Flag resets for a time that exceeds the Off-Delay Time, $N"
				    "clear the PV Low Status.";
				N: [XIC(Wrk_Lo) OTE(Sts_LoCmp) ,P_Gate(LoGate) ,XIC(LoGate.Out) OTE(Sts_Lo) ];
				RC: "If the Low-Low Status Flag is set for a time that exceeds the On-Delay Time,$N"
				    "issue the PV Low-Low Status.$N"
				    "If the Low-Low Status Flag resets for a time that exceeds the Off-Delay Time, $N"
				    "clear the PV Low-Low Status.";
				N: [XIC(Wrk_LoLo) OTE(Sts_LoLoCmp) ,P_Gate(LoLoGate) ,XIC(LoLoGate.Out) OTE(Sts_LoLo) ];
				RC: "If the absolute value of the PV Rate of Change exceeds the High limit$N"
				    "for the On-Delay Time, issue the PV High Rate of Change Status.$N"
				    "If the absolute value of the PV Rate of Change falls back below the limit$N"
				    "(minus deadband) for the Off-Delay Time, clear the PV High Rate of Change Status.";
				N: [XIC(Wrk_HiRoC) OTE(Sts_HiRoCCmp) ,P_Gate(HiRoCGate) ,XIC(HiRoCGate.Out) OTE(Sts_HiRoC) ];
				RC: "If the Analog Value exceeds the Reference value by more than the$N"
				    "High Deviation limit for the On-Delay Time, issue the PV High Deviation Status.$N"
				    "If the Analog Value Deviation falls back below the limit (minus deadband) for the$N"
				    "Off-Delay Time, clear the PV High Deviation Status.";
				N: [XIC(Wrk_HiDev) OTE(Sts_HiDevCmp) ,P_Gate(HiDevGate) ,XIC(HiDevGate.Out) OTE(Sts_HiDev) ];
				RC: "If the Analog Value falls below the Reference value by more than the$N"
				    "Low Deviation limit for the On-Delay Time, issue the PV Low Deviation Status.$N"
				    "If the Analog Value Deviation rises back above the limit (plus deadband) for the$N"
				    "Off-Delay Time, clear the PV Low Deviation Status.";
				N: [XIC(Wrk_LoDev) OTE(Sts_LoDevCmp) ,P_Gate(LoDevGate) ,XIC(LoDevGate.Out) OTE(Sts_LoDev) ];
				RC: "If the Fail Status Flag is set for a time that exceeds the On-Delay Time,$N"
				    "issue the PV Fail Status.$N"
				    "If the Fail Status Flag resets for a time that exceeds the Off-Delay Time, $N"
				    "clear the PV Fail Status, AND if the Bad PV input clears or the input is Siimulated,$N"
				    "AND if the value is NOT INF/NAN and there are no configuration errors,$N"
				    "clear the PV Fail Status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Removed Sts_InpPV (it was simply inverse of Sts_SubstPV).  #####$N"
				    "#####  Changed PV Out of Range comparisons to use RAW (INPUT) PV, not scaled/filtered value (Val).  #####";
				N: [XIC(Wrk_Fail) OTE(Sts_FailCmp) ,P_Gate(FailGate) ,[XIC(FailGate.Out) ,XIO(Inp_Sim) [XIC(Inp_PVBad) ,XIC(Cfg_UseChanSrcQ) GEQ(Inp_PVSrcQ,32) ] ,XIC(Wrk_InpInfNaN) ,XIC(Err_Raw) ,XIC(Err_EU) ] OTE(Sts_Fail) ];
				RC: "If the PV is not substituted and it has a total Failure (rung above), or if it$N"
				    "is Infinite or Not a Number, flag it as BAD.$N"
				    "If the Uncertain input is set and the PV is not simulated or substituted,$N"
				    "flag it as UNCERTAIN.";
				N: XIO(Wrk_SubstPV)[XIO(Inp_Sim) [XIC(Inp_PVUncertain) ,XIC(Cfg_UseChanSrcQ) LIM(16,Inp_PVSrcQ,31) ] OTE(Sts_PVUncertain) ,XIC(Sts_Fail) OTE(Sts_PVBad) ];
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "The various alarms are ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1), EXCEPT:$N"
				    "* If the Rate of Change function is configured to not exist, the high rate of change alarm cannot exist.$N"
				    "* If the Deviation function is configured to not exist, the high and low deviation alarms cannot exist.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [OTL(HiHi.PCfg_AllowExist) OTL(Hi.PCfg_AllowExist) OTL(Lo.PCfg_AllowExist) OTL(LoLo.PCfg_AllowExist) OTL(Fail.PCfg_AllowExist) ,XIC(Cfg_HasRoC) OTE(HiRoC.PCfg_AllowExist) ,XIC(Cfg_HasDev) OTE(HiDev.PCfg_AllowExist) OTE(LoDev.PCfg_AllowExist) ];
				RC: "Handle PV High-High Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(HiHi);
				RC: "Handle PV High Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(Hi);
				RC: "Handle PV Low Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(Lo);
				RC: "Handle PV Low-Low Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(LoLo);
				RC: "Handle PV High Rate of Change Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(HiRoC);
				RC: "Handle PV High Deviation from Reference Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(HiDev);
				RC: "Handle PV Low Deviation from Reference Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(LoDev);
				RC: "Handle Input Failure Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(Fail);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q box on the graphic symbol).";
				N: [XIC(HiHi.Sts_AlmInh) ,XIC(Hi.Sts_AlmInh) ,XIC(Lo.Sts_AlmInh) ,XIC(LoLo.Sts_AlmInh) ,XIC(HiRoC.Sts_AlmInh) ,XIC(HiDev.Sts_AlmInh) ,XIC(LoDev.Sts_AlmInh) ,XIC(Fail.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "Flag a Configuration Error if any Status On-Delay, Off-Delay$N"
				    "or Gate Delay timer preset is invalid$N"
				    "(and set timer to a default, non-faulting value).";
				N: [XIC(HiHiGate.Sts_Err) ,XIC(HiGate.Sts_Err) ,XIC(LoGate.Sts_Err) ,XIC(LoLoGate.Sts_Err) ,XIC(HiRoCGate.Sts_Err) ,XIC(HiDevGate.Sts_Err) ,XIC(LoDevGate.Sts_Err) ,XIC(FailGate.Sts_Err) ]OTE(Err_Timer);
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Bad Raw Scaling configs$N"
				    "Bad Engineering Units Scaling configs$N"
				    "Bad 1st-Order Filter configs$N"
				    "Bad Alarm Deadband configs$N"
				    "Bad Alarm Minimum Duration configs$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.$N"
				    "";
				N: [XIC(Err_Raw) ,XIC(Err_EU) ,XIC(Err_Filt) ,XIC(Err_Timer) ,[XIC(HiHi.Sts_Err) ,XIC(Hi.Sts_Err) ,XIC(Lo.Sts_Err) ,XIC(LoLo.Sts_Err) ,XIC(HiRoC.Sts_Err) ,XIC(HiDev.Sts_Err) ,XIC(LoDev.Sts_Err) ,XIC(Fail.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "============================================================$N"
				    "ENUMERATED STATUS VALUES$N"
				    "============================================================$N"
				    "Source and Quality (Srcq) for Val_InpPV$N"
				    "Start with the Srcq from the Input Channel object if it$'s available.$N"
				    "Otherwise, start based on bad/uncertain input bits.$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Modified to correct precedence and value of Simulated PV.  #####$N"
				    "#####  V4.00.01  2018-08-29:  Modified handling of Simulated PV and scaling config errors.  #####";
				N: [XIO(Cfg_UseChanSrcQ) MOV(1,Wrk_SrcQ) ,XIC(Cfg_UseChanSrcQ) MOV(Inp_PVSrcQ,Wrk_SrcQ) ,XIC(Inp_PVUncertain) MOV(16,Wrk_SrcQ) ,XIC(Inp_PVBad) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(10,Wrk_SrcQ) ,[XIC(Wrk_InpInfNaN) ,XIC(Sts_FailCmp) ] [XIO(Cfg_UseChanSrcQ) ,XIC(Inp_Sim) ] MOV(32,Wrk_SrcQ) ,[XIC(Err_Raw) ,XIC(Err_EU) ] MOV(35,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality (SrcQ) for Val (primary value)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Modified to allow Substitute PV to control SrcQ despite alarm for failed PV.  #####$N"
				    "#####  V4.00.01  2018-08-29:  Modified handling of Substitute PV and Channel SrcQ.  #####";
				N: [MOV(SrcQ_IO,Wrk_SrcQ) ,XIC(Sts_SubstPV) MOV(18,Wrk_SrcQ) ,[XIC(Wrk_SelPVInfNaN) ,XIC(FailGate.Out) ] MOV(32,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ) ];
				RC: "This rung generates the enumerated Device Fault Status:$N"
				    "0 = none$N"
				    "20 = Lo$N"
				    "21 = Hi$N"
				    "22 = Lo Deviation$N"
				    "23 = Hi Deviation$N"
				    "24 = Lo-Lo$N"
				    "25 = Hi-Hi$N"
				    "26 = Hi Rate of Change$N"
				    "32 = Failed (I/O fault or out of range)$N"
				    "34 = Config Error";
				N: [CLR(Wrk_Fault) ,XIC(Sts_Lo) MOV(20,Wrk_Fault) ,XIC(Sts_Hi) MOV(21,Wrk_Fault) ,XIC(Sts_LoDev) MOV(22,Wrk_Fault) ,XIC(Sts_HiDev) MOV(23,Wrk_Fault) ,XIC(Sts_LoLo) MOV(24,Wrk_Fault) ,XIC(Sts_HiHi) MOV(25,Wrk_Fault) ,XIC(Sts_HiRoC) MOV(26,Wrk_Fault) ,[XIC(Sts_Fail) ,XIC(SrcQ.5) ] MOV(32,Wrk_Fault) ,XIC(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for reset or ack required:$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count including attached Channel object.  #####";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) OTU(Wrk_Notify.0) ,GRT(HiHi.Val_Notify,Wrk_Notify) MOV(HiHi.Val_Notify,Wrk_Notify) ,GRT(Hi.Val_Notify,Wrk_Notify) MOV(Hi.Val_Notify,Wrk_Notify) ,GRT(Lo.Val_Notify,Wrk_Notify) MOV(Lo.Val_Notify,Wrk_Notify) ,GRT(LoLo.Val_Notify,Wrk_Notify) MOV(LoLo.Val_Notify,Wrk_Notify) ,GRT(HiRoC.Val_Notify,Wrk_Notify) MOV(HiRoC.Val_Notify,Wrk_Notify) ,GRT(HiDev.Val_Notify,Wrk_Notify) MOV(HiDev.Val_Notify,Wrk_Notify) ,GRT(LoDev.Val_Notify,Wrk_Notify) MOV(LoDev.Val_Notify,Wrk_Notify) ,GRT(Fail.Val_Notify,Wrk_Notify) MOV(Fail.Val_Notify,Wrk_Notify) ,[XIC(HiHi.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(Hi.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(Lo.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(LoLo.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(HiRoC.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(HiDev.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(LoDev.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(Fail.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTL(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_UnackAlmC,Val_UnackAlmC) ];
				RC: "Roll up the notification from the input Channel object.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count including attached PV (e.g., P_AIChan) object.  #####";
				N: [GRT(Inp_PVNotify,Wrk_Notify) MVM(Inp_PVNotify,2#1111_1110,Wrk_Notify) ,XIC(Inp_PVNotify.0) OTL(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_NotifyAll) ];
				RC: "This rung identifies:$N"
				    "* if any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(HiHi.Sts_RdyAck) ,XIC(Hi.Sts_RdyAck) ,XIC(Lo.Sts_RdyAck) ,XIC(LoLo.Sts_RdyAck) ,XIC(HiRoC.Sts_RdyAck) ,XIC(HiDev.Sts_RdyAck) ,XIC(LoDev.Sts_RdyAck) ,XIC(Fail.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(HiHi.Sts_RdyReset) ,XIC(Hi.Sts_RdyReset) ,XIC(Lo.Sts_RdyReset) ,XIC(LoLo.Sts_RdyReset) ,XIC(HiRoC.Sts_RdyReset) ,XIC(HiDev.Sts_RdyReset) ,XIC(LoDev.Sts_RdyReset) ,XIC(Fail.Sts_RdyReset) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear Ownership. clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "$QLurking$Q Operator Commands are cleared, as well as the Program Reset.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Removed rung for PSet_ / Val_Owner.  #####";
				N: OTU(MCmd_InpPV)OTU(MCmd_SubstPV)OTU(OCmd_Reset)OTU(OCmd_ResetAckAll)OTU(PCmd_Reset);
				RC: "Set up the filter initialization one-shot so filter will start from first valid value.";
				N: OTU(Wrk_ValidONS);
				RC: "Set up the PV Min/Max Capture function to $Qclear$Q on first scan,$N"
				    "thus capturing the first PV value as $Qmin$Q and $Qmax$Q";
				N: OTL(PCmd_ClearCapt);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_AOut (Description := "Analog Output",
	                                      Revision := "4.10",
	                                      RevisionExtension := ".01 Release",
	                                      RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                      Vendor := "Rockwell Automation",
	                                      ExecutePrescan := Yes,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := Yes,
	                                      CreatedDate := "2008-03-27T19:50:50.098Z",
	                                      CreatedBy := "Not Available",
	                                      EditedDate := "2020-12-08T03:30:10.868Z",
	                                      EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                      SoftwareRevision := "v32.02",
	                                      AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction controls an Analog Output and provides:$N*  Program and Operator entry of target CV in Engineering Units$N*  Ramping of Output CV to target at specified Rate of Change (EU/sec)$N*  Clamping of Output CV at configured minimum and maximum limits$N*  Scaling of Output CV from Engineering Units to Raw (I/O card) Units$N*  Monitoring of Interlock conditions which cause output to shed$N*  Configurable shed to HOLD or to configured value$N*  Monitoring of I/O communication faults$N*  Alarms for Interlock Trip, I/O Fault$N*  $QAvailable$Q status for use by automation logic to know whether Output$N      can be controlled by other objects.$N$NCommand Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$NCommand Sources: Operator, Program, External, Override, Maintenance, Out of$NService, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$NSee 4.10 Release Notes for details.$N* No changes, uprevved because P_CmdSrc 4.10.01 is used.$N$NPREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Changed Sts_Available to use input availability from interlocks.$N* Updated to P_CmdSrc V4.10.00.$N* Added Cfg_HasMoreObj$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-11)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added notify and unack count rollup for associated object(s).$N* Changed $QMode$Q to $QCommand Source$Q using P_CmdSrc 4.00.00.$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* Aligned ready bit naming with command bit names.$N* Added unacked alarm count.$N* Added  configurable decimal places for display on HMI.$N* Corrected CV Rate of Change Limiting when one direction is unlimited.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_Tieback : REAL (Description := "Tieback CV (in raw, Out_CV units) used in Hand or Init",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0.00000000e+000);
			Inp_IntlkOK : BOOL (Description := "1=Interlocks OK, Analog Output can be set",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 1);
			Inp_NBIntlkOK : BOOL (Description := "1=Non-Bypassable Interlocks OK, Analog Output can be set",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_IntlkAvail : BOOL (Description := "1 = Interlock Availibility OK",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Inp_IOFault : BOOL (Description := "Input Communication Status 0=OK, 1=fail",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Sim : BOOL (Description := "1=I/O are being simulated, set output CV to 0, ignore I/O Fault",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Inp_Hand OF CmdSrc.Inp_Hand (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes);
			Inp_Ovrd OF CmdSrc.Inp_Ovrd (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes);
			Inp_OvrdCV : REAL (Description := "CV target in Override Mode",
			                      Usage := Input,
			                      RADIX := Float,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0.00000000e+000);
			Inp_ExtInh OF CmdSrc.Inp_ExtInh (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Reset : BOOL (Description := "1=Reset shed latches and cleared alarms",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_ShedHold : BOOL (Description := "1=Hold Output on Interlock, 0=Go to Cfg_IntlkCV",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_SkipRoCLim : BOOL (Description := "1=Skip RoC Limiting in Intlk, Maint, Ovrd",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_SetTrack : BOOL (Description := "1=PSets track OSets in Oper, OSets track PSets in Prog, 0=no tracking",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1);
			Cfg_SetTrackOvrdHand : BOOL (Description := "1=Prog/Oper Settings track Override/Hand CV",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0);
			Cfg_HasIntlkObj : BOOL (Description := "1=Tells HMI a P_Intlk is connected to Inp_Intlk",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasCVNav : BOOL (Description := "1=Tells HMI to enable navigation to a connected CV object",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_OvrdIntlk : BOOL (Description := "1=Override ignores Bypassable Intlk; 0=always use Intlk",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_ShedOnIOFault : BOOL (Description := "1=Stop Motor and Alarm on I/O Fault; 0=Alarm only on I/O Fault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1);
			Cfg_DecPlcs : DINT (Description := "Number of decimal places for CV display (0..6)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 2);
			Cfg_HasIntlkTripAlm OF IntlkTrip.Cfg_Exists (Description := "1=Interlock Trip Alarm exists and will be checked",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_HasIOFaultAlm OF IOFault.Cfg_Exists (Description := "1=I/O Fault Alarm exists and will be checked",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_IntlkTripResetReqd OF IntlkTrip.Cfg_ResetReqd (Description := "1=Reset required to clear Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_IOFaultResetReqd OF IOFault.Cfg_ResetReqd (Description := "1=Reset required to clear I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_IntlkTripAckReqd OF IntlkTrip.Cfg_AckReqd (Description := "1=Acknowledge required for Interlock Trip Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_IOFaultAckReqd OF IOFault.Cfg_AckReqd (Description := "1=Acknowledge required for I/O Fault Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_IntlkTripSeverity OF IntlkTrip.Cfg_Severity (Description := "Interlock Trip Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_IOFaultSeverity OF IOFault.Cfg_Severity (Description := "I/O Fault Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_MinCV : REAL (Description := "Minimum CV (in EU, for limiting)",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0.00000000e+000);
			Cfg_MaxCV : REAL (Description := "Maximum CV (in EU, for limiting)",
			                     Usage := Input,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 1.00000000e+002);
			Cfg_CVRoCLimInc : REAL (Description := "CV Rate of Change Limit, Increasing, (EU/sec, 0=unlimited)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0.00000000e+000);
			Cfg_CVRoCLimDec : REAL (Description := "CV Rate of Change Limit, Decreasing, (EU/sec, 0=unlimited)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0.00000000e+000);
			Cfg_IntlkCV : REAL (Description := "CV Target when interlocked (if not Cfg_ShedHold) (EU)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			Cfg_CVEUMin : REAL (Description := "CV Minimum in Engineering Units (for scaling)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			Cfg_CVEUMax : REAL (Description := "CV Maximum in Engineering Units (for scaling)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1.00000000e+002);
			Cfg_CVRawMin : REAL (Description := "CV Minimum in I/O (raw) Units (for scaling)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			Cfg_CVRawMax : REAL (Description := "CV Maximum in I/O (raw) Units (for scaling)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+002);
			Cfg_MaxInactiveCV : REAL (Description := "When Val_CVOut is greater than this value (in CV EU) set Sts_Active (for HMI)",
			                             Usage := Input,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0.00000000e+000);
			PSet_CV : REAL (Description := "Program Setting of Controlled Variable (output) (in EU)",
			                   Usage := Input,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0.00000000e+000);
			PSet_Owner : DINT (Description := "Program Owner Request ID (non-zero) or Release (zero)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			XSet_CV : REAL (Description := "External Setting of Controlled Variable (output) (in EU)",
			                   Usage := Input,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0.00000000e+000);
			PCmd_Prog OF CmdSrc.PCmd_Prog (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Oper OF CmdSrc.PCmd_Oper (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Lock OF CmdSrc.PCmd_Lock (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Unlock OF CmdSrc.PCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Normal OF CmdSrc.PCmd_Normal (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Reset : BOOL (Description := "Program Command to reset shed latches and cleared alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_IntlkTripAck OF IntlkTrip.PCmd_Ack (Description := "Program Command to Acknowledge Interlock Trip Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_IntlkTripSuppress OF IntlkTrip.PCmd_Suppress (Description := "Program Command to Suppress Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IntlkTripUnsuppress OF IntlkTrip.PCmd_Unsuppress (Description := "Program Command to Unsuppress Interlock Trip Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_IntlkTripUnshelve OF IntlkTrip.PCmd_Unshelve (Description := "Program Command to Unshelve Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultAck OF IOFault.PCmd_Ack (Description := "Program Command to Acknowledge I/O Fault Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_IOFaultSuppress OF IOFault.PCmd_Suppress (Description := "Program Command to Suppress I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_IOFaultUnsuppress OF IOFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress I/O Fault Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultUnshelve OF IOFault.PCmd_Unshelve (Description := "Program Command to Unshelve I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			MCmd_Rel OF CmdSrc.MCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			OCmd_Unlock OF CmdSrc.OCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			XCmd_Acq OF CmdSrc.XCmd_Acq (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Rel OF CmdSrc.XCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Reset : BOOL (Description := "External Command to reset shed latches and cleared alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Out_CV : REAL (Description := "CV Output in Raw (I/O Card) Units",
			                  Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0.00000000e+000);
			Val_CVSet : REAL (Description := "Value of selected CV Setting (before rate limiting, in EU)",
			                     Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0.00000000e+000);
			Val_CVOut : REAL (Description := "Value of CV Output (after rate limiting) (in EU)",
			                     Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0.00000000e+000);
			Val_CVEUMin : REAL (Description := "Minimum of scaled range = MIN (Cfg_CVEUMin, Cfg_CVEUMax)",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0.00000000e+000);
			Val_CVEUMax : REAL (Description := "Maximum of scaled range = MAX (Cfg_CVEUMin, Cfg_CVEUMax)",
			                       Usage := Output,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 1.00000000e+002);
			SrcQ_IO : DINT (Description := "Source and Quality of primary I/O (enumeration)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			SrcQ : DINT (Description := "Source and Quality of primary Val/Sts (enumeration)",
			                Usage := Output,
			                RADIX := Decimal,
			                Required := No,
			                Visible := No,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
			Val_Sts : DINT (Description := "0=AtTgt 1=RampDn 2=RampUp 3=ClampMin 4=ClampMax",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fault : DINT (Description := "Device Fault Status 0=none, 32=I/OFault, 34=CfgErr",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : DINT (Description := "Highest Alarm prio and ack status this object + channel (enum)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : DINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_Owner : DINT (Description := "Current Object Owner ID (0=not owned)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Ramping : BOOL (Description := "1=CV is ramping to target",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_Clamped : BOOL (Description := "1=CV Set is clamped at CVMin or CVMax",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_SkipRoCLim : BOOL (Description := "1=Rate of Change Limiting was skipped this scan (Maint, Ovrd, Intlk, Hand)",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_Active : BOOL (Description := "1=CV is greater than Cfg_MaxInactiveCV, show graphic symbol as $Qactive$Q",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Available : BOOL (Description := "1=Analog Output available for control by automation (Prog)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Bypass : BOOL (Description := "1=Bypassable Interlocks are Bypassed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_BypActive : BOOL (Description := "1=Bypassing Active (Bypassed or Maintenance)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_NotRdy : BOOL (Description := "1=Device Not Ready, see detail bits for reason",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_CfgErr : BOOL (Description := "1=Device Not Ready: Configuration Error",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Nrdy_Intlk : BOOL (Description := "1=Device Not Ready: Interlock Not OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_IOFault : BOOL (Description := "1=Device Not Ready: I/O Fault (Shed Requires Reset)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Nrdy_OoS : BOOL (Description := "1=Device Not Ready: Device is Out of Service",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=Device has a Maintenance Bypass function active",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=One or more Alarms Shelved, Disabled or Suppressed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Limit : BOOL (Description := "1=Error in Config: CV Limits swapped",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_EU : BOOL (Description := "1=Error in Config: Scaled CV EU Min = Max",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			Err_Raw : BOOL (Description := "1=Error in Config: Raw Output Scaling Min = Max",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time, Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Hand OF CmdSrc.Sts_Hand (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OoS OF CmdSrc.Sts_OoS (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Maint OF CmdSrc.Sts_Maint (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only);
			Sts_Ovrd OF CmdSrc.Sts_Ovrd (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_Ext OF CmdSrc.Sts_Ext (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Prog OF CmdSrc.Sts_Prog (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_ProgLocked OF CmdSrc.Sts_ProgLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Oper OF CmdSrc.Sts_Oper (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OperLocked OF CmdSrc.Sts_OperLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Normal OF CmdSrc.Sts_Normal (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_ExtReqInh OF CmdSrc.Sts_ExtReqInh (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_ProgReqInh OF CmdSrc.Sts_ProgReqInh (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_MAcqRcvd OF CmdSrc.Sts_MAcqRcvd (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_IntlkTrip OF IntlkTrip.Inp (Description := "1=Status: CV held or forced by interlock NOT OK (1-shot)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Alm_IntlkTrip OF IntlkTrip.Alm (Description := "1=Alarm: CV held or forced by interlock NOT OK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Ack_IntlkTrip OF IntlkTrip.Ack (Description := "1=Interlock Trip Alarm has been acknowledged",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_IntlkTripDisabled OF IntlkTrip.Disabled (Description := "1=Interlock Trip Alarm has been Disabled by Maintenance",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_IntlkTripShelved OF IntlkTrip.Shelved (Description := "1=Interlock Trip Alarm has been Shelved by Operator",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_IntlkTripSuppressed OF IntlkTrip.Suppressed (Description := "1=Interlock Trip Alarm has been Suppressed by Program",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_IOFault OF IOFault.Inp (Description := "1=I/O Fault Status (0=OK, 1=Bad)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Alm_IOFault OF IOFault.Alm (Description := "1=I/O Fault Alarm",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Ack_IOFault OF IOFault.Ack (Description := "1=I/O Fault Alarm has been acknowledged",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_IOFaultDisabled OF IOFault.Disabled (Description := "1=I/O Fault Alarm has been Disabled by Maintenance",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_IOFaultShelved OF IOFault.Shelved (Description := "1=I/O Fault Alarm has been Shelved by Operator",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_IOFaultSuppressed OF IOFault.Suppressed (Description := "1=I/O Fault Alarm has been Suppressed by Program",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			MRdy_Rel OF CmdSrc.MRdy_Rel (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			ORdy_Unlock OF CmdSrc.ORdy_Unlock (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only);
			P_AOut : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			CmdSrc : P_CmdSrc (Description := "Control / Command Source Selection",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[7649,0,0,1,0,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']]");
			IOFault : P_Alarm (Description := "I/O Fault Alarm",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			IntlkTrip : P_Alarm (Description := "Interlock Trip Alarm",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17,'Interlock Tripped$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[6,'P_AOut$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[13,'Analog Output$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[13,'Analog Output$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_Notify : DINT (Description := "Buffer for building Val_Notify",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_Bypass : BOOL (Description := "Internal Bypassable Interlocks are Bypassed flag",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Cfg_EU : STRING_8 (Description := "Engineering Units for display on HMI",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[1,'%$00$00$00$00$00$00$00']");
			Wrk_CV : REAL (Description := "Working copy of Speed Reference (for limiting)",
			                 RADIX := Float,
			                 ExternalAccess := None,
			                 DefaultData := 0.00000000e+000);
			Wrk_CVSet : REAL (Description := "Final selected CV to feed to RoC Limiter",
			                    RADIX := Float,
			                    ExternalAccess := None,
			                    DefaultData := 0.00000000e+000);
			Wrk_CVOut : REAL (Description := "Wroking value of CV after Rate Limiting",
			                    RADIX := Float,
			                    ExternalAccess := None,
			                    DefaultData := 0.00000000e+000);
			Wrk_IntlkTripONS : BOOL (Description := "Interlock Tripped This Scan",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_ScanTime : REAL (Description := "Seconds since previous scan",
			                       RADIX := Float,
			                       ExternalAccess := None,
			                       DefaultData := 0.00000000e+000);
			Wrk_StepInc : REAL (Description := "Amount to change CVOut this scan for increase rate limiting",
			                      RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			Wrk_ScanT : TIMER (Description := "Scan Timer (milliseconds, always runs)",
			                    ExternalAccess := None,
			                    DefaultData := "[0,2147483647,0]");
			Wrk_SelCVDINT : DINT (Description := "Selected CV check for Infinite or Non A Number",
			                        RADIX := Hex,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Val_Notify : SINT (Description := "Current Alarm Level and Acknowledgement (enumeration)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Wrk_Sts : DINT (Description := "Buffer for building Val_Sts",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Fault : DINT (Description := "Buffer for building Val_Fault",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_SrcQ : DINT (Description := "Register for building Source / Quality enumeration",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			HMI_Type : STRING_16 (Description := "Must contain AOI name, used for HMI and Information S/W",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[6,'P_AOut$00$00$00$00$00$00$00$00$00$00']");
			Wrk_StepDec : REAL (Description := "Amount to change CVOut this scan for decrease rate limiting",
			                      RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			Cfg_CVNavTag : STRING_NavTag (Description := "Tagname for destination of CV Navigation button",
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_ShedIntlkCV : BOOL (Description := "Output CV being held at Interlock value",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_ShedHold : BOOL (Description := "Output CV being held at last good value",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			Wrk_UnackAlmC : DINT (Description := "Buffer for building Val_UnackAlmC",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			ORdy_CV : BOOL (Description := "1=Ready for OSet_CV (enables data entry field)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			ORdy_ResetAckAll : BOOL (Description := "1=Ready for OCmd_ResetAckAll (enables HMI button)",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Check : BOOL (Description := "1=Ready for MCmd_Check (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Bypass : BOOL (Description := "1=Ready for MCmd_Bypass (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			OCmd_ResetAckAll : BOOL (Description := "Operator Command to Reset all Alarms and latched Shed conditions",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Oper Cmd to reset shed latches and cleared alarms",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Check : BOOL (Description := "Maintenance Command to Check (not bypass) all Interlocks",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Bypass : BOOL (Description := "Maintenance Command to Bypass all Bypassable Interlocks",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			OSet_CV : REAL (Description := "Operator Setting of Controlled Variable (output) (in EU)",
			                  RADIX := Float,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Out of Service is asserted, Output OFF (zero), Alarms inhibited.")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    "Handle $QProgrammed Out of Servie$Q Selection using the standard$N"
				    "P_CmdSrc AOI (EnableInFalse Routine, false scan required!).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed P_Mode to P_CmdSrc.  #####";
				N: XIC(EnableIn)P_CmdSrc(CmdSrc);
				RC: "First-Come First-Served Ownership Arbitration still needs to happen, even when device is disabled.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "This rung publishes the Values for the scaled range.$N"
				    "If this instruction is reverse scaled by reversing the scaled (EU) min and max configurations,$N"
				    "the values are swapped so the the EUMax Value is always greater than the EUMin Value.$N"
				    "This makes the HMI bargraph and trend coding easier, and provides values$N"
				    "that can be pinned to the CV EU configuration of a PID, so the AOut and PID ranges are in lockstep.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added configurable decimal places for display on HMI.  #####";
				N: [GEQ(Cfg_CVEUMax,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_CVEUMin) MOV(Cfg_CVEUMax,Val_CVEUMax) ,LES(Cfg_CVEUMax,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_CVEUMax) MOV(Cfg_CVEUMax,Val_CVEUMin) ,LIM(7,Cfg_DecPlcs,-1) MOV(2,Cfg_DecPlcs) ];
				RC: "Restrict the configured Rate of Change Limits to be non-negative.$N"
				    "NOTE:  A $Qzero$Q value of a limit means $Qunlimited$Q (immediate).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: [LES(Cfg_CVRoCLimInc,0.0) CLR(Cfg_CVRoCLimInc) ,LES(Cfg_CVRoCLimDec,0.0) CLR(Cfg_CVRoCLimDec) ];
				RC: "If this Analog Output is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then show the alarms as $QParent object out of service$Q.$N"
				    "Show the overall acknowledgement status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed P_Mode to P_CmdSrc, added Out of Service.  #####";
				N: [OTL(IntlkTrip.Inp_OoS) P_Alarm(IntlkTrip) ,OTL(IOFault.Inp_OoS) P_Alarm(IOFault) ,CLR(Val_Notify) CLR(Val_NotifyAll) ,[XIC(IntlkTrip.Val_Notify.0) ,XIC(IOFault.Val_Notify.0) ] OTL(Val_Notify.0) OTL(Val_NotifyAll.0) ,[XIC(IntlkTrip.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ] OTE(Sts_AlmInh) ];
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Crossed CV Limits or Invalid Rate of Change Limit$N"
				    "Bad Engineering Units Scaling configs (Max = Min)$N"
				    "Bad Raw Scaling configs (Max = Min)$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: [LES(Cfg_MaxCV,Cfg_MinCV) OTE(Err_Limit) ,EQU(Cfg_CVEUMax,Cfg_CVEUMin) OTE(Err_EU) ,EQU(Cfg_CVRawMax,Cfg_CVRawMin) OTE(Err_Raw) ,[XIC(IntlkTrip.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err)OTE(Nrdy_CfgErr);
				RC: "If this Analog Output is OFF-SCAN (rung is false or EnableIn is false in FBD), then:$N"
				    "$N"
				    "Set the Output to the configured ($Qsafe$Q) Interlock CV value.$N"
				    "(In simulation, Out_CV is set to zero.)$N"
				    "$N"
				    "Other data are left in Last State!$N"
				    "Fixed scaling CPT -- previously, raw and EU were swapped.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [OTU(Sts_Available) OTU(Sts_MaintByp) OTU(Sts_Active) ,OTL(Sts_NotRdy) OTL(Nrdy_OoS) OTU(Nrdy_Intlk) OTU(Nrdy_IOFault) ,MOV(Cfg_IntlkCV,Wrk_CVSet) MOV(Cfg_IntlkCV,Wrk_CVOut) ,XIO(Inp_Sim) XIO(Nrdy_CfgErr) CPT(Out_CV,(Wrk_CVOut-Cfg_CVEUMin)*(Cfg_CVRawMax-Cfg_CVRawMin)/(Cfg_CVEUMax-Cfg_CVEUMin)+Cfg_CVRawMin) ,[XIC(Inp_Sim) ,XIC(Nrdy_CfgErr) ] CLR(Out_CV) ];
				RC: "The rate limiter$'s scan timer must run and clear every scan, whether the Instruction$N"
				    "is true or not.  Doing so here avoids a bump in the Value on transition to EnableIn TRUE.";
				N: TON(Wrk_ScanT,?,?)CLR(Wrk_ScanT.ACC);
				RC: "$QLurking$Q Operator Commands are cleared, as well as a Program Reset.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  Added External Command Source and Commands/Settings.  #####";
				N: [OTU(MCmd_Bypass) OTU(MCmd_Check) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####$N"
				    "#####  Aligned ready bit naming with command bit names.  #####";
				N: [OTU(MRdy_Bypass) OTU(MRdy_Check) ,OTU(ORdy_Reset) OTU(ORdy_ResetAckAll) OTU(Sts_RdyAck) OTU(ORdy_CV) ];
				RC: "This rung generates the enumerated Device Status:$N"
				    "0 = At Target$N"
				    "1 = Ramping Down$N"
				    "2 = Ramping Up$N"
				    "3 = Clamped at CVMin$N"
				    "4 = Clamped at CVMax$N"
				    "$N"
				    "And this rung generates the enumerated Device Fault Status:$N"
				    "0 = none$N"
				    "32 = I/O Fault$N"
				    "34 = Configuration Error$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [CLR(Val_Sts) ,XIO(Sts_Err) CLR(Val_Fault) ,XIC(Sts_Err) MOV(34,Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [CLR(Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: MOV(20,SrcQ);
		END_ROUTINE

		ROUTINE Logic (Description := "Normal Scan: control Analog Output")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_AOut :  PROCESS -- ANALOG OUTPUT$N"
				    "============================================================$N"
				    "Revision 4.10.01 Release  2019-10-17: See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, V3.x Revision History archived.$N"
				    "V4.00.00  2018-06-25:  Changed $QMode$Q to $QCommand Source$Q. Changed Inf_items to HMI_,$N"
				    "and added Cfg_Area for security. Added unacked alarm count.$N"
				    "Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N"
				    "Added  configurable decimal places for display on HMI.$N"
				    "Corrected CV Rate of Change Limiting when one direction is unlimited.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyAck and Sts_ResetReqd for use by external objects.$N"
				    "V4.10.00  2019-03-08:  Changed availability to use input availability from interlocks.$N"
				    "Updated to P_CmdSrc V4.10.00. Added Cfg_HasMoreObj.$N"
				    "V4.10.01  2019-10-17:  No changes, uprevved because P_CmdSrc 4.10.01 is used.$N"
				    "============================================================$N"
				    "This Instruction controls an Analog Output and provides:$N"
				    "$N"
				    "*  Program and Operator entry of target CV in Engineering Units$N"
				    "*  Ramping of Output CV to target at specified Rate of Change (EU/sec)$N"
				    "*  Clamping of Output CV at configured minimum and maximum limits$N"
				    "*  Scaling of Output CV from Engineering Units to Raw (I/O card) Units$N"
				    "*  Monitoring of Interlock conditions which cause output to shed$N"
				    "*  Configurable shed to HOLD or to configured SAFE value$N"
				    "*  Monitoring of I/O communication faults$N"
				    "*  Alarms for Interlock Trip, I/O Fault$N"
				    "*  $QAvailable$Q status for use by automation logic to know whether Output$N"
				    "      can be controlled by other objects.$N"
				    "$N"
				    "Command Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$N"
				    "Command Sources: Operator, Program, External, Override, Maintenance, Out of$N"
				    "Service, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)CONCAT(Cfg_Desc,Cfg_Label,Cfg_Tag)CONCAT(Cfg_Area,Cfg_EU,Cfg_CVNavTag)LOWER(HMI_Lib,HMI_Type);
				RC: "============================================================$N"
				    "COMMAND SOURCE PROCESSING$N"
				    "============================================================$N"
				    "This rung handles received Command Source selection Inputs and Commands:$N"
				    "$N"
				    "NOTE:  All Commands for Command Source and Alarm are aliased directly to the$N"
				    "corresponding Commands in the contained P_CmdSrc and P_Alarm AOIs.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed P_Mode to P_CmdSrc.  #####";
				N: LBL(SkipText)P_CmdSrc(CmdSrc);
				RC: "This rung handles simple First-Come First-Served Ownership Arbitration.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "These rungs get Configuration data (such as timer presets) and distribute as needed.$N"
				    "Note that some Configuration data are used directly in-place.$N"
				    "$N"
				    "This rung publishes the Values for the scaled range.$N"
				    "If this instruction is reverse scaled by reversing the scaled (EU) min and max configurations,$N"
				    "the values are swapped so the the EUMax Value is always greater than the EUMin Value.$N"
				    "This makes the HMI bargraph and trend coding easier, and provides values$N"
				    "that can be pinned to the CV EU configuration of a PID, so the AOut and PID ranges are in lockstep.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added configurable decimal places for display on HMI.  #####";
				N: [GEQ(Cfg_CVEUMax,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_CVEUMin) MOV(Cfg_CVEUMax,Val_CVEUMax) ,LES(Cfg_CVEUMax,Cfg_CVEUMin) MOV(Cfg_CVEUMin,Val_CVEUMax) MOV(Cfg_CVEUMax,Val_CVEUMin) ,LIM(7,Cfg_DecPlcs,-1) MOV(2,Cfg_DecPlcs) ];
				RC: "Restrict the configured Rate of Change Limits to be non-negative.$N"
				    "NOTE:  A $Qzero$Q value of a limit means $Qunlimited$Q (immediate).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: [LES(Cfg_CVRoCLimInc,0.0) CLR(Cfg_CVRoCLimInc) ,LES(Cfg_CVRoCLimDec,0.0) CLR(Cfg_CVRoCLimDec) ];
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Crossed CV Limits$N"
				    "Bad Engineering Units Scaling configs (Max = Min)$N"
				    "Bad Raw Scaling configs (Max = Min)$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.";
				N: [LES(Cfg_MaxCV,Cfg_MinCV) OTE(Err_Limit) ,EQU(Cfg_CVEUMax,Cfg_CVEUMin) OTE(Err_EU) ,EQU(Cfg_CVRawMax,Cfg_CVRawMin) OTE(Err_Raw) ]OTE(Nrdy_CfgErr);
				RC: "============================================================$N"
				    "SETTINGS PROCESSING$N"
				    "============================================================$N"
				    "This rung handles received Settings:$N"
				    "$N"
				    "Limit the Program and Operator CV Settings to the hard limits, regardless of Command Source$N"
				    "(in case tracking is off....).$N"
				    "When the Command Source is Program, use the Program Setting for the CV.$N"
				    "When the Command Source is External, use the External Setting for the CV.$N"
				    "When the Command Source is Operator or Maintenance, use the Operator Setting.$N"
				    "When the Command Source is Override, use the Override CV input for the CV.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added External Command Source and Commands/Settings.  #####";
				N: [[[GRT(PSet_CV,Cfg_MaxCV) MOV(Cfg_MaxCV,PSet_CV) ,LES(PSet_CV,Cfg_MinCV) MOV(Cfg_MinCV,PSet_CV) ] XIC(Sts_Prog) ,[GRT(XSet_CV,Cfg_MaxCV) MOV(Cfg_MaxCV,XSet_CV) ,LES(XSet_CV,Cfg_MinCV) MOV(Cfg_MinCV,XSet_CV) ] XIC(Sts_Ext) ,XIO(Sts_Maint) XIO(Sts_Hand) [GRT(OSet_CV,Cfg_MaxCV) MOV(Cfg_MaxCV,OSet_CV) ,LES(OSet_CV,Cfg_MinCV) MOV(Cfg_MinCV,OSet_CV) ] ] OTE(Sts_Clamped) ,[XIC(Sts_Oper) ,XIC(Sts_Maint) ] MOV(OSet_CV,Wrk_CV) ,XIC(Sts_Ext) MOV(XSet_CV,Wrk_CV) ,XIC(Sts_Prog) MOV(PSet_CV,Wrk_CV) ,XIC(Sts_Ovrd) MOV(Inp_OvrdCV,Wrk_CV) ];
				RC: "============================================================$N"
				    "INTERLOCK / PERMISSIVE BYPASS / CHECK COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Bypass Command bypasses the Bypassable Permissives and Interlocks.";
				N: XIC(MCmd_Bypass)OTU(MCmd_Bypass)OTL(Wrk_Bypass);
				RC: "The Check Command enables checking of ALL$N"
				    "Permissives and Interlocks (cancels the bypass).";
				N: XIC(MCmd_Check)OTU(MCmd_Check)OTU(Wrk_Bypass);
				RC: "If the internal Bypass flag is set, Bypassable Interlocks ARE BYPASSED.$N"
				    "Bypassing is ACTIVE if Bypass selected OR in Maintenance Command Source,$N"
				    "or in Override Command Source if Override Bypassing is configured.";
				N: [XIC(Wrk_Bypass) OTE(Sts_Bypass) ,XIC(Sts_Maint) ,XIC(Sts_Ovrd) XIC(Cfg_OvrdIntlk) ]OTE(Sts_BypActive);
				RC: "If a Maintenance Bypass function is active, display the Maintenance Bypass$N"
				    "Indicator (triangle symbol) on the graphic symbol.  Bypass functions are:$N"
				    "*  Interlock Bypass function is enabled.";
				N: XIC(Sts_Bypass)OTE(Sts_MaintByp);
				RC: "Ready for Interlock Bypass if not bypassed.$N"
				    "Ready to cancel Bypass (resume checking) if bypassed.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Aligned ready bit naming with command bit names.  #####";
				N: [XIO(Wrk_Bypass) OTE(MRdy_Bypass) ,XIC(Wrk_Bypass) OTE(MRdy_Check) ];
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.$N"
				    "$N"
				    "This rung processes received Reset Commands from:$N"
				    "$N"
				    "1.  The Operator via HMI Operator Command, or$N"
				    "2.  Higher-level strategies via Program Command$N"
				    "3.  Pushbuttons or other block via Input$N"
				    "$N"
				    "and forwards the Reset to ALL Alarms and latched Shed conditions.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External Command Source and Commands/Settings.  #####";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(XCmd_Reset) OTU(XCmd_Reset) ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(IntlkTrip.PCmd_Ack) ,OTL(IOFault.PCmd_Ack) ] ][OTL(IntlkTrip.PCmd_Reset) OTL(IOFault.PCmd_Reset) ,[XIO(Inp_IOFault) ,XIC(Inp_Sim) ] OTU(Nrdy_IOFault) ];
				RC: "The Analog Output is NOT READY to be controlled (by the owner specified by Command Source):$N"
				    "if it is Out of Service,$N"
				    "if there is a Configuration Error,$N"
				    "if interlocks are not OK (accounting for bypassing), or$N"
				    "if I/O Communication is faulted and is configured as a Shed condition.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIC(Nrdy_CfgErr) ,XIC(Sts_OoS) OTE(Nrdy_OoS) ,[XIO(Inp_IntlkOK) XIO(Sts_BypActive) ,XIO(Inp_NBIntlkOK) ] [[ONS(Wrk_IntlkTripONS) XIC(Cfg_ShedHold) ,XIO(Cfg_ShedHold) NEQ(Wrk_CVSet,Cfg_IntlkCV) ] OTE(Sts_IntlkTrip) ,OTE(Nrdy_Intlk) ] ,XIC(Inp_IOFault) XIO(Inp_Sim) OTE(Sts_IOFault) XIC(Cfg_ShedOnIOFault) OTL(Nrdy_IOFault) ,XIC(Nrdy_IOFault) ]OTE(Sts_NotRdy);
				RC: "The device is AVAILABLE to be controlled by other objects$N"
				    "if it IS in Program Mode and it IS NOT $QNot Ready$Q.$N"
				    "#####  V4.10.00  2019-03-08:  Changed availability to use input availability from interlocks.  #####";
				N: XIC(Sts_Prog)XIO(Nrdy_CfgErr)XIO(Nrdy_OoS)XIO(Nrdy_IOFault)[[XIC(Inp_IntlkOK) ,XIC(Sts_BypActive) ] XIC(Inp_NBIntlkOK) ,XIC(Inp_IntlkAvail) ]OTE(Sts_Available);
				RC: "Ready to receive a new OSet_CV if tracking is NOT enabled,$N"
				    "or we$'re in Operator or Maintenance Command Source, or,$N"
				    "if we$'re in Hand or Ovrd, tracking is NOT configured for Ovrd and Hand.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Aligned ready bit naming with command bit names.  #####";
				N: [XIO(Cfg_SetTrack) ,XIC(Sts_Oper) ,XIC(Sts_Maint) ,[XIC(Sts_Hand) ,XIC(Sts_Ovrd) ] XIO(Cfg_SetTrackOvrdHand) ]OTE(ORdy_CV);
				RC: "============================================================$N"
				    "ANALOG OUTPUT HANDLING$N"
				    "============================================================$N"
				    "Clear flags for capturing exception conditions.";
				N: OTU(Wrk_ShedHold)OTU(Wrk_ShedIntlkCV);
				RC: "If Interlocks are not OK (non-bypassable always checked, bypassable checked if not bypassed$N"
				    "(bypassables not checked in Maintenance Command Source, or in Override Command Source$N"
				    " if Override ignores bypassable interlocks...),$N"
				    "or if there is an I/O Fault, either HOLD the CV or SHED it to the configured Interlock CV,$N"
				    "depending on the state of the Shed/Hold configuration.$N"
				    "$N"
				    "We don$'t want the Interlock Trip alarm occuring if Hand or Disabled is going to win down below....$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIC(Nrdy_Intlk) ,XIC(Nrdy_IOFault) XIO(Sts_Maint) ]XIO(Sts_Hand)XIO(Sts_OoS)XIO(Nrdy_CfgErr)[XIO(Cfg_ShedHold) OTL(Wrk_ShedIntlkCV) MOV(Cfg_IntlkCV,Wrk_CV) ,XIC(Cfg_ShedHold) OTL(Wrk_ShedHold) MOV(Wrk_CVSet,Wrk_CV) ];
				RC: "In HAND, set the CV (in EU) to match the tieback (in Raw units)  from the downstream block.";
				N: XIC(Sts_Hand)CPT(Wrk_CV,(Inp_Tieback-Cfg_CVRawMin)*(Cfg_CVEUMax-Cfg_CVEUMin)/(Cfg_CVRawMax-Cfg_CVRawMin)+Cfg_CVEUMin);
				RC: "If the Analog Output is Out of Service, set the CV to the configured Interlock ($Qsafe$Q) CV.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIC(Nrdy_CfgErr) ,XIC(Sts_OoS) ]OTL(Wrk_ShedIntlkCV)MOV(Cfg_IntlkCV,Wrk_CV);
				RC: "After all that selecting, copy the final result to a holding register.  (We needed it above to do$N"
				    "the HOLD function on Interlock!)$N"
				    "$N"
				    "This is where the CV will be when ramping (if any) is done.";
				N: MOV(Wrk_CV,Wrk_CVSet);
				RC: "This rung determines whether the selected Analog Output CV is +/- Infinity or +/- NotANumber.$N"
				    "In either case, the value cannot be passed into the rate limiter calculation or to the final output.$N"
				    "Instead, perform the designated SHED action: hold last output or shed to the Interlock CV.";
				N: COP(Wrk_CVSet,Wrk_SelCVDINT,1)MEQ(Wrk_SelCVDINT,16#7F80_0000,16#7F80_0000)[XIO(Cfg_ShedHold) OTL(Wrk_ShedIntlkCV) MOV(Cfg_IntlkCV,Wrk_CVSet) ,XIC(Cfg_ShedHold) OTL(Wrk_ShedHold) MOV(Wrk_CVOut,Wrk_CVSet) ];
				RC: "In preparation for rate limiting the CV, this rung$N"
				    "determines the time since the previous scan, using a non-stop TON timer.$N"
				    "When we get here, we read the accumulator (in milliseconds, so$N"
				    "divide by 1000.0 to get seconds), then clear the accumulator.  Next scan the accumulator will have$N"
				    "incremented up to the number of milliseconds since last scan.  (Works for scan times up to 2 million seconds.....)";
				N: MOV(2147483647,Wrk_ScanT.PRE)TON(Wrk_ScanT,?,?)DIV(Wrk_ScanT.ACC,1000.0,Wrk_ScanTime)CLR(Wrk_ScanT.ACC);
				RC: "Under these conditions, SKIP the output ramping:$N"
				    "$N"
				    "* The AOut is disabled$N"
				    "* The AOut is in Hand$N"
				    "* Rate of Change Skip is configures TRUE and, either, the Command Source is Maintenance,$N"
				    "the Command Source is Override, or an Interlock holds us out.$N"
				    "* The entered CV Rate of Change Limits are ZERO.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####$N"
				    "#####  Corrected CV Rate of Change Limiting when one direction is unlimited.  #####";
				N: [XIC(Nrdy_CfgErr) ,XIC(Sts_OoS) ,XIC(Sts_Hand) ,XIC(Cfg_SkipRoCLim) [XIC(Sts_Maint) ,XIC(Sts_Ovrd) ,XIC(Nrdy_Intlk) ] ,GRT(Wrk_CVSet,Wrk_CVOut) EQU(Cfg_CVRoCLimInc,0.0) ,LES(Wrk_CVSet,Wrk_CVOut) EQU(Cfg_CVRoCLimDec,0.0) ]OTE(Sts_SkipRoCLim)MOV(Wrk_CVSet,Wrk_CVOut);
				RC: "If the conditions above are NOT TRUE, do the rate limiting:$N"
				    "$N"
				    "If the time since the previous scan is not ZERO:$N"
				    "$N"
				    "* Calculate the amount to step this scan toward the final CV$N"
				    "* If we$'re within a single setp (or the direction we need to go is unlimited), go to the final CV$N"
				    "* If we$'re not within a single step, step one step closer (up or down, whichever way we need to go)$N"
				    "and show the $QRamping$Q status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####";
				N: XIO(Sts_SkipRoCLim)NEQ(Wrk_CVSet,Wrk_CVOut)NEQ(Wrk_ScanTime,0.0)[MUL(Cfg_CVRoCLimInc,Wrk_ScanTime,Wrk_StepInc) MUL(Cfg_CVRoCLimDec,Wrk_ScanTime,Wrk_StepDec) ,GRT(Wrk_CVSet,Wrk_CVOut) CMP(Wrk_CVOut>=(Wrk_CVSet-Wrk_StepInc)) MOV(Wrk_CVSet,Wrk_CVOut) ,LES(Wrk_CVSet,Wrk_CVOut) CMP(Wrk_CVOut<=(Wrk_CVSet+Wrk_StepDec)) MOV(Wrk_CVSet,Wrk_CVOut) ,[CMP(Wrk_CVOut>(Wrk_CVSet+Wrk_StepDec)) SUB(Wrk_CVOut,Wrk_StepDec,Wrk_CVOut) ,CMP(Wrk_CVOut<=(Wrk_CVSet-Wrk_StepInc)) ADD(Wrk_CVOut,Wrk_StepInc,Wrk_CVOut) ] OTE(Sts_Ramping) ];
				RC: "============================================================$N"
				    "OUTPUT GENERATION$N"
				    "============================================================$N"
				    "This rung generates the instruction Output$N"
				    "$N"
				    "If not in simulation, scale the generated Wrk_CVOut to Raw Units in Out_CV$N"
				    "If in Simulation, set Out_CV to zero.";
				N: [XIO(Inp_Sim) [XIO(Err_EU) XIO(Err_Raw) CPT(Out_CV,(Wrk_CVOut-Cfg_CVEUMin)*(Cfg_CVRawMax-Cfg_CVRawMin)/(Cfg_CVEUMax-Cfg_CVEUMin)+Cfg_CVRawMin) ,[XIC(Err_EU) ,XIC(Err_Raw) ] OTL(Wrk_ShedIntlkCV) MOV(Cfg_IntlkCV,Out_CV) ] ,XIC(Inp_Sim) CLR(Out_CV) ];
				RC: "============================================================$N"
				    "VALUES PROCESSING$N"
				    "============================================================$N"
				    "Val_CVSet (commanded output)$N"
				    "$N"
				    "Based on Command Source and Tracking settings, copy the working CV setting$N"
				    "back into the Operator and Program Settings.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added External Command Source and Commands/Settings.  #####";
				N: [MOV(Wrk_CVSet,Val_CVSet) MOV(Wrk_CVOut,Val_CVOut) ,XIC(Cfg_SetTrack) [XIO(Sts_Ovrd) XIO(Sts_Hand) ,XIC(Cfg_SetTrackOvrdHand) ] MOV(Val_CVSet,PSet_CV) MOV(Val_CVSet,XSet_CV) MOV(Val_CVSet,OSet_CV) ];
				RC: "If the Output CV (in CV Engineering Units, Val_CVOut) is above the$N"
				    "configured maximum $Qinactive$Q CV, show the analog output graphic symbol$N"
				    "on the HMI as $Qactive$Q (e.g., valve open).";
				N: GRT(Val_CVOut,Cfg_MaxInactiveCV)OTE(Sts_Active);
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "The various alarms are ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: OTL(IntlkTrip.PCfg_AllowExist)OTL(IOFault.PCfg_AllowExist);
				RC: "Let the Alarm instance know if this object is taken Out of Service$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Now using P_CmdSrc, including Out of Service.  #####";
				N: XIC(CmdSrc.Sts_OoS)OTE(IntlkTrip.Inp_OoS)OTE(IOFault.Inp_OoS);
				RC: "Handle Interlock Trip Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IntlkTrip);
				RC: "Handle I/O Fault Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IOFault);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q box on the graphic symbol).";
				N: [XIC(IntlkTrip.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Crossed CV Limits$N"
				    "Bad Engineering Units Scaling configs (Max = Min)$N"
				    "Bad Raw Scaling configs (Max = Min)$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.";
				N: [XIC(Nrdy_CfgErr) ,[XIC(IntlkTrip.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "This rung generates the enumerated Device Status:$N"
				    "0 = At Target$N"
				    "1 = Ramping Down$N"
				    "2 = Ramping Up$N"
				    "3 = Clamped at CVMin$N"
				    "4 = Clamped at CVMax$N"
				    "$N"
				    "32 = I/O Fault$N"
				    "34 = Configuration Error$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [CLR(Wrk_Sts) CLR(Wrk_Fault) ,XIC(Sts_Ramping) [GRT(Wrk_CVOut,Wrk_CVSet) MOV(1,Wrk_Sts) ,LES(Wrk_CVOut,Wrk_CVSet) MOV(2,Wrk_Sts) ] ,XIC(Sts_Clamped) [EQU(Wrk_CVOut,Cfg_MinCV) MOV(3,Wrk_Sts) ,EQU(Wrk_CVOut,Cfg_MaxCV) MOV(4,Wrk_Sts) ] ,[XIC(Sts_IOFault) ,XIC(Nrdy_IOFault) ] MOV(32,Wrk_Fault) ,XIC(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Sts,Val_Sts) MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [CLR(Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(SrcQ_IO,Wrk_SrcQ) ,XIC(Wrk_ShedHold) MOV(19,Wrk_SrcQ) ,XIC(Wrk_ShedIntlkCV) MOV(20,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ) ];
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for reset or ack required:$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count.  #####$N"
				    "";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) ,GRT(IntlkTrip.Val_Notify,Wrk_Notify) MOV(IntlkTrip.Val_Notify,Wrk_Notify) ,GRT(IOFault.Val_Notify,Wrk_Notify) MOV(IOFault.Val_Notify,Wrk_Notify) ,[XIC(IntlkTrip.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IOFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTE(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_Notify,Val_NotifyAll) MOV(Wrk_UnackAlmC,Val_UnackAlmC) ];
				RC: "This rung identifies:$N"
				    "* if any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(IntlkTrip.Sts_RdyAck) ,XIC(IOFault.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(IntlkTrip.Sts_RdyReset) ,XIC(IOFault.Sts_RdyReset) ,XIC(Nrdy_IOFault) XIO(Sts_IOFault) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear Ownership. clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, set the Ownership to NO OWNER (0).";
				N: CLR(PSet_Owner)CLR(Val_Owner);
				RC: "$QLurking$Q Operator Commands are cleared, as well as a Program Reset.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  Added External Command Source and Commands/Settings.  #####";
				N: [OTU(MCmd_Bypass) OTU(MCmd_Check) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  OSet_s and PSet_s for Rate of Change Limits replaced with Configs (Cfg_s).  #####$N"
				    "#####  Aligned ready bit naming with command bit names.  #####";
				N: [OTU(MRdy_Bypass) OTU(MRdy_Check) ,OTU(ORdy_Reset) OTU(ORdy_ResetAckAll) OTU(ORdy_CV) ];
				RC: "Clear latched Shed (Not Ready) bits.";
				N: OTU(Nrdy_IOFault);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_DIn (Description := "Discrete Input",
	                                     Revision := "4.10",
	                                     RevisionExtension := ".00 Release",
	                                     RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                     Vendor := "Rockwell Automation",
	                                     ExecutePrescan := Yes,
	                                     ExecutePostscan := No,
	                                     ExecuteEnableInFalse := Yes,
	                                     CreatedDate := "2004-09-26T01:40:40.210Z",
	                                     CreatedBy := "Not Available",
	                                     EditedDate := "2020-12-08T03:30:26.474Z",
	                                     EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                     SoftwareRevision := "v32.02",
	                                     AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis instruction monitors a discrete (1 / 0) input and checks for alarm conditions.$N$NThe Inp_Gate input must be set (=1, its default value) and the alarm enabled for$Nthe Target Disagree alarm to occur.  This alarm will not occur until the Inp_Gate$Ninput has been set for the Gate Delay (Cfg_GateDly) time.  The Gate is used to$Nenable the alarm when some other condition is true; for example, a high vibration$Nswitch should only generate a Target Disagree alarm when the associated motor$Nhas been running long enough to stabilize.$N$NThe Target Disagree alarm is generated when the Inp_PV (process variable)$Ninput is different from the Inp_Target (target) input.  The Target indicates the$N$Qnormal$Q condition.  For example, a flow switch should indicate flow when a$Npump is running and should not indicate flow when a pump is stopped.  The$Npump run status is used as the Target input, and when the switch does not$Nmatch the target (within the allotted time), the Target Disagree Alarm (e.g.,$NFlow Switch Failure) is generated.$N$NNOTE: the Inp_PV is inverted when the rung condition is false -- this allows the$Ninput to be a condition on the rung with P_DIn rather than mapped into Inp_PV.$NSee P_DIn reference manual for details.$N$NThis instruction includes a substitute PV capability for a manually-entered state.$NThis may be useful when a sensor is out for repair or for simulation and testing.$N$NAlarms are provided by P_Alarm AOI instances.$NTarget Disagree Status gating provided by a P_Gate AOI instance.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-01)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added notify and unack count rollup for Channel object.$N* Added I/O Fault alarm.$N* Deleted Cfg_PCmdClear.  All Program Commands are now self-clearing.$N* Aligned ready bit naming with command bit names.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N* Changed delay time configuration items to REAL seconds.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_PV : BOOL (Description := "Input Signal (process variable) from Sensor",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 1);
			Inp_IOFault : BOOL (Description := "Input Comm Status or Quality 1=Bad, 0=OK",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Inp_PVNotify : DINT (Description := "Related PV object alarm prio and ack status (enum)",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Inp_Target : BOOL (Description := "Target State of Input (Disagree Status if not in Target State)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 1);
			Inp_Gate OF TgtDisagreeGate.Inp_Gate (Description := "Gate Condition (=1 to enable Disagree Status)",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes);
			Inp_Sim : BOOL (Description := "1=Use simulated PV (Set_SimPV); 0=Use Input (Inp_PV)",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Inp_Reset : BOOL (Description := "1=Reset Alarm requiring reset",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_NoSubstPV : BOOL (Description := "1=Disallow selection of Substitute PV",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_NormTextVis : BOOL (Description := "1=Display state text in $Qnormal$Q state (= target), 0=hide (some HMI objects)",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 1);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasTgtDisagreeAlm OF TgtDisagree.Cfg_Exists (Description := "1=Target Disagree Alarm exists and will be checked",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_TgtDisagreeResetReqd OF TgtDisagree.Cfg_ResetReqd (Description := "1=Target Disagree Alarm is latched in, requires Reset Command to clear",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			Cfg_TgtDisagreeAckReqd OF TgtDisagree.Cfg_AckReqd (Description := "1=Target Disagree Alarm must be acknowledged",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_HasIOFaultAlm OF IOFault.Cfg_Exists (Description := "1=Target Disagree Alarm exists and will be checked",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_IOFaultResetReqd OF IOFault.Cfg_ResetReqd (Description := "1=Target Disagree Alarm is latched in, requires Reset Command to clear",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_IOFaultAckReqd OF IOFault.Cfg_AckReqd (Description := "1=Target Disagree Alarm must be acknowledged",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_TgtDisagreeSeverity OF TgtDisagree.Cfg_Severity (Description := "Target Disagree Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			Cfg_IOFaultSeverity OF IOFault.Cfg_Severity (Description := "Target Disagree Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_Debounce : REAL (Description := "Minimum time Input Sts must maintain state (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			Cfg_GateDly OF TgtDisagreeGate.Cfg_GateDly (Description := "Time Inp_Gate must be true before Disagree Status is checked (sec)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No);
			Cfg_TgtDisagreeOnDly OF TgtDisagreeGate.Cfg_OnDly (Description := "Minimum time for Input to disagree with Target to raise Status (sec)",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No);
			Cfg_TgtDisagreeOffDly OF TgtDisagreeGate.Cfg_OffDly (Description := "Minimum time for Input to agree with Target to clear Status (sec)",
			                                 Usage := Input,
			                                 RADIX := Float,
			                                 Required := No,
			                                 Visible := No);
			Set_SimPV : BOOL (Description := "PV used in Simulation (Inp_Sim=1)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			PCmd_Reset : BOOL (Description := "Program Command to Reset all latched Alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_TgtDisagreeAck OF TgtDisagree.PCmd_Ack (Description := "Program Command to Acknowledge the Target Disagree Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_TgtDisagreeSuppress OF TgtDisagree.PCmd_Suppress (Description := "Program Command to Suppress the Target Disagree Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_TgtDisagreeUnsuppress OF TgtDisagree.PCmd_Unsuppress (Description := "Program Command to Unsuppress the Target Disagree Alarm",
			                                      Usage := Input,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No);
			PCmd_TgtDisagreeUnshelve OF TgtDisagree.PCmd_Unshelve (Description := "Program Command to Unshelve the Target Disagree Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_IOFaultAck OF IOFault.PCmd_Ack (Description := "Program Command to Acknowledge the I/O Fault Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_IOFaultSuppress OF IOFault.PCmd_Suppress (Description := "Program Command to Suppress the I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_IOFaultUnsuppress OF IOFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress the I/O Fault Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultUnshelve OF IOFault.PCmd_Unshelve (Description := "Program Command to Unshelve the I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			SrcQ_IO : DINT (Description := "Source and Quality of primary I/O (enumeration)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			SrcQ : DINT (Description := "Source and Quality of primary Val/Sts (enumeration)",
			                Usage := Output,
			                RADIX := Decimal,
			                Required := No,
			                Visible := No,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
			Val_Sts : DINT (Description := "Device Confirmed Sts 0=PV Good, 6=PV Bad, 7=Substitute PV",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fault : DINT (Description := "Device Fault Status 0=none, 16=Tgt Disagree, 32=I/O comms., 34=CfgErr",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : DINT (Description := "Current Alarm Level and Acknowledgement (enumeration)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : DINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts : BOOL (Description := "Discrete Input Status (incl. Debounce, Manual Override, if used)",
			               Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			Sts_PV : BOOL (Description := "Discrete Input Status (actual, not subject to Override)",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			Sts_SubstPV : BOOL (Description := "1=Using Substitute PV (Input being overridden)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_InpPV : BOOL (Description := "1=Using Input PV (normal)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_PVBad : BOOL (Description := "Input Comm Status/ Quality (0=OK, 1=Bad)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=Device has a Maintenance Bypass function active",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=One or more Alarms Shelved, Disabled or Suppressed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: Invalid Timer Preset (use 0 to 2147483)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time, Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_TgtDisagreeCmp OF TgtDisagreeGate.Inp (Description := "Input vs. Target comparicon result 1=Disagree",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_TgtDisagreeGate OF TgtDisagreeGate.Sts_Gate (Description := "Target Disagree Gate Delay Status, 1=done",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read Only);
			Sts_TgtDisagree OF TgtDisagree.Inp (Description := "1=Input is not in Target state",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read/Write);
			Alm_TgtDisagree OF TgtDisagree.Alm (Description := "1=Alarm: Input is not in Target state",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Ack_TgtDisagree OF TgtDisagree.Ack (Description := "1=Target Disagree Alarm has been acknowledged",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Sts_TgtDisagreeDisabled OF TgtDisagree.Disabled (Description := "1=Target Disagree Alarm has been Disabled by Maintenance",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_TgtDisagreeShelved OF TgtDisagree.Shelved (Description := "1=Target Disagree Alarm has been Shelved by Operator",
			                                  Usage := Output,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read/Write);
			Sts_TgtDisagreeSuppressed OF TgtDisagree.Suppressed (Description := "1=Target Disagree Alarm has been Suppressed by Program",
			                                     Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No,
			                                     ExternalAccess := Read/Write);
			Sts_IOFault OF IOFault.Inp (Description := "1=Input communication fault (Inp_IOFault = 1)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Alm_IOFault OF IOFault.Alm (Description := "1=Alarm: Input communication fault",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Ack_IOFault OF IOFault.Ack (Description := "1=I/O Fault Alarm has been acknowledged",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_IOFaultDisabled OF IOFault.Disabled (Description := "1=I/O Fault Alarm has been Disabled by Maintenance",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_IOFaultShelved OF IOFault.Shelved (Description := "1=I/O Fault Alarm has been Shelved by Operator",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_IOFaultSuppressed OF IOFault.Suppressed (Description := "1=I/O Fault Alarm has been Suppressed by Program",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			P_DIn : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := No,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[14,'Discrete Input$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[14,'Discrete Input$00$00$00$00$00$00']");
			Wrk_Status : BOOL (Description := "Internal Status (after Manual Override selection)",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			TgtDisagree : P_Alarm (Description := "Target Disagree Alarm",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[961,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Target Disagree$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Wrk_FallT : TIMER (Description := "Timer to ensure Status LOW time on falling edge",
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0]");
			Wrk_RiseT : TIMER (Description := "Timer to ensure Status HIGH time on rising edge",
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0]");
			Wrk_SubstPV : BOOL (Description := "Internal flag: Using Substitute PV",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Cfg_1StText : STRING_8 (Description := "Text to display in PV=1 State",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[2,'On$00$00$00$00$00$00']");
			Cfg_0StText : STRING_8 (Description := "Text to display in PV=0 State",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[3,'Off$00$00$00$00$00']");
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_Fault : DINT (Description := "Buffer for building Val_Fault",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_Sts : DINT (Description := "Buffer for building Val_Sts",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_SrcQ : DINT (Description := "Register for building Source / Quality enumeration",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			HMI_Type : STRING_16 (Description := "Must contain AOI name, used for HMI and Information S/W",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00']");
			TgtDisagreeGate : P_Gate (Description := "Target Disagree Condition Gate/Delay",
			                          ExternalAccess := Read/Write,
			                          DefaultData := "[9,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],[0,0,0],[0,0,0],[15,'Target Disagree$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0]");
			Val_Notify : DINT (Description := "Highest Alarm prio and ack status this object only (enum)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Wrk_Notify : DINT (Description := "Buffer for building Val_Notify",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			Wrk_UnackAlmC : DINT (Description := "Buffer for building Val_UnackAlmC",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			IOFault : P_Alarm (Description := "I/O Fault Alarm",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[961,1000,480,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Alarm Condition$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			OCmd_ResetAckAll : BOOL (Description := "Operator Command to Reset and Acknowledge all Alarms",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Operator Command to Reset all latched Alarms",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_InpPV : BOOL (Description := "Maintenance Command to use Input PV (normal)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_SubstPV : BOOL (Description := "Maintenance Command to use Substitute PV (override input)",
			                       RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			ORdy_ResetAckAll : BOOL (Description := "1=Ready for OCmd_ResetAckAll (enables HMI button)",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_InpPV : BOOL (Description := "1=Ready for MCmd_InpPV (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_SubstPV : BOOL (Description := "1=Ready for MCmd_SubstPV (enables HMI button)",
			                       RADIX := Decimal,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			MSet_SubstPV : BOOL (Description := "Maintenance-Entered Substitute PV",
			                       RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			Wrk_ErrDebounce : BOOL (Description := "Error in Debounce Timer configuration",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Same as main Logic routine, except Inp is inverted (for use in LD logic)")
				RC: "============================================================$N"
				    "ENABLE_IN_FALSE ROUTINE$N"
				    "============================================================$N"
				    "This logic is identical to the main LOGIC Routine, except that the$N"
				    "Inp_PV signal is inverted (Rung 6).  This is to support Ladder Diagram$N"
				    "instances of the form:    XIC (discrete input)   P_DIn (P_DIn Tag)$N"
				    "============================================================$N"
				    "POWERUP / INVALID STATE HANDLING$N"
				    "============================================================$N"
				    "All internal Work (state) bits maintain states through a power cycle and are$N"
				    "independent.  No Powerup / Invalid State Handling logic is required.$N"
				    "============================================================$N"
				    "COMMAND PROCESSING$N"
				    "============================================================$N"
				    "These rungs handle received Commands:$N"
				    "$N"
				    "NOTE:  Operator Commands for P_Alarm are sent directly to the contained AOI.$N"
				    "$N"
				    "MCmd_SubstPV: Maintenance Command to select Maintenance-entered substitute PV$N"
				    "$N"
				    "Do not allow this Command if Cfg_NoSubstPV is set.";
				N: XIC(MCmd_SubstPV)OTU(MCmd_SubstPV)XIO(Cfg_NoSubstPV)OTL(Wrk_SubstPV);
				RC: "MCmd_InpPV: Maintenance Command to cancel Substitute PV and return to Live Input PV.";
				N: [XIC(MCmd_InpPV) OTU(MCmd_InpPV) ,XIC(Cfg_NoSubstPV) ]OTU(Wrk_SubstPV);
				RC: "Show the Substitute / Input PV Status, and if Substitute PV$N"
				    "is selected, show the Maintenance Bypass breadcrumb.";
				N: [XIC(Wrk_SubstPV) OTE(Sts_SubstPV) ,XIO(Wrk_SubstPV) OTE(Sts_InpPV) ,XIC(Sts_SubstPV) OTE(Sts_MaintByp) ];
				RC: "Commands for Substitue PV and Input PV are available$N"
				    "based on the current state of the internal toggle bit.";
				N: XIO(Cfg_NoSubstPV)[XIO(Wrk_SubstPV) OTE(MRdy_SubstPV) ,XIC(Wrk_SubstPV) OTE(MRdy_InpPV) ];
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "$N"
				    "These rungs get Configuration data (such as timer presets) and distribute as needed.$N"
				    "Note that some Configuration data are used directly in-place.$N"
				    "$N"
				    "Enter the time (in seconds) the Status must remain in each state (debounce time).$N"
				    "This time is used in a rising-edge debounce timer and a falling-edge debounce timer.$N"
				    "$N"
				    "Enter the time (in seconds) the alarm Gate must be true before alarm detection is activated.$N"
				    "$N"
				    "Enter the On-Delay and Off-Delay times (in seconds) for the Target Disagree Status$N"
				    "(which feeds the Target Disagree Alarm).$N"
				    "$N"
				    "If the timer preset calcuated wraps negative (more than 2.14... million seconds), then establish$N"
				    "a valid limit value for the Preset.  Note that a negative timer preset will fault the controller!!!$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed delay time configuration items to REAL seconds.  #####";
				N: [MUL(Cfg_Debounce,1000.0,Wrk_RiseT.PRE) XIC(Wrk_RiseT.PRE.31) CLR(Wrk_RiseT.PRE) OTE(Wrk_ErrDebounce) ,MOV(Wrk_RiseT.PRE,Wrk_FallT.PRE) ];
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####$N"
				    "#####  V4.00.00  2018-06-25:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(TgtDisagree.PCmd_Ack) ,OTL(IOFault.PCmd_Ack) ] ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ][OTL(TgtDisagree.PCmd_Reset) ,OTL(IOFault.PCmd_Reset) ];
				RC: "============================================================$N"
				    "DISCRETE INPUT PROCESSING$N"
				    "============================================================$N"
				    "$N"
				    "Sts_PVBad:  If the I/O communication / data quality is OK,$N"
				    "or in Simulation or substituted, show NO Bad PV Status.$N"
				    "$N"
				    "If the I/O communication is faulted or data quality is BAD and we$'re NOT$N"
				    "in Simulation or using substitute PV, show the Bad PV Status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: XIC(Inp_IOFault)XIO(Inp_Sim)OTE(Sts_IOFault)OTE(Sts_PVBad);
				RC: "The Process Variable Status (Sts_PV) bit shows the state of the selected input,$N"
				    "regardless of the settings of Mode.$N"
				    "$N"
				    "@@@@@  NOTE:  Inp_PV is INVERTED when this instruction is scanned false!!!  @@@@@";
				N: [XIO(Inp_Sim) XIO(Inp_PV) ,XIC(Inp_Sim) XIC(Set_SimPV) ]OTE(Sts_PV);
				RC: "The Simulated PV Setting tracks the selected PV for bumpless transfer into Simulation.$N"
				    "$N"
				    "NOTE:  Tracking must be done with latch/unlatch instructions to keep the $N"
				    "Set_SimPV setting retentive through a power cycle.$N"
				    "In order to avoid overwriting asynchronous inputs, the Set_SimPV bit is only written$N"
				    "when Simulation is NOT selected (live PV is used).";
				N: XIO(Inp_Sim)[XIC(Sts_PV) OTL(Set_SimPV) ,XIO(Sts_PV) OTU(Set_SimPV) ];
				RC: "The Status (Sts) bit shows the state of the selected input (after debounce, below).$N"
				    "This rung selects which PV is used: the input/simulation PV or the substitute PV.$N"
				    "In normal operation, it$'s the state of the Input (Sts_PV).$N"
				    "In Substitute PV, it$'s the state of the entered Substitute PV (Oper or Prog).";
				N: [XIO(Wrk_SubstPV) XIC(Sts_PV) ,XIC(Wrk_SubstPV) XIC(MSet_SubstPV) ]OTE(Wrk_Status);
				RC: "These two rungs debounce the selected PV, ensuring the Status stays in$N"
				    "each state a minimum time, while not delaying the Status on transition after an$N"
				    "extended period of time in the prior state.$N"
				    "$N"
				    "@@@@@  NOTE: Doubled TON/TOF is used to ensure that  @@@@@$N"
				    "@@@@@  .DN bit transitions on same scan if Preset = 0 !  @@@@@";
				N: [XIC(Wrk_Status) XIO(Wrk_FallT.TT) ,XIC(Wrk_RiseT.TT) ]TON(Wrk_RiseT,?,?)TON(Wrk_RiseT,?,?);
				RC: "@@@@@  NOTE: Doubled TON/TOF is used to ensure that  @@@@@$N"
				    "@@@@@  .DN bit transitions on same scan if Preset = 0 !  @@@@@";
				N: [XIO(Wrk_Status) XIO(Wrk_RiseT.TT) ,XIC(Wrk_FallT.TT) ]TON(Wrk_FallT,?,?)TON(Wrk_FallT,?,?);
				RC: "The Rising Edge triggered timer ENABLE bit (sealed in using the Timing bit)$N"
				    "is our debounced input.  Pass it along as the Status.";
				N: XIC(Wrk_RiseT.EN)OTE(Sts);
				RC: "Finally, if we are NOT using the Substitute PV, have it track the$N"
				    "debounced Status for bumpless transfer to Substitute.";
				N: XIO(Wrk_SubstPV)[XIO(Sts) OTU(MSet_SubstPV) ,XIC(Sts) OTL(MSet_SubstPV) ];
				RC: "============================================================$N"
				    "TARGET DISAGREE STATUS GENERATION$N"
				    "============================================================$N"
				    "If the Input is not in the target state, generate a Target$N"
				    "Disagree comparison status.  This status is then gated$N"
				    "(with a gate delay) and has an on-delay and off-delay$N"
				    "before feeding the final Target Disagree status bit.";
				N: [[XIO(Sts) XIC(Inp_Target) ,XIC(Sts) XIO(Inp_Target) ] OTE(Sts_TgtDisagreeCmp) ,P_Gate(TgtDisagreeGate) ,XIC(TgtDisagreeGate.Out) OTE(TgtDisagree.Inp) ];
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "Both alarms are ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####$N"
				    "#####  V4.00.00  2018-06-25:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: OTL(TgtDisagree.PCfg_AllowExist)OTL(IOFault.PCfg_AllowExist);
				RC: "Handle Alarm Processing using the standard P_Alarm AOI";
				N: P_Alarm(TgtDisagree);
				RC: "Handle Alarm Processing using the standard P_Alarm AOI$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: P_Alarm(IOFault);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q box on the graphic symbol).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: [XIC(TgtDisagree.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Bad timer presets are determined in the Configuration logic above.$N"
				    "Bad Alarm configuration is determined by the P_Alarm instruction.$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: [[XIC(Wrk_ErrDebounce) ,XIC(TgtDisagreeGate.Sts_Err) ] OTE(Err_Timer) ,[XIC(TgtDisagree.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "============================================================$N"
				    "ENUMERATED STATUS VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: [MOV(1,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(10,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(SrcQ_IO,Wrk_SrcQ) ,XIC(Sts_SubstPV) MOV(18,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ) ];
				RC: "This rung generates the enumerated Device Status:$N"
				    "0 = Normal (PV Good)$N"
				    "6 = PV Bad$N"
				    "7 = Substitute PV$N"
				    "$N"
				    "And this rung generates the enumerated Device Fault Status:$N"
				    "0 = none$N"
				    "16 = Target Disagree$N"
				    "32 = I/O Comms Fault$N"
				    "34 = Config Error$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: [CLR(Wrk_Sts) CLR(Wrk_Fault) ,XIC(Sts_PVBad) MOV(6,Wrk_Sts) ,XIC(Sts_SubstPV) MOV(7,Wrk_Sts) ,XIC(Sts_TgtDisagree) MOV(16,Wrk_Fault) ,XIC(Sts_IOFault) MOV(32,Wrk_Fault) ,XIC(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Sts,Val_Sts) MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for reset or ack required:$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count.  #####$N"
				    "#####  Added I/O Fault alarm.  #####";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) OTU(Wrk_Notify.0) ,GRT(TgtDisagree.Val_Notify,Wrk_Notify) MOV(TgtDisagree.Val_Notify,Wrk_Notify) ,GRT(IOFault.Val_Notify,Wrk_Notify) MOV(IOFault.Val_Notify,Wrk_Notify) ,[XIC(TgtDisagree.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IOFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTL(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_UnackAlmC,Val_UnackAlmC) MOV(Wrk_Notify,Val_NotifyAll) ];
				RC: "Roll up the notification from the input Channel object.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count including attached PV object.  #####";
				N: [GRT(Inp_PVNotify,Wrk_Notify) MVM(Inp_PVNotify,2#1111_1110,Wrk_Notify) ,XIC(Inp_PVNotify.0) OTL(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_NotifyAll) ];
				RC: "This rung identifies:$N"
				    "* if any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added separate rung for Rdy_ bits, for new I/O Fault alarm.  #####$N"
				    "#####  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(TgtDisagree.Sts_RdyAck) ,XIC(IOFault.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(TgtDisagree.Sts_RdyReset) ,XIC(IOFault.Sts_RdyReset) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Logic (Description := "Normal Scan - status is updated and alarms are generated")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_DIn:  PROCESS -- DISCRETE INPUT$N"
				    "============================================================$N"
				    "Revision 4.10.00 Release  2019-03-08:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, and V3.x Revision History archived.$N"
				    "V4.00.00  2018-06-25:  Added I/O Fault alarm.$N"
				    "Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "Added notify and unack count rollup for Channel object.$N"
				    "Deleted Cfg_PCmdClear.  All Program Commands are now self-clearing.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyAck and Sts_ResetReqd for use by external objects.$N"
				    "Changed delay time configuration items to REAL seconds.$N"
				    "V4.10.00  2019-03-08:  Added Cfg_HasMoreObj.$N"
				    "============================================================$N"
				    "This Instruction monitors a Discrete Input from a flow switch, motor vibration$N"
				    "switch, or any other discrete signal, and provides:$N"
				    "$N"
				    "*  PV Status, with configurable names for the 0- and 1-states$N"
				    "* Input debounce for both the rising and falling transitions of the PV input$N"
				    "* An I/O Fault input.  An I/O Fault Alarm is raised when this input is true$N"
				    "*  A $QTarget$Q input -- the Target Disagree Alarm is raised when the PV input is not in$N"
				    "the same state as the Target for a configurable period of time$N"
				    "*  A Target Disagree $QGate$Q signal (with delay), used to enable the Alarm under$N"
				    "appropriate process conditions$N"
				    "* Commands to inhibit or enable alarms$N"
				    "* Setting of a simulated input signal for process simulation$N"
				    "* Selection of Substitute PV (by Maintenance personnel) or normal PV$N"
				    "$N"
				    "Alarms are provided by P_Alarm AOI instances.$N"
				    "Target Disagree Status gating is provided by a P_Gate AOI instance.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)CONCAT(Cfg_Desc,Cfg_Label,Cfg_Tag)CONCAT(Cfg_0StText,Cfg_1StText,Cfg_Area)LOWER(HMI_Lib,HMI_Type);
				RC: "============================================================$N"
				    "COMMAND PROCESSING$N"
				    "============================================================$N"
				    "These rungs handle received Commands:$N"
				    "$N"
				    "NOTE:  Operator Commands for P_Alarm are sent directly to the contained AOI.$N"
				    "$N"
				    "MCmd_SubstPV: Maintenance Command to select Maintenance-entered substitute PV$N"
				    "$N"
				    "Do not allow this Command if Cfg_NoSubstPV is set.";
				N: LBL(SkipText)XIC(MCmd_SubstPV)OTU(MCmd_SubstPV)XIO(Cfg_NoSubstPV)OTL(Wrk_SubstPV);
				RC: "MCmd_InpPV: Maintenance Command to cancel Substitute PV and return to Live Input PV.";
				N: [XIC(MCmd_InpPV) OTU(MCmd_InpPV) ,XIC(Cfg_NoSubstPV) ]OTU(Wrk_SubstPV);
				RC: "Show the Substitute / Input PV Status, and if Substitute PV$N"
				    "is selected, show the Maintenance Bypass breadcrumb.";
				N: [XIC(Wrk_SubstPV) OTE(Sts_SubstPV) ,XIO(Wrk_SubstPV) OTE(Sts_InpPV) ,XIC(Sts_SubstPV) OTE(Sts_MaintByp) ];
				RC: "Commands for Substitue PV and Input PV are available$N"
				    "based on the current state of the internal toggle bit.";
				N: XIO(Cfg_NoSubstPV)[XIO(Wrk_SubstPV) OTE(MRdy_SubstPV) ,XIC(Wrk_SubstPV) OTE(MRdy_InpPV) ];
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "$N"
				    "These rungs get Configuration data (such as timer presets) and distribute as needed.$N"
				    "Note that some Configuration data are used directly in-place.$N"
				    "$N"
				    "Enter the time (in seconds) the Status must remain in each state (debounce time).$N"
				    "This time is used in a rising-edge debounce timer and a falling-edge debounce timer.$N"
				    "$N"
				    "Enter the time (in seconds) the alarm Gate must be true before alarm detection is activated.$N"
				    "$N"
				    "Enter the On-Delay and Off-Delay times (in seconds) for the Target Disagree Status$N"
				    "(which feeds the Target Disagree Alarm).$N"
				    "$N"
				    "If the timer preset calcuated wraps negative (more than 2.14... million seconds), then establish$N"
				    "a valid limit value for the Preset.  Note that a negative timer preset will fault the controller!!!$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Changed delay time configuration items to REAL seconds.  #####";
				N: [MUL(Cfg_Debounce,1000.0,Wrk_RiseT.PRE) XIC(Wrk_RiseT.PRE.31) CLR(Wrk_RiseT.PRE) OTE(Wrk_ErrDebounce) ,MOV(Wrk_RiseT.PRE,Wrk_FallT.PRE) ];
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####$N"
				    "#####  V4.00.00  2018-06-25:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(TgtDisagree.PCmd_Ack) ,OTL(IOFault.PCmd_Ack) ] ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ][OTL(TgtDisagree.PCmd_Reset) ,OTL(IOFault.PCmd_Reset) ];
				RC: "============================================================$N"
				    "DISCRETE INPUT PROCESSING$N"
				    "============================================================$N"
				    "$N"
				    "Sts_PVBad:  If the I/O communication / data quality is OK,$N"
				    "or in Simulation or substituted, show NO Bad PV Status.$N"
				    "$N"
				    "If the I/O communication is faulted or data quality is BAD and we$'re NOT$N"
				    "in Simulation or using substitute PV, show the Bad PV Status.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: XIC(Inp_IOFault)XIO(Inp_Sim)OTE(Sts_IOFault)OTE(Sts_PVBad);
				RC: "The Process Variable Status (Sts_PV) bit shows the state of the selected input,$N"
				    "regardless of the settings of Mode.";
				N: [XIO(Inp_Sim) XIC(Inp_PV) ,XIC(Inp_Sim) XIC(Set_SimPV) ]OTE(Sts_PV);
				RC: "The Simulated PV Setting tracks the selected PV for bumpless transfer into Simulation.$N"
				    "$N"
				    "NOTE:  Tracking must be done with latch/unlatch instructions to keep the $N"
				    "Set_SimPV setting retentive through a power cycle.$N"
				    "In order to avoid overwriting asynchronous inputs, the Set_SimPV bit is only written$N"
				    "when Simulation is NOT selected (live PV is used).";
				N: XIO(Inp_Sim)[XIC(Sts_PV) OTL(Set_SimPV) ,XIO(Sts_PV) OTU(Set_SimPV) ];
				RC: "The Status (Sts) bit shows the state of the selected input (after debounce, below).$N"
				    "This rung selects which PV is used: the input/simulation PV or the substitute PV.$N"
				    "In normal operation, it$'s the state of the Input (Sts_PV).$N"
				    "In Substitute PV, it$'s the state of the entered Substitute PV (Oper or Prog).";
				N: [XIO(Wrk_SubstPV) XIC(Sts_PV) ,XIC(Wrk_SubstPV) XIC(MSet_SubstPV) ]OTE(Wrk_Status);
				RC: "These two rungs debounce the selected PV, ensuring the Status stays in$N"
				    "each state a minimum time, while not delaying the Status on transition after an$N"
				    "extended period of time in the prior state.$N"
				    "$N"
				    "@@@@@  NOTE: Doubled TON/TOF is used to ensure that  @@@@@$N"
				    "@@@@@  .DN bit transitions on same scan if Preset = 0 !  @@@@@";
				N: [XIC(Wrk_Status) XIO(Wrk_FallT.TT) ,XIC(Wrk_RiseT.TT) ]TON(Wrk_RiseT,?,?)TON(Wrk_RiseT,?,?);
				RC: "@@@@@  NOTE: Doubled TON/TOF is used to ensure that  @@@@@$N"
				    "@@@@@  .DN bit transitions on same scan if Preset = 0 !  @@@@@";
				N: [XIO(Wrk_Status) XIO(Wrk_RiseT.TT) ,XIC(Wrk_FallT.TT) ]TON(Wrk_FallT,?,?)TON(Wrk_FallT,?,?);
				RC: "The Rising Edge triggered timer ENABLE bit (sealed in using the Timing bit)$N"
				    "is our debounced input.  Pass it along as the Status.";
				N: XIC(Wrk_RiseT.EN)OTE(Sts);
				RC: "Finally, if we are NOT using the Substitute PV, have it track the$N"
				    "debounced Status for bumpless transfer to Substitute.";
				N: XIO(Wrk_SubstPV)[XIO(Sts) OTU(MSet_SubstPV) ,XIC(Sts) OTL(MSet_SubstPV) ];
				RC: "============================================================$N"
				    "TARGET DISAGREE STATUS GENERATION$N"
				    "============================================================$N"
				    "If the Input is not in the target state, generate a Target$N"
				    "Disagree comparison status.  This status is then gated$N"
				    "(with a gate delay) and has an on-delay and off-delay$N"
				    "before feeding the final Target Disagree status bit.";
				N: [[XIO(Sts) XIC(Inp_Target) ,XIC(Sts) XIO(Inp_Target) ] OTE(Sts_TgtDisagreeCmp) ,P_Gate(TgtDisagreeGate) ,XIC(TgtDisagreeGate.Out) OTE(TgtDisagree.Inp) ];
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "The alarm is ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####$N"
				    "#####  V4.00.00  2018-06-25:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: OTL(TgtDisagree.PCfg_AllowExist)OTL(IOFault.PCfg_AllowExist);
				RC: "Handle Alarm Processing using the standard P_Alarm AOI";
				N: P_Alarm(TgtDisagree);
				RC: "Handle Alarm Processing using the standard P_Alarm AOI$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: P_Alarm(IOFault);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q box on the graphic symbol).$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: [XIC(TgtDisagree.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "This rung handles the reports of all Bad Configuration Status.$N"
				    "Individual bits are provided for various status:$N"
				    "Bad timer presets are determined in the Configuration logic above.$N"
				    "Bad Alarm configuration is determined by the P_Alarm instruction.$N"
				    "$N"
				    "Then a summary Bad Config status is provided, simply an OR of the individual bits.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: [[XIC(Wrk_ErrDebounce) ,XIC(TgtDisagreeGate.Sts_Err) ] OTE(Err_Timer) ,[XIC(TgtDisagree.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "============================================================$N"
				    "ENUMERATED STATUS VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: [MOV(1,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(10,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(SrcQ_IO,Wrk_SrcQ) ,XIC(Sts_SubstPV) MOV(18,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ) ];
				RC: "This rung generates the enumerated Device Status:$N"
				    "0 = Normal (PV Good)$N"
				    "6 = PV Bad$N"
				    "7 = Substitute PV$N"
				    "$N"
				    "And this rung generates the enumerated Device Fault Status:$N"
				    "0 = none$N"
				    "16 = Target Disagree$N"
				    "32 = I/O Comms Fault$N"
				    "34 = Config Error$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added I/O Fault alarm.  #####";
				N: [CLR(Wrk_Sts) CLR(Wrk_Fault) ,XIC(Sts_PVBad) MOV(6,Wrk_Sts) ,XIC(Sts_SubstPV) MOV(7,Wrk_Sts) ,XIC(Sts_TgtDisagree) MOV(16,Wrk_Fault) ,XIC(Sts_IOFault) MOV(32,Wrk_Fault) ,XIC(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Sts,Val_Sts) MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for reset or ack required:$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count.  #####$N"
				    "#####  Added I/O Fault alarm.  #####";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) OTU(Wrk_Notify.0) ,GRT(TgtDisagree.Val_Notify,Wrk_Notify) MOV(TgtDisagree.Val_Notify,Wrk_Notify) ,GRT(IOFault.Val_Notify,Wrk_Notify) MOV(IOFault.Val_Notify,Wrk_Notify) ,[XIC(TgtDisagree.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IOFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTL(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_UnackAlmC,Val_UnackAlmC) MOV(Wrk_Notify,Val_NotifyAll) ];
				RC: "Roll up the notification from the input Channel object.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count including attached PV object.  #####";
				N: [GRT(Inp_PVNotify,Wrk_Notify) MVM(Inp_PVNotify,2#1111_1110,Wrk_Notify) ,XIC(Inp_PVNotify.0) OTL(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_NotifyAll) ];
				RC: "This rung identifies:$N"
				    "* if any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-06-25:  Added separate rung for Rdy_ bits, for new I/O Fault alarm.  #####$N"
				    "#####  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(TgtDisagree.Sts_RdyAck) ,XIC(IOFault.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(TgtDisagree.Sts_RdyReset) ,XIC(IOFault.Sts_RdyReset) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, clear any $Qlurking$Q Commands.";
				N: OTU(OCmd_Reset)OTU(OCmd_ResetAckAll)OTU(MCmd_InpPV)OTU(MCmd_SubstPV);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_DOut (Description := "Discrete Output",
	                                      Revision := "4.10",
	                                      RevisionExtension := ".01 Release",
	                                      RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                      Vendor := "Rockwell Automation",
	                                      ExecutePrescan := Yes,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := Yes,
	                                      CreatedDate := "2010-03-17T13:04:32.875Z",
	                                      CreatedBy := "Not Available",
	                                      EditedDate := "2020-12-08T03:30:43.518Z",
	                                      EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                      SoftwareRevision := "v32.02",
	                                      AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction controls (and optionally monitors feedback for)$Na single Discrete Output and provides:$N$N*  Operator and Program Commands to:$N    -  turn the output ON$N    -  turn the output OFF$N    -  if the output is OFF, pulse it ON for a configured time$N    -  if the output is ON, pulse it OFF for a configured time, and$N    -  pulse the output continuously at the configured ON$N        and OFF times (e.g., for blinking a lamp)$N*  User-configurable ON delay and OFF delay before first output change$N*  User-configurable text labels for the ON and OFF states$N*  Optional monitoring of ON and OFF state confirmation feedbacks$N*  Detection of Failure to turn ON or OFF (when feedbacks are used)$N*  Monitoring of Permissive conditions to allow energizing output$N*  Monitoring of Interlock conditions to de-energize output$N*  Simulation, providing feedback of a working device while$N      disabling output (keeping de-energized)$N*  Monitoring of I/O communication faults$N*  Alarms for Fail to Turn ON, Fail to turn OFF (if feedbacks are$N      used), Interlock Trip, I/O Fault$N*  $QNotReady$Q status for display on Graphic Symbol and $QAvailable$Q$N     status for use by automation logic to know whether output can be$N     controlled by other objects.$N$NCommand Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$NCommand Sources: Operator, Program, External, Override, Maintenance, Out of$NService, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$N* Corrected operation of state machine with alert horn.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.02)$NSee 4.10 Release Notes for details.$N* Added audible alert on commanded energize/state change. $N* Added Horn Status, Horn Inhibit.$N* Changed availability to use input availability from interlocks.$N* Updated to P_CmdSrc V4.10.00.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.00 Release Notes for details.$N* Fixed feedback determination for simulation or no feedback.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-11)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added notify and unack count rollup for associated object(s).$N* Changed $QMode$Q to $QCommand Source$Q using P_CmdSrc 4.00.00.$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* Added option Cfg_HasPulse to enable or disable pulsing functions.$N* Aligned ready bit naming with command bit names.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N* Changed delay / time configuration items to REAL seconds.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_OnFdbk : BOOL (Description := "Input Signal: ON feedback from device",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			Inp_OffFdbk : BOOL (Description := "Input Signal: OFF feedback from device",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Inp_PermOK : BOOL (Description := "1=ON Permissives OK, device can turn ON",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 1);
			Inp_NBPermOK : BOOL (Description := "1=Non-Bypassable ON Permissives OK, device can turn ON",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 1);
			Inp_IntlkOK : BOOL (Description := "1=Interlocks OK, device can turn ON and stay ON",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 1);
			Inp_NBIntlkOK : BOOL (Description := "1=Non-Bypassable Interlocks OK, device can turn ON and stay ON",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_IntlkAvail : BOOL (Description := "1 = Interlock Availibility OK",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Inp_IOFault : BOOL (Description := "Input Communication Status 0=OK, 1=fail",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Sim : BOOL (Description := "1=Simulate working device; 0=Turn ON/OFF actual device",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Inp_Hand OF CmdSrc.Inp_Hand (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_Ovrd OF CmdSrc.Inp_Ovrd (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_OvrdCmd : DINT (Description := "Ovrd Device Command 0=None, 1=Off, 2=On, 3=Pulse Off, 4=Pulse On, 5=Pulse Cont",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_ExtInh OF CmdSrc.Inp_ExtInh (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_HornInh : BOOL (Description := "1 = Inhibit audible alert, 0 = Alllow audible alert",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Reset : BOOL (Description := "1=Reset Shed Latches and Cleared Alarms",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_HasPulse : BOOL (Description := "1=Enable pulsing functions, 0=On/Off only",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_CompletePulse : BOOL (Description := "1=Finish Pulse when commanded ON or OFF; 0=switch immediately",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_HasOnFdbk : BOOL (Description := "1=Device provides an ON feedback signal",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_HasOffFdbk : BOOL (Description := "1=Device provides an OFF feedback signal",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_UseOnFdbk : BOOL (Description := "1=Device ON feedback should be used for failure checking",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_UseOffFdbk : BOOL (Description := "1=Device OFF feedback should be used for failure checking",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_FdbkFail : BOOL (Description := "1=Both feedbacks ON is invalid; 0=Both feedbacks OFF is invalid",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_HasPermObj : BOOL (Description := "1=Tells HMI a P_Perm is connected to Inp_Perm",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasIntlkObj : BOOL (Description := "1=Tells HMI a P_Intlk is connected to Inp_Intlk",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HornOnChange : BOOL (Description := "0 = Horn on energize only, 1 = Horn on any state change",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_OperOffPrio : BOOL (Description := "1=OCmd_Off any time, 0=OCmd_Off only when Oper selected",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_ExtOffPrio : BOOL (Description := "1=XCmd_Off any time, 0=XCmd_Off only when Oper selected",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_OCmdResets : BOOL (Description := "1=New device OCmd resets shed latches and cleared alarms, 0=OCmdReset req$'d.",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_XCmdResets : BOOL (Description := "1=New device XCmd resets shed latches and cleared alarms, 0=XCmdReset req$'d.",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_OvrdPermIntlk : BOOL (Description := "1=Override ignores Bypassable Perm/ Intlk; 0=always use Perm/Intlk",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_ShedOnFail : BOOL (Description := "1=Go to State 0 and Alarm on Fail to reach position; 0=Alarm only on Fail",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 1);
			Cfg_ShedOnIOFault : BOOL (Description := "1=Go to State 0 and Alarm on I/O Fault; 0=Alarm only on I/O Fault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1);
			Cfg_HasOnFailAlm OF OnFail.Cfg_Exists (Description := "1=Fail to Turn ON Alarm exists and will be checked",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			Cfg_HasOffFailAlm OF OffFail.Cfg_Exists (Description := "1=Fail to Turn OFF Alarm exists and will be checked",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_HasIntlkTripAlm OF IntlkTrip.Cfg_Exists (Description := "1=Interlock Trip Alarm exists and will be checked",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_HasIOFaultAlm OF IOFault.Cfg_Exists (Description := "1=I/O Fault Alarm exists and will be checked",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_OnFailResetReqd OF OnFail.Cfg_ResetReqd (Description := "1=Reset required to clear Fail to Turn ON Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_OffFailResetReqd OF OffFail.Cfg_ResetReqd (Description := "1=Reset required to clear Fail to Turn OFF Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_IntlkTripResetReqd OF IntlkTrip.Cfg_ResetReqd (Description := "1=Reset required to clear Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_IOFaultResetReqd OF IOFault.Cfg_ResetReqd (Description := "1=Reset required to clear I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_OnFailAckReqd OF OnFail.Cfg_AckReqd (Description := "1=Acknowledge required for Fail to Turn ON Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_OffFailAckReqd OF OffFail.Cfg_AckReqd (Description := "1=Acknowledge required for Fail to Turn OFF Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_IntlkTripAckReqd OF IntlkTrip.Cfg_AckReqd (Description := "1=Acknowledge required for Interlock Trip Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_IOFaultAckReqd OF IOFault.Cfg_AckReqd (Description := "1=Acknowledge required for I/O Fault Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_OnFailSeverity OF OnFail.Cfg_Severity (Description := "Fail To Turn OFF Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_OffFailSeverity OF OffFail.Cfg_Severity (Description := "Fail To Turn ON Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_IntlkTripSeverity OF IntlkTrip.Cfg_Severity (Description := "Interlock Trip Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_IOFaultSeverity OF IOFault.Cfg_Severity (Description := "I/O Fault Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_StartHornT : REAL (Description := "Time to sound audible on commanded start (sec) (0=disabled)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0.00000000e+000);
			Cfg_SimFdbkT : REAL (Description := "Delay to echo back  of ON/OFF status when in Simulation (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 2.00000000e+000);
			Cfg_OnDelayT : REAL (Description := "Delay before initially turning output ON (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			Cfg_OffDelayT : REAL (Description := "Delay before initially turning output OFF (sec)",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0.00000000e+000);
			Cfg_OnPulseT : REAL (Description := "Output ON time for Pulse ON or Pulse Continuous",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 5.00000000e-001);
			Cfg_OffPulseT : REAL (Description := "Output OFF time for Pulse OFF or Pulse Continuous",
			                         Usage := Input,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 5.00000000e-001);
			Cfg_OnFailT : REAL (Description := "Time after Output ON to get ON Feedback before Fault (sec)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1.00000000e+001);
			Cfg_OffFailT : REAL (Description := "Time after Output OFF to get OFF Feedback before Fault (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 1.00000000e+001);
			PSet_Owner : DINT (Description := "Program Owner Request ID (non-zero) or Release (zero)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_On : BOOL (Description := "Program Command to turn device ON",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			PCmd_Off : BOOL (Description := "Program Command to turn device OFF",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			PCmd_OnPulse : BOOL (Description := "Program Command to pulse device (which is OFF) ON once",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			PCmd_OffPulse : BOOL (Description := "Program Command to pulse device (which is ON) OFF once",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			PCmd_ContPulse : BOOL (Description := "Program Command to pulse device continuously (blink)",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			PCmd_Prog OF CmdSrc.PCmd_Prog (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Oper OF CmdSrc.PCmd_Oper (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Lock OF CmdSrc.PCmd_Lock (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Unlock OF CmdSrc.PCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Normal OF CmdSrc.PCmd_Normal (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Reset : BOOL (Description := "Program Command to ResetShed Latches and Cleared Alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_OnFailAck OF OnFail.PCmd_Ack (Description := "Program Command to Acknowledge Fail to Turn ON Alarm",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			PCmd_OnFailSuppress OF OnFail.PCmd_Suppress (Description := "Program Command to Suppress Fail to Turn ON Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_OnFailUnsuppress OF OnFail.PCmd_Unsuppress (Description := "Program Command to UnsuppressFail to Turn ON Alarm",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			PCmd_OnFailUnshelve OF OnFail.PCmd_Unshelve (Description := "Program Command to Unshelve Fail to Turn ON Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_OffFailAck OF OffFail.PCmd_Ack (Description := "Program Command to Acknowledge Fail to Turn OFF Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_OffFailSuppress OF OffFail.PCmd_Suppress (Description := "Program Command to Suppress Fail to Turn OFF Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_OffFailUnsuppress OF OffFail.PCmd_Unsuppress (Description := "Program Command to Unsuppress Fail to Turn OFF Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_OffFailUnshelve OF OffFail.PCmd_Unshelve (Description := "Program Command to Unshelve Failt to Turn OFF Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_IntlkTripAck OF IntlkTrip.PCmd_Ack (Description := "Program Command to Acknowledge Interlock Trip Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_IntlkTripSuppress OF IntlkTrip.PCmd_Suppress (Description := "Program Command to Suppress Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IntlkTripUnsuppress OF IntlkTrip.PCmd_Unsuppress (Description := "Program Command to Unsuppress Interlock Trip Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_IntlkTripUnshelve OF IntlkTrip.PCmd_Unshelve (Description := "Program Command to Unshelve Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultAck OF IOFault.PCmd_Ack (Description := "Program Command to Acknowledge I/O Fault Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_IOFaultSuppress OF IOFault.PCmd_Suppress (Description := "Program Command to Suppress I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_IOFaultUnsuppress OF IOFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress I/O Fault Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultUnshelve OF IOFault.PCmd_Unshelve (Description := "Program Command to Unshelve I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			MCmd_Rel OF CmdSrc.MCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			OCmd_Unlock OF CmdSrc.OCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			XCmd_On : BOOL (Description := "External Command to turn device ON",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			XCmd_Off : BOOL (Description := "External Command to turn device OFF",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			XCmd_OnPulse : BOOL (Description := "External Command to pulse device (which is OFF) ON once",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			XCmd_OffPulse : BOOL (Description := "External Command to pulse device (which is ON) OFF once",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			XCmd_ContPulse : BOOL (Description := "External Command to pulse device continuously (blink)",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			XCmd_Acq OF CmdSrc.XCmd_Acq (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Rel OF CmdSrc.XCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Reset : BOOL (Description := "Ext Cmd to clear shed latches and cleared alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Out : BOOL (Description := "Primary Output 1=ON, 0=OFF",
			               Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			Out_Horn : BOOL (Description := "1=Sound audible prior to commanded energize/ state change",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			SrcQ_IO : DINT (Description := "Source and Quality of primary I/O (enumeration)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			SrcQ : DINT (Description := "Source and Quality of primary Val/Sts (enumeration)",
			                Usage := Output,
			                RADIX := Decimal,
			                Required := No,
			                Visible := No,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
			Val_Cmd : DINT (Description := "Device Command: 0=None, 1=Off, 2=On, 3=Pulse Off, 4=Pulse On, 5=Pulse Cont",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fdbk : DINT (Description := "Device Feedback: 0=Transition, 1=Off, 2=On, 3=Invalid",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Val_Sts : DINT (Description := "Device Status 0=off 1=on 2=pulse off 3=pulse on 4=pulse cont. 5=turning off 6=turning on",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fault : DINT (Description := "Device Fault Status 0=none, 16=Feedback Fault, 32=I/O Fault, 34=Config Error",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_State : DINT (Description := "Internal Logic State (for animating STD on faceplate), see manual",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : DINT (Description := "Highest Alarm prio and ack status this object + attached (enum)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : DINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_Owner : DINT (Description := "Current Object Owner ID (0=not owned)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Out : BOOL (Description := "1=Output is ON (energized), 0=Output is OFF (de-energized)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Sts_Pulsing : BOOL (Description := "1=Output is in a pusling sequence",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_Horn : BOOL (Description := "1=Horn Active",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_FdbkOff : BOOL (Description := "1=Device Feedback shows device in OFF state",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_FdbkOn : BOOL (Description := "1=Device Feedback shows device in ON state",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_FdbkFail : BOOL (Description := "1=Feedbacks are in an INVALID state (not ON, OFF or TRANSIT)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_Available : BOOL (Description := "1=Device available for control by automation (Prog)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Bypass : BOOL (Description := "1=Bypassable Interlocks and Permissives are Bypassed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_BypActive : BOOL (Description := "1=Interlock / Permissive Bypassing Active (Bypassed or Maintenance)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_NotRdy : BOOL (Description := "1=Device Not Ready, see detail bits for reason",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_CfgErr : BOOL (Description := "1=Device Not Ready: Configuration Error",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Nrdy_Fail : BOOL (Description := "1=Device Not Ready: Device Failure (Shed Requires Reset)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Nrdy_Intlk : BOOL (Description := "1=Device Not Ready: Interlock Not OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_IOFault : BOOL (Description := "1=Device Not Ready: I/O Fault (Shed Requires Reset)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Nrdy_OoS : BOOL (Description := "1=Device Not Ready: Device is Out of Service",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Nrdy_PrioOff : BOOL (Description := "1=Device Not Ready: Oper/Ext Priority Off Comand Requires Reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Nrdy_Perm : BOOL (Description := "1=Device Not Ready: Permissive Not OK",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=Device has a Maintenance Bypass function active",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=One or more Alarms Shelved, Disabled or Suppressed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: Feeback Check timer preset (use 0 to 2147483)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_Sim : BOOL (Description := "1=Error in Config: Simulation timer preset (use 0 to 2147483)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time, Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Hand OF CmdSrc.Sts_Hand (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OoS OF CmdSrc.Sts_OoS (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Maint OF CmdSrc.Sts_Maint (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only);
			Sts_Ovrd OF CmdSrc.Sts_Ovrd (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_Ext OF CmdSrc.Sts_Ext (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Prog OF CmdSrc.Sts_Prog (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_ProgLocked OF CmdSrc.Sts_ProgLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Oper OF CmdSrc.Sts_Oper (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OperLocked OF CmdSrc.Sts_OperLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Normal OF CmdSrc.Sts_Normal (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_ExtReqInh OF CmdSrc.Sts_ExtReqInh (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_ProgReqInh OF CmdSrc.Sts_ProgReqInh (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_MAcqRcvd OF CmdSrc.Sts_MAcqRcvd (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_OnFail OF OnFail.Inp (Description := "1=Device Failed to Turn ON",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read/Write);
			Alm_OnFail OF OnFail.Alm (Description := "1=Device Fail to Turn ON Alarm",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read/Write);
			Ack_OnFail OF OnFail.Ack (Description := "1=Fail to Turn ON Alarm has been acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read/Write);
			Sts_OnFailDisabled OF OnFail.Disabled (Description := "1=Fail to Turn ON Alarm has been Disabled by Maintenance",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_OnFailShelved OF OnFail.Shelved (Description := "1=Fail to Turn ON Alarm has been Shelved by Operator",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write);
			Sts_OnFailSuppressed OF OnFail.Suppressed (Description := "1=Fail to Turn ON Alarm has been Suppressed by Program",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_OffFail OF OffFail.Inp (Description := "1=Device Failed to Turn OFF",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Alm_OffFail OF OffFail.Alm (Description := "1=Device Fail to Turn OFF Alarm",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Ack_OffFail OF OffFail.Ack (Description := "1=Fail to Turn OFF Alarm has been acknowledged",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_OffFailDisabled OF OffFail.Disabled (Description := "1=Fail to Turn OFF Alarm has been Disabled by Maintenance",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_OffFailShelved OF OffFail.Shelved (Description := "1=Fail to Turn OFF Alarm has been Shelved by Operator",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_OffFailSuppressed OF OffFail.Suppressed (Description := "1=Fail to Turn OFF Alarm has been Suppressed by Program",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_IntlkTrip OF IntlkTrip.Inp (Description := "1=Device turned OFF by an Interlock NOT OK (one-shot)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Alm_IntlkTrip OF IntlkTrip.Alm (Description := "1=Alarm: Device turned OFF by an Interlock NOT OK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Ack_IntlkTrip OF IntlkTrip.Ack (Description := "1=Interlock Trip Alarm has been acknowledged",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_IntlkTripDisabled OF IntlkTrip.Disabled (Description := "1=Interlock Trip Alarm has been Disabled by Maintenance",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_IntlkTripShelved OF IntlkTrip.Shelved (Description := "1=Interlock Trip Alarm has been Shelved by Operator",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_IntlkTripSuppressed OF IntlkTrip.Suppressed (Description := "1=Interlock Trip Alarm has been Suppressed by Program",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_IOFault OF IOFault.Inp (Description := "I/O Comm Fault Status (0=OK, 1=Bad)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Alm_IOFault OF IOFault.Alm (Description := "1=I/O Fault Alarm",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Ack_IOFault OF IOFault.Ack (Description := "1=I/O Fault Alarm has been acknowledged",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_IOFaultDisabled OF IOFault.Disabled (Description := "1=I/O Fault Alarm has been Disabled by Maintenance",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_IOFaultShelved OF IOFault.Shelved (Description := "1=I/O Fault Alarm has been Shelved by Operator",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_IOFaultSuppressed OF IOFault.Suppressed (Description := "1=I/O Fault Alarm has been Suppressed by Program",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			MRdy_Rel OF CmdSrc.MRdy_Rel (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			ORdy_Unlock OF CmdSrc.ORdy_Unlock (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only);
			P_DOut : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Wrk_OffT : TIMER (Description := "Off Feedback Check Timer",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[0,0,0]");
			Wrk_OnT : TIMER (Description := "On Feedback Check Timer",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[0,0,0]");
			Wrk_SimOffT : TIMER (Description := "Simulation Delay until OFF",
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0]");
			Wrk_SimOnT : TIMER (Description := "Simulation Delay until ON",
			                     ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			Wrk_OnFdbk : BOOL (Description := "ON Feedback based on Command Source, simulation, etc. 1=confirmed ON",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_Notify : DINT (Description := "Buffer for building Val_Notify",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_Bypass : BOOL (Description := "Internal Bypassable Permissives and Interlocks are Bypassed flag",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			CmdSrc : P_CmdSrc (Description := "Control / Command Source Selection",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[7649,2048,0,0,0,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']]");
			IOFault : P_Alarm (Description := "I/O Fault Alarm",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			IntlkTrip : P_Alarm (Description := "Interlock Trip Alarm",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			OffFail : P_Alarm (Description := "Device Failed to Turn OFF Alarm",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[18,'Failed to Turn Off$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			OnFail : P_Alarm (Description := "Device Failed to Turn ON Alarm",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17,'Failed to Turn On$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[6,'P_DOut$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[15,'Discrete Device$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[22,'Discrete On/Off Device$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_OffFdbk : BOOL (Description := "OFF Feedback based on Command Source, simulation, etc. 1=confirmed OFF",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_OnPulseT : TIMER (Description := "Output ON Pulse Timer",
			                       ExternalAccess := Read Only,
			                       DefaultData := "[0,0,0]");
			Wrk_OffPulseT : TIMER (Description := "Output OFF Pulse Timer",
			                        ExternalAccess := Read Only,
			                        DefaultData := "[0,0,0]");
			Wrk_OffDelayT : TIMER (Description := "Dealy before turning output OFF (Timer)",
			                        ExternalAccess := Read Only,
			                        DefaultData := "[0,0,0]");
			Wrk_OnDelayT : TIMER (Description := "Delay before turning output ON (Timer)",
			                       ExternalAccess := Read Only,
			                       DefaultData := "[0,0,0]");
			Wrk_PermOK : BOOL (Description := "1=Permissives are all OK to energize",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_Cmd : DINT (Description := "Device Command: 0= None, bit .0=Off, bit .1=On,$Nbit .2=Pulse Off,$Nbit .3=Pulse On,$Nbit .4=Pulse Cont.",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Fault : DINT (Description := "Buffer for building Val_Fault",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_SrcQ : DINT (Description := "Register for building Source / Quality enumeration",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Cfg_1StText : STRING_8 (Description := "Text to display in PV=1 State",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[2,'On$00$00$00$00$00$00']");
			Cfg_0StText : STRING_8 (Description := "Text to display in PV=0 State",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[3,'Off$00$00$00$00$00']");
			HMI_Type : STRING_16 (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[6,'P_DOut$00$00$00$00$00$00$00$00$00$00']");
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			Wrk_NotRdy : BOOL (Description := "Device Not Ready conditions excluding shed latches",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_NoLongerSim : BOOL (Description := "Switched from Simulated to Real Device this scan",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			Wrk_UnackAlmC : DINT (Description := "Buffer for building Val_UnackAlmC",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Val_Notify : DINT (Description := "Current Alarm Level and Acknowledgement (enumeration)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			OCmd_ResetAckAll : BOOL (Description := "Operator Command to Reset all Alarms and latched Shed conditions",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Operator Command to Reset all Alarms requiring Reset",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			OCmd_ContPulse : BOOL (Description := "Operator Command to pulse device continuously (blink)",
			                         RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			OCmd_OffPulse : BOOL (Description := "Operator Command to pulse device (which is ON) OFF once",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			OCmd_OnPulse : BOOL (Description := "Operator Command to pulse device (which is OFF) ON once",
			                       RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			OCmd_Off : BOOL (Description := "Operator Command to turn device OFF",
			                   RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			OCmd_On : BOOL (Description := "Operator Command to turn device ON",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			MCmd_Check : BOOL (Description := "Maintenance Command to Check (not bypass) all Interlocks and Permissives",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Bypass : BOOL (Description := "Maintenance Command to Bypass all Bypassable Interlocks and Permissives",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			ORdy_ResetAckAll : BOOL (Description := "1=Ready for OCmd_ResetAckAll (enables HMI button)",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			ORdy_ContPulse : BOOL (Description := "1=Ready for OCmd_ContPulse (enables HMI button)",
			                         RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			ORdy_OffPulse : BOOL (Description := "1=Ready for OCmd_OffPulse (enables HMI button)",
			                        RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			ORdy_OnPulse : BOOL (Description := "1=Ready for OCmd_OnPulse (enables HMI button)",
			                       RADIX := Decimal,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			ORdy_Off : BOOL (Description := "1=Ready for OCmd_Off (enables HMI button)",
			                   RADIX := Decimal,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			ORdy_On : BOOL (Description := "1=Ready for OCmd_On (enables HMI button)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			MRdy_Check : BOOL (Description := "1=Ready for MCmd_Check (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Bypass : BOOL (Description := "1=Ready for MCmd_Bypass (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Wrk_State : DINT (Description := "Internal value of state machine current state",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_StartHornT : TIMER (Description := "Timer for audible alert or start",
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			Wrk_StartHorn : BOOL (Description := "1=Sound audible prior to commanded energize/ state change",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Out of Service; output is OFF; feedback Status shown if available; Alarms inhibited.")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    "Handle $QProgrammed Out of Servie$Q Selection using the standard$N"
				    "P_CmdSrc AOI (EnableInFalse Routine, false scan required!).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Changed P_Mode to P_CmdSrc.  #####";
				N: XIC(EnableIn)P_CmdSrc(CmdSrc);
				RC: "First-Come First-Served Ownership Arbitration still needs to happen, even when device is disabled.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "$QLurking$Q Commands not handled elsewhere are cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Command Source and Commands.  #####";
				N: [OTU(OCmd_On) OTU(OCmd_Off) OTU(OCmd_OnPulse) OTU(OCmd_OffPulse) OTU(OCmd_ContPulse) ,OTU(XCmd_On) OTU(XCmd_Off) OTU(XCmd_OnPulse) OTU(XCmd_OffPulse) OTU(XCmd_ContPulse) ,OTU(PCmd_On) OTU(PCmd_Off) OTU(PCmd_OnPulse) OTU(PCmd_OffPulse) OTU(PCmd_ContPulse) ,OTU(MCmd_Bypass) OTU(MCmd_Check) ,CLR(Inp_OvrdCmd) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####";
				N: [OTU(ORdy_On) OTU(ORdy_Off) OTU(ORdy_OnPulse) OTU(ORdy_OffPulse) OTU(ORdy_ContPulse) ,OTU(MRdy_Bypass) OTU(MRdy_Check) ,OTU(ORdy_Reset) OTU(ORdy_ResetAckAll) ];
				RC: "============================================================$N"
				    "FEEDBACK DETERMINATION$N"
				    "============================================================$N"
				    "If the Device is being simulated or has no feedbacks, use the Sim Timers to provide$N"
				    "$Qfake$Q feedback signals based on the simulation time to turn ON and OFF the device.$N"
				    "$N"
				    "If the Device is NOT being simulated and it HAS and IS USING feedback,$N"
				    "interpret the state of the configured feedbacks to determint the Device state..";
				N: XIO(Inp_Sim)[XIC(Cfg_UseOnFdbk) XIC(Inp_OnFdbk) ,XIO(Cfg_UseOnFdbk) XIC(Cfg_UseOffFdbk) XIO(Inp_OffFdbk) ]OTE(Wrk_OnFdbk);
				RC: "If the Device is being simulated or has no feedbacks, use the Sim Timers to provide$N"
				    "$Qfake$Q feedback signals based on the simulation time to turn ON and OFF the device.$N"
				    "$N"
				    "If the Device is NOT being simulated and it HAS and IS USING feedback,$N"
				    "interpret the state of the configured feedbacks to determint the Device state..";
				N: [[XIC(Inp_Sim) ,XIO(Cfg_UseOffFdbk) XIO(Cfg_UseOnFdbk) ] ,XIO(Inp_Sim) [XIC(Cfg_UseOffFdbk) XIC(Inp_OffFdbk) ,XIO(Cfg_UseOffFdbk) XIC(Cfg_UseOnFdbk) XIO(Inp_OnFdbk) ] ]OTE(Wrk_OffFdbk);
				N: [XIO(Wrk_OnFdbk) XIC(Wrk_OffFdbk) MOV(1,Val_Fdbk) OTE(Sts_FdbkOff) ,XIC(Wrk_OnFdbk) XIO(Wrk_OffFdbk) MOV(2,Val_Fdbk) OTE(Sts_FdbkOn) ];
				RC: "The Device can be configured to have Feedbakc Failure shown for both$N"
				    "feedback inputs ON or for both inputs OFF.";
				N: [XIC(Cfg_FdbkFail) XIC(Wrk_OnFdbk) XIC(Wrk_OffFdbk) ,XIO(Cfg_FdbkFail) XIO(Wrk_OnFdbk) XIO(Wrk_OffFdbk) ]OTE(Sts_FdbkFail)MOV(3,Val_Fdbk);
				RC: "The OTHER (non-failure) state with both feedback inputs ON or both inputs OFF is$N"
				    "DEVICE IN TRANSIT.";
				N: [XIC(Cfg_FdbkFail) XIO(Wrk_OnFdbk) XIO(Wrk_OffFdbk) ,XIO(Cfg_FdbkFail) XIC(Wrk_OnFdbk) XIC(Wrk_OffFdbk) ]CLR(Val_Fdbk);
				RC: "Reset the output pulse, fault, and simulation timers.";
				N: [RES(Wrk_OnT) RES(Wrk_OffT) RES(Wrk_OnDelayT) RES(Wrk_OffDelayT) ,RES(Wrk_OnPulseT) RES(Wrk_OffPulseT) RES(Wrk_SimOnT) RES(Wrk_SimOffT) ];
				RC: "The Discrete Output is DE-ENERGIZED";
				N: [OTU(Sts_Out) OTU(Out) ,OTU(Wrk_StartHorn) OTU(Out_Horn) OTU(Sts_Horn) ];
				RC: "Show the device as Disabled and Not Ready, not Available, and with no$N"
				    "Maintenance Bypass breadcrumb.$N"
				    "Show the status of the output bit as DE-ENERGIZED.$N"
				    "Show the enumerated device command as NONE.$N"
				    "Show the enumerated device status as OFF.$N"
				    "Show the enumerated internal state as DE-ENERGIZED.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Disable/Enable and NoMode replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [OTU(Sts_Available) OTU(Sts_MaintByp) OTL(Sts_NotRdy) ,OTU(Nrdy_CfgErr) OTU(Nrdy_Fail) OTU(Nrdy_Intlk) OTU(Nrdy_IOFault) ,OTL(Nrdy_OoS) OTU(Nrdy_PrioOff) OTU(Nrdy_Perm) ,CLR(Wrk_Cmd) CLR(Val_Cmd) CLR(Wrk_State) CLR(Val_State) ,CLR(Val_Sts) CLR(Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(20,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: MOV(20,SrcQ);
				RC: "If the device is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then show the alarms as $QParent object out of service$Q.$N"
				    "Show the overall acknowledgement status.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Changed P_Mode to P_CmdSrc, added Out of Service.  #####";
				N: [OTL(OnFail.Inp_OoS) P_Alarm(OnFail) ,OTL(OffFail.Inp_OoS) P_Alarm(OffFail) ,OTL(IntlkTrip.Inp_OoS) P_Alarm(IntlkTrip) ,OTL(IOFault.Inp_OoS) P_Alarm(IOFault) ,CLR(Val_Notify) CLR(Val_NotifyAll) ,[XIC(OnFail.Val_Notify.0) ,XIC(OffFail.Val_Notify.0) ,XIC(IntlkTrip.Val_Notify.0) ,XIC(IOFault.Val_Notify.0) ] OTL(Val_Notify.0) OTL(Val_NotifyAll.0) ,[XIC(OnFail.Sts_AlmInh) ,XIC(OffFail.Sts_AlmInh) ,XIC(IntlkTrip.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ] OTE(Sts_AlmInh) ];
		END_ROUTINE

		ROUTINE Logic (Description := "Control Discrete Output, monitoring Feedbacks")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_DOut:  PROCESS -- DISCRETE OUTPUT (on/off device)$N"
				    "============================================================$N"
				    "Revision 4.10.01 Release  2019-10-16:  See V4.10.xx Release Notes for details.$N"
				    "V2.x, V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-02:  Changed $QMode$Q to $QCommand Source$Q. Changed Inf_$N"
				    "items to HMI_, and added Cfg_Area for security. Added unacked alarm count.$N"
				    "Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N"
				    "Added option: Cfg_HasPulse. Aligned ready bit naming with command bit names.$N"
				    "Changed delay / time configuration items to REAL seconds.$N"
				    "V4.00.02  2018-10-30:  Fixed feedback determination for simulation or no feedback.$N"
				    "V4.10.00  2019-10-16:  Added audible alert on commanded energize/state change. $N"
				    "Added Horn Status, Horn Inhibit. Changed availability to use input availability$N"
				    "from interlocks. Updated to P_CmdSrc V4.10.00. Added Cfg_HasMoreObj.$N"
				    "V4.10.01  2019-10-11:  Corrected operation of state machine with alert horn.$N"
				    "============================================================$N"
				    "This Instruction controls (and optionally monitors feedback for)$N"
				    "a single Discrete Output and provides:$N"
				    "$N"
				    "*  Operator and Program Commands to:$N"
				    "    -  turn the output ON$N"
				    "    -  turn the output OFF$N"
				    "    -  if the output is OFF, pulse it ON for a configured time$N"
				    "    -  if the output is ON, pulse it OFF for a configured time, or$N"
				    "    -  pulse the output continuously at the configured ON$N"
				    "        and OFF times (e.g., for blinking a lamp)$N"
				    "*  User-configurable ON delay and OFF delay before first output change$N"
				    "*  User-configurable text labels for the ON and OFF states$N"
				    "*  Optional monitoring of ON and OFF state confirmation feedbacks$N"
				    "*  Detection of Failure to turn ON or OFF (when feedbacks are used)$N"
				    "*  Monitoring of Permissive conditions to allow energizing output$N"
				    "*  Monitoring of Interlock conditions to de-energize output$N"
				    "*  Optional return to previous state upon return from Hand,$N"
				    "      Override, or Interlock$N"
				    "*  Simulation, providing feedback of a working device while$N"
				    "      disabling output (keeping de-energized)$N"
				    "*  Monitoring of I/O communication faults$N"
				    "*  Alarms for Fail to Turn ON, Fail to turn OFF (if feedbacks are$N"
				    "      used), Interlock Trip, I/O Fault$N"
				    "*  $QAvailable$Q status for use by automation logic to know whether$N"
				    "      output can be controlled by other objects.$N"
				    "$N"
				    "Command Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$N"
				    "Command Sources: Operator, External, Program, External, Override, Maintenance,$N"
				    "Out of Service, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)CONCAT(Cfg_Desc,Cfg_Label,Cfg_Tag)CONCAT(Cfg_Area,Cfg_0StText,Cfg_1StText)LOWER(HMI_Lib,HMI_Type);
				RC: "============================================================$N"
				    "COMMAND SOURCE PROCESSING$N"
				    "============================================================$N"
				    "This rung handles received Command Source selection Inputs and Commands:$N"
				    "$N"
				    "NOTE:  All Commands for Command Source and Alarm are aliased directly to the$N"
				    "corresponding Commands in the contained P_CmdSrc and P_Alarm AOIs.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Changed P_Mode to P_CmdSrc.  #####";
				N: LBL(SkipText)P_CmdSrc(CmdSrc);
				RC: "This rung handles simple First-Come First-Served Ownership Arbitration.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "If the device does not even HAVE Feedback inputs,$N"
				    "they cannot be USED for feedback checking!";
				N: [XIO(Cfg_HasOnFdbk) OTU(Cfg_UseOnFdbk) ,XIO(Cfg_HasOffFdbk) OTU(Cfg_UseOffFdbk) ];
				RC: "These rungs get Configuration data (such as timer presets) and distribute as needed.$N"
				    "Note that some Configuration data are used directly in-place.$N"
				    "$N"
				    "Enter the time (in seconds) for the device to successfully turn ON before declaring a fault.$N"
				    "Enter the time (in seconds) for the device to successfully turn OFF before declaring a fault.$N"
				    "$N"
				    "If the timer preset calcuated wraps negative (more than 2.14... million seconds), then use a default$N"
				    "limit value and report Bad Configuration.  Note that a negative timer preset will fault the controller!!!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Changed delay / time configuration items to REAL seconds.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  Added Inp_HornInh to disable Horn operation.  #####";
				N: [[MUL(Cfg_OnDelayT,1000.0,Wrk_OnDelayT.PRE) XIC(Wrk_OnDelayT.PRE.31) MOV(0,Wrk_OnDelayT.PRE) ,MUL(Cfg_OffDelayT,1000.0,Wrk_OffDelayT.PRE) XIC(Wrk_OffDelayT.PRE.31) MOV(0,Wrk_OffDelayT.PRE) ,MUL(Cfg_OnPulseT,1000.0,Wrk_OnPulseT.PRE) XIC(Wrk_OnPulseT.PRE.31) MOV(2147483647,Wrk_OnPulseT.PRE) ,MUL(Cfg_OffPulseT,1000.0,Wrk_OffPulseT.PRE) XIC(Wrk_OffPulseT.PRE.31) MOV(2147483647,Wrk_OffPulseT.PRE) ,MUL(Cfg_OnFailT,1000.0,Wrk_OnT.PRE) XIC(Wrk_OnT.PRE.31) MOV(2147483647,Wrk_OnT.PRE) ,MUL(Cfg_OffFailT,1000.0,Wrk_OffT.PRE) XIC(Wrk_OffT.PRE.31) MOV(2147483647,Wrk_OffT.PRE) ,MUL(Cfg_StartHornT,1000.0,Wrk_StartHornT.PRE) [XIC(Wrk_StartHornT.PRE.31) ,GRT(Wrk_StartHornT.PRE,1000000) ] CLR(Wrk_StartHornT.PRE) ] OTE(Err_Timer) ,XIC(Inp_HornInh) CLR(Wrk_StartHornT.PRE) ];
				RC: "Enter the time (in seconds) to echo back the desired state when running in simulation$N"
				    "$N"
				    "Handle timer preset invalid values as above.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-08:  Changed delay / time configuration items to REAL seconds.  #####$N"
				    "";
				N: MUL(Cfg_SimFdbkT,1000.0,Wrk_SimOnT.PRE)[XIC(Wrk_SimOnT.PRE.31) MOV(0,Wrk_SimOnT.PRE) OTE(Err_Sim) ,MOV(Wrk_SimOnT.PRE,Wrk_SimOffT.PRE) ];
				RC: "This rung generates a summary Bad Config status, simply an OR of the individual bits provided above$N"
				    "(in the Configuration handling section).";
				N: [XIC(Err_Timer) ,XIC(Err_Sim) ]OTE(Nrdy_CfgErr);
				RC: "============================================================$N"
				    "SIMULATION AND FAIL TIMERS$N"
				    "============================================================$N"
				    "These rungs CHECK the timers that are based on the determined output state.$N"
				    "$N"
				    "This rung checks the OFF state timers.$N"
				    "$N"
				    "#####  V4.00.02  2018-10-30:  Handle case where simulation time is set to zero.  #####";
				N: XIO(Wrk_State.0)TON(Wrk_OffT,?,?)TON(Wrk_SimOffT,?,?)TON(Wrk_SimOffT,?,?);
				RC: "And this rung checks the ON State timers.$N"
				    "$N"
				    "#####  V4.00.02  2018-10-30:  Handle case where simulation time is set to zero.  #####";
				N: XIC(Wrk_State.0)TON(Wrk_OnT,?,?)TON(Wrk_SimOnT,?,?)TON(Wrk_SimOnT,?,?);
				RC: "============================================================$N"
				    "FEEDBACK DETERMINATION$N"
				    "============================================================$N"
				    "If the Device is being simulated or has no feedbacks, use the Sim Timers to provide$N"
				    "$Qfake$Q feedback signals based on the simulation time to turn ON and OFF the device.$N"
				    "$N"
				    "If the Device is NOT being simulated and it HAS and IS USING feedback,$N"
				    "interpret the state of the configured feedbacks to determint the Device state..$N"
				    "$N"
				    "#####  V4.00.02  2018-10-30:  Fixed feedback determination for simulation or no feedback.  #####";
				N: [[XIC(Inp_Sim) ,XIO(Cfg_UseOnFdbk) XIO(Cfg_UseOffFdbk) ] [XIC(Wrk_SimOnT.DN) XIC(Cfg_FdbkFail) ,XIO(Wrk_SimOffT.DN) XIO(Cfg_FdbkFail) ] ,XIO(Inp_Sim) [XIC(Cfg_UseOnFdbk) XIC(Inp_OnFdbk) ,XIO(Cfg_UseOnFdbk) XIC(Cfg_UseOffFdbk) XIO(Inp_OffFdbk) ] ]OTE(Wrk_OnFdbk);
				RC: "If the Device is being simulated or has no feedbacks, use the Sim Timers to provide$N"
				    "$Qfake$Q feedback signals based on the simulation time to turn ON and OFF the device.$N"
				    "$N"
				    "If the Device is NOT being simulated and it HAS and IS USING feedback,$N"
				    "interpret the state of the configured feedbacks to determint the Device state.$N"
				    "$N"
				    "#####  V4.00.02  2018-10-30:  Fixed feedback determination for simulation or no feedback.  #####";
				N: [[XIC(Inp_Sim) ,XIO(Cfg_UseOffFdbk) XIO(Cfg_UseOnFdbk) ] [XIC(Wrk_SimOffT.DN) XIC(Cfg_FdbkFail) ,XIO(Wrk_SimOnT.DN) XIO(Cfg_FdbkFail) ] ,XIO(Inp_Sim) [XIC(Cfg_UseOffFdbk) XIC(Inp_OffFdbk) ,XIO(Cfg_UseOffFdbk) XIC(Cfg_UseOnFdbk) XIO(Inp_OnFdbk) ] ]OTE(Wrk_OffFdbk);
				N: [XIO(Wrk_OnFdbk) XIC(Wrk_OffFdbk) OTE(Sts_FdbkOff) MOV(1,Val_Fdbk) ,XIC(Wrk_OnFdbk) XIO(Wrk_OffFdbk) OTE(Sts_FdbkOn) MOV(2,Val_Fdbk) ];
				RC: "The Device can be configured to have Feedbakc Failure shown for both$N"
				    "feedback inputs ON or for both inputs OFF.";
				N: [XIC(Cfg_FdbkFail) XIC(Wrk_OnFdbk) XIC(Wrk_OffFdbk) ,XIO(Cfg_FdbkFail) XIO(Wrk_OnFdbk) XIO(Wrk_OffFdbk) ]OTE(Sts_FdbkFail)MOV(3,Val_Fdbk);
				RC: "The OTHER (non-failure) state with both feedback inputs ON or both inputs OFF is$N"
				    "DEVICE IN TRANSIT.";
				N: [XIC(Cfg_FdbkFail) XIO(Wrk_OnFdbk) XIO(Wrk_OffFdbk) ,XIO(Cfg_FdbkFail) XIC(Wrk_OnFdbk) XIC(Wrk_OffFdbk) ]CLR(Val_Fdbk);
				RC: "============================================================$N"
				    "INTERLOCK / PERMISSIVE BYPASS / CHECK COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Bypass Command bypasses the Bypassable Permissives and Interlocks.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Changed Bypass/Check to Maintenance commands.  #####";
				N: XIC(MCmd_Bypass)OTU(MCmd_Bypass)OTL(Wrk_Bypass);
				RC: "The Check Command enables checking of ALL$N"
				    "Permissives and Interlocks (cancels the bypass).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Changed Bypass/Check to Maintenance commands.  #####";
				N: XIC(MCmd_Check)OTU(MCmd_Check)OTU(Wrk_Bypass);
				RC: "If the internal Bypass flag is set, Bypassable Interlocks and Permissives ARE BYPASSED.$N"
				    "Bypassing is ACTIVE if Bypass selected OR in Maintenance,$N"
				    "or in Override if Override Bypassing is configured.";
				N: [XIC(Wrk_Bypass) OTE(Sts_Bypass) ,XIC(Sts_Maint) ,XIC(Sts_Ovrd) XIC(Cfg_OvrdPermIntlk) ]OTE(Sts_BypActive);
				RC: "If a Maintenance Bypass function is active, display the Maintenance Bypass$N"
				    "Indicator (triangle symbol) on the graphic symbol.  Bypass functions are:$N"
				    "*  Interlock / Permissive Bypass function is enabled$N"
				    "* Device HAS OFF or ON feedback designated by engineer, but$N"
				    "maintenance has selected to NOT USE that feedback";
				N: [XIC(Cfg_HasOnFdbk) XIO(Cfg_UseOnFdbk) ,XIC(Cfg_HasOffFdbk) XIO(Cfg_UseOffFdbk) ,XIC(Sts_Bypass) ]OTE(Sts_MaintByp);
				RC: "Ready for Interlock / Permissive Bypass if not bypassed.$N"
				    "Ready to cancel Bypass (resume checking) if bypassed.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Aligned Ready bit naming with Command bits.  #####";
				N: [XIO(Wrk_Bypass) OTE(MRdy_Bypass) ,XIC(Wrk_Bypass) OTE(MRdy_Check) ];
				RC: "============================================================$N"
				    "ALARM AND DEVICE RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "The rungs in this section handle commands for this Device, received$N"
				    "in Operator, Program, Override and Maintenance.$N"
				    "(Hand Command Source is handled separately, below.$N"
				    "$N"
				    "For any command which involves energizing the device (all commands$N"
				    "except OFF), permissives must be OK to energize.";
				N: [XIC(Inp_PermOK) ,XIC(Sts_BypActive) ]XIC(Inp_NBPermOK)OTE(Wrk_PermOK);
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.$N"
				    "$N"
				    "This rung processes received Reset Commands from:$N"
				    "$N"
				    "1.  The Operator via HMI Operator Command, or$N"
				    "2.  Higher-level strategies via Program Command$N"
				    "3.  Pushbuttons or other block via Input$N"
				    "4.  Resets initiated by other device Operator Commands (if configured to do so)$N"
				    "and forwards the Reset to ALL Alarms and latched Shed conditions.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External Command Source and Commands.  #####";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(XCmd_Reset) OTU(XCmd_Reset) ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ,[XIC(OCmd_Off) ,[XIC(OCmd_On) ,XIC(Cfg_HasPulse) [XIC(OCmd_OffPulse) ,XIC(OCmd_OnPulse) ,XIC(OCmd_ContPulse) ] ] XIC(Wrk_PermOK) ] XIC(Cfg_OCmdResets) XIO(Nrdy_CfgErr) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,[XIC(XCmd_Off) ,[XIC(XCmd_On) ,XIC(Cfg_HasPulse) [XIC(XCmd_OffPulse) ,XIC(XCmd_OnPulse) ,XIC(XCmd_ContPulse) ] ] XIC(Wrk_PermOK) ] XIC(Cfg_XCmdResets) XIO(Nrdy_CfgErr) XIC(Sts_Ext) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(PCmd_OnFailAck) ,OTL(PCmd_OffFailAck) ,OTL(PCmd_IntlkTripAck) ,OTL(PCmd_IOFaultAck) ] ][OTL(OnFail.PCmd_Reset) ,OTL(OffFail.PCmd_Reset) ,OTL(IntlkTrip.PCmd_Reset) ,OTL(IOFault.PCmd_Reset) ,XIC(Sts_OnFail) RES(Wrk_OnT) ,XIC(Sts_OffFail) RES(Wrk_OffT) ,OTU(Nrdy_PrioOff) OTU(Nrdy_Fail) ,[XIO(Inp_IOFault) ,XIC(Inp_Sim) ] OTU(Nrdy_IOFault) ];
				RC: "============================================================$N"
				    "DEVICE FAIL TO TURN ON DETECTION$N"
				    "============================================================$N"
				    "If the DEVICE SHOULD BE ON, run an $QOn$Q Timer to check for Fail to Turn On,$N"
				    "and run a Simulation Timer to provide simulated ON feedback if needed.$N"
				    "$N"
				    "If the ON Timer times out and the device feedback (or simulated feedback) never showed up,$N"
				    "show the device as $QFAILED TO TURN ON$Q and issue an Alarm.";
				N: XIC(Wrk_OnT.DN)NEQ(Wrk_OnT.PRE,0)NEQ(Val_Fdbk,2)XIO(Sts_Maint)OTE(Sts_OnFail);
				RC: "============================================================$N"
				    "DEVICE FAIL TO TURN OFF DETECTION$N"
				    "============================================================$N"
				    "If the Device SHOULD BE OFF, run an OFF Timer to check for Fail to Trun OFF,$N"
				    "and run a Simulation Timer to provide simulated OFF feedback if needed.$N"
				    "$N"
				    "If the OFF Timer times out and the device OFF feedback (or simulated feedback) never showed $QOff$Q,$N"
				    "show the device as $QFAILED TO TURN OFF$Q and issue an Alarm.";
				N: XIC(Wrk_OffT.DN)NEQ(Wrk_OffT.PRE,0)NEQ(Val_Fdbk,1)XIO(Sts_Maint)OTE(Sts_OffFail);
				RC: "Higher Priority:$N"
				    "If Interlocks are not OK (Non-Bypassable not OK, or bypassable not OK$N"
				    "and not bypassed by Maintenance, Override or Bypass Command), $N"
				    "OR if the Device is DISABLED or FAULTED, set it to its FAIL STATE.$N"
				    "$N"
				    "If the Device is NOT in its fail state (if it is energized) and the Interlock$N"
				    "de-energized it, raise the Interlock Trip alarm.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIC(Nrdy_CfgErr) ,XIC(Sts_OoS) OTE(Nrdy_OoS) ,XIO(Wrk_PermOK) XIO(Wrk_State.0) OTE(Nrdy_Perm) ,[XIO(Inp_IntlkOK) XIO(Sts_BypActive) ,XIO(Inp_NBIntlkOK) ] [XIO(Wrk_Cmd.0) NEQ(Val_Sts,0) OTE(Sts_IntlkTrip) ,OTE(Nrdy_Intlk) ] ,XIC(Inp_IOFault) XIO(Inp_Sim) OTE(Sts_IOFault) XIC(Cfg_ShedOnIOFault) OTL(Nrdy_IOFault) ,XIC(Sts_OnFail) XIC(Cfg_ShedOnFail) OTL(Nrdy_Fail) ]OTE(Wrk_NotRdy);
				RC: "Higher Priority:$N"
				    "If Interlocks are not OK (Non-Bypassable not OK, or bypassable not OK$N"
				    "and not bypassed by Maintenance, Override or Bypass Command), $N"
				    "OR if the Device is DISABLED or FAULTED, set it to its FAIL STATE.$N"
				    "$N"
				    "If the Device is NOT in its fail state (if it is energized) and the Interlock$N"
				    "de-energized it, raise the Interlock Trip alarm.";
				N: [XIC(Wrk_NotRdy) ,XIC(Nrdy_PrioOff) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) ]OTE(Sts_NotRdy);
				RC: "If the device isn$'t $Qnot ready$Q (it IS ready) and it$'s in Program Mode,$N"
				    "then it is AVAILABLE to be controlled by automation (Program Mode logic).$N"
				    "#####  V4.10.00  2019-03-08:  Changed availability to use input availability from interlocks.  #####";
				N: XIC(Sts_Prog)XIO(Nrdy_CfgErr)XIO(Nrdy_OoS)XIO(Nrdy_Perm)XIO(Nrdy_IOFault)XIO(Nrdy_Fail)XIO(Nrdy_PrioOff)[[XIC(Inp_IntlkOK) ,XIC(Sts_BypActive) ] XIC(Inp_NBIntlkOK) ,XIC(Inp_IntlkAvail) ]OTE(Sts_Available);
				RC: "============================================================$N"
				    "DEVICE COMMAND HANDLING$N"
				    "============================================================$N"
				    "If a Device CONTINUOUS PULSE command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is CONTINUOUSE PULSE,$N"
				    "mark the Device Target State as CONTINUOUS PULSE (4).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External commands.  Added option: Cfg_HasPulse.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: [XIC(OCmd_ContPulse) OTU(OCmd_ContPulse) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIC(XCmd_ContPulse) OTU(XCmd_ContPulse) XIC(Sts_Ext) ,XIC(PCmd_ContPulse) OTU(PCmd_ContPulse) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,5) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]XIC(Cfg_HasPulse)XIC(Wrk_PermOK)XIO(Sts_NotRdy)NEQ(Wrk_OffPulseT.PRE,0)NEQ(Wrk_OnPulseT.PRE,0)[[XIC(Cfg_HornOnChange) NEQ(Wrk_Cmd,16) ,EQU(Wrk_Cmd,0) EQU(Wrk_State,0) ] OTL(Wrk_StartHorn) ,MOV(16,Wrk_Cmd) ];
				RC: "If a Device ON PULSE command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is ON PULSE,$N"
				    "mark the Device Target State as ON PULSE (2).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Added External commands.  Added option: Cfg_HasPulse.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: [XIC(OCmd_OnPulse) OTU(OCmd_OnPulse) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIC(XCmd_OnPulse) OTU(XCmd_OnPulse) XIC(Sts_Ext) ,XIC(PCmd_OnPulse) OTU(PCmd_OnPulse) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,4) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]XIC(Cfg_HasPulse)XIC(Wrk_PermOK)XIO(Sts_NotRdy)NEQ(Wrk_OnPulseT.PRE,0)[[XIC(Cfg_HornOnChange) NEQ(Wrk_Cmd,8) ,EQU(Wrk_Cmd,0) EQU(Wrk_State,0) ] OTL(Wrk_StartHorn) ,MOV(8,Wrk_Cmd) ];
				RC: "If a Device OFF PULSE command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is OFF PULSE,$N"
				    "mark the Device Target State as OFF PULSE (3).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Added External commands.  Added option: Cfg_HasPulse.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: [XIC(OCmd_OffPulse) OTU(OCmd_OffPulse) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIC(XCmd_OffPulse) OTU(XCmd_OffPulse) XIC(Sts_Ext) ,XIC(PCmd_OffPulse) OTU(PCmd_OffPulse) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,3) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]XIC(Cfg_HasPulse)XIC(Wrk_PermOK)XIO(Sts_NotRdy)NEQ(Wrk_OffPulseT.PRE,0)[[XIC(Cfg_HornOnChange) NEQ(Wrk_Cmd,4) ,EQU(Wrk_Cmd,0) EQU(Wrk_State,0) ] OTL(Wrk_StartHorn) ,MOV(4,Wrk_Cmd) ];
				RC: "If a Device ON command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is ON,$N"
				    "mark the Device Target State as ON (1).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External commands.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: [XIC(OCmd_On) OTU(OCmd_On) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIC(XCmd_On) OTU(XCmd_On) XIC(Sts_Ext) ,XIC(PCmd_On) OTU(PCmd_On) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,2) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]XIC(Wrk_PermOK)XIO(Sts_NotRdy)[[XIC(Cfg_HornOnChange) NEQ(Wrk_State,1) ,EQU(Wrk_Cmd,0) EQU(Wrk_State,0) ] OTL(Wrk_StartHorn) ,MOV(2,Wrk_Cmd) ];
				RC: "If a Device OFF command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is OFF,$N"
				    "mark the Device Target State as OFF (0).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External commands.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: [XIC(OCmd_Off) OTU(OCmd_Off) [XIC(Sts_Oper) ,XIC(Sts_Maint) ,XIC(Cfg_OperOffPrio) XIO(Sts_Oper) XIO(Sts_Maint) OTL(Nrdy_PrioOff) ] ,XIC(XCmd_Off) OTU(XCmd_Off) [XIC(Sts_Ext) ,XIC(Cfg_ExtOffPrio) XIO(Sts_Ext) OTL(Nrdy_PrioOff) ] ,XIC(PCmd_Off) OTU(PCmd_Off) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,1) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ,XIC(Sts_NotRdy) NEQ(Wrk_State,0) ][[XIC(Cfg_HornOnChange) NEQ(Wrk_State,0) ,EQU(Wrk_Cmd,0) EQU(Wrk_State,0) ] XIO(Sts_NotRdy) OTL(Wrk_StartHorn) ,MOV(1,Wrk_Cmd) ];
				RC: "Higher Priority: HAND mode wins over others:$N"
				    "If in Hand, have the Device follow the feedback.$N"
				    "If the Device is ON, set the Target State to ON, and if the Device$N"
				    "is OFF, set the Target State to OFF; upon transition out of Hand, the$N"
				    "device will hold its last state.$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####";
				N: [XIC(Sts_Hand) ,XIO(Inp_Sim) ONS(Wrk_NoLongerSim) ,XIC(S:FS) ]CLR(Wrk_Cmd)OTU(Wrk_StartHorn)[EQU(Val_Fdbk,2) XIO(Sts_NotRdy) MOV(1,Val_Sts) MOV(1,Wrk_State) ,[NEQ(Val_Fdbk,2) ,XIC(Sts_NotRdy) ] CLR(Val_Sts) CLR(Wrk_State) ];
				RC: "============================================================$N"
				    "STATE MACHINE$N"
				    "============================================================$N"
				    "The Discrete Output is processed using a State Machine to handle pulsing$N"
				    "delays, On and Off delays, commands for changes of state, etc.$N"
				    "$N"
				    "These rungs handle changes of Actual State based on Target State$N"
				    "set by Commands above.  (Timers and the time-based$N"
				    "transitions follow...)$N"
				    "$N"
				    "See the Timing Diagrams and state tables in the Reference$N"
				    "Manual for details on the state machine.$N"
				    "$N"
				    "On Prestart Horn - Sound the horn for the configured time.$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: [XIC(Wrk_StartHorn) TON(Wrk_StartHornT,?,?) TON(Wrk_StartHornT,?,?) ,XIC(Wrk_StartHornT.DN) OTU(Wrk_StartHorn) ];
				N: XIC(Wrk_StartHorn)[XIO(Wrk_State.0) MOV(14,Wrk_State) ,XIC(Wrk_State.0) MOV(15,Wrk_State) ];
				RC: "STATE 14:  SOUNDING HORN WITH OUTPUT OFF$N"
				    "#####  V4.10.01  2019-10-16:  Added state.  Corrected operation of state machine with alert horn.  #####";
				N: EQU(Wrk_State,14)[XIC(Wrk_Cmd.0) OTU(Wrk_StartHorn) MOV(0,Wrk_State) ,XIO(Wrk_StartHorn) [XIC(Wrk_Cmd.1) MOV(2,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(6,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(4,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(8,Wrk_State) ] ];
				RC: "STATE 15:  SOUNDING HORN WITH OUTPUT ON$N"
				    "$N"
				    "#####  V4.10.01  2019-10-16:  Added state.  Corrected operation of state machine with alert horn.  #####";
				N: EQU(Wrk_State,15)[XIC(Wrk_Cmd.1) OTU(Wrk_StartHorn) MOV(1,Wrk_State) ,XIO(Wrk_StartHorn) [XIC(Wrk_Cmd.0) MOV(3,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(5,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(7,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(9,Wrk_State) ] ];
				RC: "STATE 0:  Turned OFF";
				N: EQU(Wrk_State,0)[XIC(Wrk_Cmd.1) MOV(2,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(6,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(4,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(8,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 1:  Turned ON";
				N: EQU(Wrk_State,1)[XIC(Wrk_Cmd.0) MOV(3,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(5,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(7,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(9,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 2:  ON-DELAY when commanded ON";
				N: EQU(Wrk_State,2)[XIC(Wrk_Cmd.0) MOV(0,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(6,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(4,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(8,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 3:  OFF-DELAY when commanded OFF$N"
				    "";
				N: EQU(Wrk_State,3)[XIC(Wrk_Cmd.1) MOV(1,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(5,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(7,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(9,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 4:  ON-DELAY when commanded PULSE ON$N"
				    "";
				N: EQU(Wrk_State,4)[XIC(Wrk_Cmd.0) XIO(Cfg_CompletePulse) MOV(0,Wrk_State) ,XIC(Wrk_Cmd.1) MOV(2,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(6,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(8,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 5:  OFF-DELAY when commanded PULSE OFF$N"
				    "";
				N: EQU(Wrk_State,5)[XIC(Wrk_Cmd.0) MOV(3,Wrk_State) ,XIC(Wrk_Cmd.1) XIO(Cfg_CompletePulse) MOV(1,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(7,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(9,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 6:  PULSE OFF TIME when commanded PULSE OFF$N"
				    "";
				N: EQU(Wrk_State,6)[XIC(Wrk_Cmd.0) MOV(0,Wrk_State) ,XIC(Wrk_Cmd.1) XIO(Cfg_CompletePulse) MOV(2,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(4,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(10,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 7:  PULSE ON TIME when commanded PULSE ON";
				N: EQU(Wrk_State,7)[XIC(Wrk_Cmd.0) XIO(Cfg_CompletePulse) MOV(3,Wrk_State) ,XIC(Wrk_Cmd.1) MOV(1,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(5,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(11,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 8:  ON-DELAY when commanded PULSE CONTINUOUS$N"
				    "";
				N: EQU(Wrk_State,8)[XIC(Wrk_Cmd.0) XIO(Cfg_CompletePulse) MOV(0,Wrk_State) ,XIC(Wrk_Cmd.1) MOV(2,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(6,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(4,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 9:  OFF-DELAY when commanded PULSE CONTINUOUS$N"
				    "$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: EQU(Wrk_State,9)[XIC(Wrk_Cmd.0) MOV(3,Wrk_State) ,XIC(Wrk_Cmd.1) XIO(Cfg_CompletePulse) MOV(1,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(5,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(7,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 10:  OFF PULSE TIME when commanded PULSE CONTINUOUS$N"
				    "";
				N: EQU(Wrk_State,10)[XIC(Wrk_Cmd.0) MOV(0,Wrk_State) ,XIC(Wrk_Cmd.1) [XIO(Cfg_CompletePulse) MOV(2,Wrk_State) ,XIC(Cfg_CompletePulse) MOV(12,Wrk_State) ] ,XIC(Wrk_Cmd.2) MOV(6,Wrk_State) ,XIC(Wrk_Cmd.3) [XIO(Cfg_CompletePulse) MOV(4,Wrk_State) ,XIC(Cfg_CompletePulse) MOV(12,Wrk_State) ] ,JMP(DelayTimers) ];
				RC: "STATE 11:  ON PULSE TIME when commanded PULSE CONTINUOUS$N"
				    "";
				N: EQU(Wrk_State,11)[XIC(Wrk_Cmd.0) [XIO(Cfg_CompletePulse) MOV(3,Wrk_State) ,XIC(Cfg_CompletePulse) MOV(13,Wrk_State) ] ,XIC(Wrk_Cmd.1) MOV(1,Wrk_State) ,XIC(Wrk_Cmd.2) [XIO(Cfg_CompletePulse) MOV(5,Wrk_State) ,XIC(Cfg_CompletePulse) MOV(13,Wrk_State) ] ,XIC(Wrk_Cmd.3) MOV(7,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 12:  OFF TIME when COMPLETING OFF PULSE$N"
				    "";
				N: EQU(Wrk_State,12)[XIC(Wrk_Cmd.0) MOV(0,Wrk_State) ,XIC(Wrk_Cmd.1) XIO(Cfg_CompletePulse) MOV(2,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(6,Wrk_State) ,XIC(Wrk_Cmd.3) XIO(Cfg_CompletePulse) MOV(4,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(10,Wrk_State) ,JMP(DelayTimers) ];
				RC: "STATE 13:  ON TIME when COMPLETING OFF PULSE$N"
				    "";
				N: EQU(Wrk_State,13)[XIC(Wrk_Cmd.0) XIO(Cfg_CompletePulse) MOV(3,Wrk_State) ,XIC(Wrk_Cmd.1) MOV(1,Wrk_State) ,XIC(Wrk_Cmd.2) XIO(Cfg_CompletePulse) MOV(5,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(7,Wrk_State) ,XIC(Wrk_Cmd.4) MOV(11,Wrk_State) ,JMP(DelayTimers) ];
				RC: "============================================================$N"
				    "ON-DELAY, OFF-DELAY TIMERS$N"
				    "============================================================$N"
				    "The TON timers here are used to check for on-delay / off-delay in each of the$N"
				    "delaying states, based on the state entering the scan or the state determined$N"
				    "in the transitions above.  (If a delay time is zero, we transition immediately.)$N"
				    "$N"
				    "@@@@@  Each TON is doubled to ensure it sets or clears the  @@@@@$N"
				    "@@@@@  .DN bit the same scan if the timer preset is zero.  @@@@@$N"
				    "The Timers will be disabled while Horn is active, preventing change of state$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: LBL(DelayTimers)[[EQU(Wrk_State,2) ,EQU(Wrk_State,4) ,EQU(Wrk_State,8) ] TON(Wrk_OnDelayT,?,?) TON(Wrk_OnDelayT,?,?) ,[EQU(Wrk_State,3) ,EQU(Wrk_State,5) ,EQU(Wrk_State,9) ] TON(Wrk_OffDelayT,?,?) TON(Wrk_OffDelayT,?,?) ];
				RC: "If this object is in a PULSING state (6=PulseOFF, 7=PulseON, 8-13=PulseCONTINUOUS),$N"
				    "and if the current state$'s pulse time is configured to a ZERO preset,$N"
				    "revert to the current ON or OFF state (and command).";
				N: GEQ(Wrk_State,6)[XIO(Wrk_State.0) EQU(Wrk_OffPulseT.PRE,0) [XIC(Wrk_Cmd.3) ,XIC(Wrk_Cmd.4) ] MOV(0,Wrk_State) MOV(1,Wrk_Cmd) ,XIC(Wrk_State.0) EQU(Wrk_OnPulseT.PRE,0) [XIC(Wrk_Cmd.2) ,XIC(Wrk_Cmd.4) ] MOV(1,Wrk_State) MOV(2,Wrk_Cmd) ]JMP(PulseTimers);
				RC: "============================================================$N"
				    "ON-DELAY, OFF-DELAY TRANSITIONS$N"
				    "============================================================$N"
				    "These rungs check for timer-done based transitions.$N"
				    "Checks are done here to properly handle transitions for timers$N"
				    "with ZERO presets.$N"
				    "$N"
				    "STATE 2: ON-DELAY when commanded ON";
				N: EQU(Wrk_State,2)[XIC(Wrk_Cmd.1) XIC(Wrk_OnDelayT.DN) MOV(1,Wrk_State) ,JMP(PulseTimers) ];
				RC: "STATE 3:  OFF-DELAY when commanded OFF";
				N: EQU(Wrk_State,3)[XIC(Wrk_Cmd.0) XIC(Wrk_OffDelayT.DN) MOV(0,Wrk_State) ,JMP(PulseTimers) ];
				RC: "STATE 4:  ON-DELAY when commanded PULSE ON";
				N: EQU(Wrk_State,4)[[XIC(Wrk_Cmd.0) ,XIC(Wrk_Cmd.3) ] XIC(Wrk_OnDelayT.DN) MOV(7,Wrk_State) ,JMP(PulseTimers) ];
				RC: "STATE 5:  OFF-DELAY when commanded PULSE OFF";
				N: EQU(Wrk_State,5)[[XIC(Wrk_Cmd.1) ,XIC(Wrk_Cmd.2) ] XIC(Wrk_OffDelayT.DN) MOV(6,Wrk_State) ,JMP(PulseTimers) ];
				RC: "STATE 8:  ON-DELAY when commanded PULSE CONTINUOUS";
				N: EQU(Wrk_State,8)[[XIC(Wrk_Cmd.0) ,XIC(Wrk_Cmd.4) ] XIC(Wrk_OnDelayT.DN) MOV(11,Wrk_State) ,JMP(PulseTimers) ];
				RC: "STATE 9:  OFF-DELAY when commanded PULSE CONTINUOUS";
				N: EQU(Wrk_State,9)[[XIC(Wrk_Cmd.1) ,XIC(Wrk_Cmd.4) ] XIC(Wrk_OffDelayT.DN) MOV(10,Wrk_State) ,JMP(PulseTimers) ];
				RC: "============================================================$N"
				    "PULSE STATE TIMERS$N"
				    "============================================================$N"
				    "The TON timers here are used to check for pulse complete in each of the$N"
				    "pulsing states, based on the state entering the scan or the state determined$N"
				    "in the transitions above.  (If a pulse time is zero, we transition immediately.)$N"
				    "$N"
				    "@@@@@  Each TON is doubled to ensure it sets or clears the  @@@@@$N"
				    "@@@@@  .DN bit the same scan if the timer preset is zero.  @@@@@";
				N: LBL(PulseTimers)[[EQU(Wrk_State,6) ,EQU(Wrk_State,10) ,EQU(Wrk_State,12) ] TON(Wrk_OffPulseT,?,?) TON(Wrk_OffPulseT,?,?) ,[EQU(Wrk_State,7) ,EQU(Wrk_State,11) ,EQU(Wrk_State,13) ] TON(Wrk_OnPulseT,?,?) TON(Wrk_OnPulseT,?,?) ];
				RC: "STATE 6:  PULSE OFF TIME when commanded PULSE OFF$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: EQU(Wrk_State,6)[[XIC(Wrk_Cmd.1) ,XIC(Wrk_Cmd.2) ] XIC(Wrk_OffPulseT.DN) MOV(2,Wrk_Cmd) MOV(1,Wrk_State) ,JMP(Output) ];
				RC: "STATE 7:  PULSE ON TIME when commanded PULSE ON$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: EQU(Wrk_State,7)[[XIC(Wrk_Cmd.0) ,XIC(Wrk_Cmd.3) ] XIC(Wrk_OnPulseT.DN) MOV(1,Wrk_Cmd) MOV(0,Wrk_State) ,JMP(Output) ];
				RC: "STATE 10:  OFF PULSE TIME when commanded PULSE CONTINUOUS$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: EQU(Wrk_State,10)[XIC(Wrk_Cmd.4) XIC(Wrk_OffPulseT.DN) MOV(11,Wrk_State) ,JMP(Output) ];
				RC: "STATE 11:  ON PULSE TIME when commanded PULSE CONTINUOUS$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: EQU(Wrk_State,11)[XIC(Wrk_Cmd.4) XIC(Wrk_OnPulseT.DN) MOV(10,Wrk_State) ,JMP(Output) ];
				RC: "STATE 12:  OFF TIME when COMPLETING OFF PULSE";
				N: EQU(Wrk_State,12)[XIC(Wrk_OffPulseT.DN) [XIC(Wrk_Cmd.1) MOV(1,Wrk_State) ,XIC(Wrk_Cmd.3) MOV(7,Wrk_State) ] ,JMP(Output) ];
				RC: "STATE 13:  ON TIME when COMPLETING OFF PULSE";
				N: EQU(Wrk_State,13)[XIC(Wrk_OnPulseT.DN) [XIC(Wrk_Cmd.0) MOV(0,Wrk_State) ,XIC(Wrk_Cmd.2) MOV(6,Wrk_State) ] ,JMP(Output) ];
				RC: "Clear the current Command if the DOut reaches a terminal state (OFF or ON).$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Corrected operation of state machine with alert horn.  #####";
				N: LBL(Output)[XIC(Wrk_Cmd.0) EQU(Wrk_State,0) CLR(Wrk_Cmd) ,XIC(Wrk_Cmd.1) EQU(Wrk_State,1) CLR(Wrk_Cmd) ];
				RC: "============================================================$N"
				    "OUTPUT GENERATION$N"
				    "============================================================$N"
				    "If the Device is NOT SIMULATED, generate the appropriate output.$N"
				    "From the design of the State Machine, all ODD Actual States have the$N"
				    "output ENERGIZED.  So just copy the least significant bit out!$N"
				    "#####  V4.10.00  2019-03-08:  Added audible alert on commanded energize/state change.  #####";
				N: [XIC(Wrk_State.0) [XIO(Inp_Sim) OTE(Out) ,OTE(Sts_Out) ] ,XIC(Wrk_StartHorn) [XIO(Inp_Sim) OTE(Out_Horn) ,OTE(Sts_Horn) ] ];
				RC: "============================================================$N"
				    "SIMULATION AND FAIL TIMERS$N"
				    "============================================================$N"
				    "These rungs START the timers that are based on the determined output state.$N"
				    "$N"
				    "This rung starts the OFF state timers.";
				N: XIO(Sts_Out)TON(Wrk_OffT,?,?)TON(Wrk_SimOffT,?,?);
				RC: "And this rung starts the ON State timers.";
				N: XIC(Sts_Out)TON(Wrk_OnT,?,?)TON(Wrk_SimOnT,?,?);
				RC: "============================================================$N"
				    "REMAINING DEVICE STATUS$N"
				    "============================================================$N"
				    "This device is PULSING if any of the Pulse commands has been issued$N"
				    "(and, for single pulses, not completed):$N"
				    "ON PULSE, OFF PULSE or CONTINUOUS PULSE";
				N: [XIC(Wrk_Cmd.2) ,XIC(Wrk_Cmd.3) ,XIC(Wrk_Cmd.4) ]OTE(Sts_Pulsing);
				RC: "============================================================$N"
				    "PULSE STATE TIMERS$N"
				    "============================================================$N"
				    "The timers here are used to START timing immedately for each of the$N"
				    "given states THIS SCAN.";
				N: [[EQU(Wrk_State,6) ,EQU(Wrk_State,10) ,EQU(Wrk_State,12) ] TON(Wrk_OffPulseT,?,?) ,[EQU(Wrk_State,7) ,EQU(Wrk_State,11) ,EQU(Wrk_State,13) ] TON(Wrk_OnPulseT,?,?) ];
				RC: "============================================================$N"
				    "DEVICE ENUMERATED VALUES$N"
				    "============================================================$N"
				    "Wrk_Cmd is the command currently being processed:$N"
				    "0 = None$N"
				    "1 = State 0$N"
				    "2 = State 1$N"
				    "3 = State 2$N"
				    "4 = State 3$N"
				    "$N"
				    "Wrk_State is the internal state machine state:$N"
				    "0 = OFF$N"
				    "1 = ON$N"
				    "2 = ON command ON-DELAY$N"
				    "3 = OFF command OFF-DELAY$N"
				    "4 = PULSE ON command ON-DELAY$N"
				    "5 = PULSE OFF command OFF-DELAY$N"
				    "6 = PULSE ON command ON PULSE time$N"
				    "7 = PULSE OFF command OFF PULSE time$N"
				    "8 = PULSE CONTINUOUS command ON-DELAY$N"
				    "9 = PULSE CONTINUOUS command OFF-DELAY$N"
				    "10 = PULSE CONTINUOUS command OFF PULSE time$N"
				    "11 = PULSE CONTINUOUS command ON PULSE time$N"
				    "12 = OFF PULSE completion time$N"
				    "13 = ON PULSE completion time";
				N: [MOV(Wrk_State,Val_State) ,EQU(Wrk_Cmd,0) CLR(Val_Cmd) ,XIC(Wrk_Cmd.0) MOV(1,Val_Cmd) ,XIC(Wrk_Cmd.1) MOV(2,Val_Cmd) ,XIC(Wrk_Cmd.2) MOV(3,Val_Cmd) ,XIC(Wrk_Cmd.3) MOV(4,Val_Cmd) ,XIC(Wrk_Cmd.4) MOV(5,Val_Cmd) ];
				RC: "Val_Sts is the current device status, as determined by this AOI,$N"
				    "based on its knowledge of commands executed and feedback.$N"
				    "(This is the status that should be monitored by, for example, FT Historian.)$N"
				    "0 = Off$N"
				    "1 = On$N"
				    "2 = Pulse Off$N"
				    "3 = Pulse On$N"
				    "4 = Pulse Continuous$N"
				    "5 = Turning On$N"
				    "6 = Turning Off$N"
				    "7 = Horn$N"
				    "33 = Out of Service (here or in EnableInFalse routine)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02: Using P_CmdSrc, Disabled replaced by Out of Service.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Added Horn Status.  #####";
				N: XIO(Sts_Hand)[XIO(Wrk_StartHorn) [EQU(Wrk_Cmd,0) [EQU(Wrk_State,0) CLR(Val_Sts) ,EQU(Wrk_State,1) MOV(1,Val_Sts) ] ,XIC(Wrk_Cmd.2) MOV(2,Val_Sts) ,XIC(Wrk_Cmd.3) MOV(3,Val_Sts) ,XIC(Wrk_Cmd.4) MOV(4,Val_Sts) ,XIC(Wrk_Cmd.0) MOV(5,Val_Sts) ,XIC(Wrk_Cmd.1) MOV(6,Val_Sts) ] ,XIC(Wrk_StartHorn) MOV(7,Val_Sts) ];
				RC: "============================================================$N"
				    "OPERATOR COMMAND READIES$N"
				    "============================================================$N"
				    "$N"
				    "Ready to TURN OFF if in Operator Manual, NOT in the OFF target state, and Interlocks are OK.$N"
				    "Ready to TURN ON if in Operator or Maintenancel, NOT in the ON target state, and Interlocks and permissives are OK.$N"
				    "$N"
				    "Similar logic applies to the PULSE ON, PULSE OFF and CONTINUOUS PULSE readies.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Added option: Cfg_HasPulse.  #####";
				N: XIO(Wrk_NotRdy)[XIO(Sts_NotRdy) ,XIC(Cfg_OCmdResets) ][[XIC(Sts_Oper) ,XIC(Sts_Maint) ,XIC(Cfg_OperOffPrio) ] XIO(Wrk_Cmd.0) NEQ(Val_Sts,0) OTE(ORdy_Off) ,[XIC(Sts_Oper) ,XIC(Sts_Maint) ] XIC(Wrk_PermOK) [XIO(Wrk_Cmd.1) NEQ(Val_Sts,1) OTE(ORdy_On) ,XIC(Cfg_HasPulse) [XIO(Wrk_Cmd.2) NEQ(Val_Sts,2) NEQ(Val_Sts,0) NEQ(Wrk_OffPulseT.PRE,0) OTE(ORdy_OffPulse) ,XIO(Wrk_Cmd.3) NEQ(Val_Sts,3) NEQ(Val_Sts,1) NEQ(Wrk_OnPulseT.PRE,0) OTE(ORdy_OnPulse) ,XIO(Wrk_Cmd.4) NEQ(Val_Sts,4) NEQ(Wrk_OffPulseT.PRE,0) NEQ(Wrk_OnPulseT.PRE,0) OTE(ORdy_ContPulse) ] ] ];
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "The various alarms are ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1), EXCEPT:$N"
				    "* If the device DOES NOT HAVE ANY FEEDBACKS, the On Fail and Off Fail$N"
				    "alarms will never occur and should not exist.  (If either feedback exists, $N"
				    "the Fail alarm must be allowed to exist.)";
				N: [OTL(IntlkTrip.PCfg_AllowExist) OTL(IOFault.PCfg_AllowExist) ,[XIC(Cfg_HasOnFdbk) ,XIC(Cfg_HasOffFdbk) ] OTE(OnFail.PCfg_AllowExist) OTE(OffFail.PCfg_AllowExist) ];
				RC: "Let the Alarm instance know if this object is taken Out of Service$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Now using P_CmdSrc, including Out of Service.  #####";
				N: XIC(CmdSrc.Sts_OoS)OTE(OnFail.Inp_OoS)OTE(OffFail.Inp_OoS)OTE(IntlkTrip.Inp_OoS)OTE(IOFault.Inp_OoS);
				RC: "Handle Failed to Confirm Output ON Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(OnFail);
				RC: "Handle Failed to Confirm Output OFF Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(OffFail);
				RC: "Handle Interlock Trip Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IntlkTrip);
				RC: "Handle I/O Fault Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IOFault);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q box on the graphic symbol).";
				N: [XIC(OnFail.Sts_AlmInh) ,XIC(OffFail.Sts_AlmInh) ,XIC(IntlkTrip.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "This rung generates a summary Bad Config status, simply an OR of the individual bits provided above$N"
				    "(in the Configuration handling section).";
				N: [XIC(Nrdy_CfgErr) ,[XIC(OnFail.Sts_Err) ,XIC(OffFail.Sts_Err) ,XIC(IntlkTrip.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "Val_Fault is the current device fault status, as determined by this AOI,$N"
				    "based on its knowledge of commands executed and feedback.$N"
				    "(This is the fault status that should be monitored by, for example, FT Historian.)$N"
				    "0 = None$N"
				    "16 = Feedback Fault$N"
				    "32 = I/O Fault (from Input)$N"
				    "34 = Configuration Error";
				N: [CLR(Wrk_Fault) ,[XIC(Sts_OnFail) ,XIC(Sts_OffFail) ] MOV(16,Wrk_Fault) ,[XIC(Sts_IOFault) ,XIC(Nrdy_IOFault) ] MOV(32,Wrk_Fault) ,XIC(Nrdy_CfgErr) MOV(34,Wrk_Fault) ,MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [CLR(Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: MOV(SrcQ_IO,SrcQ);
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for reset or ack required:$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count.  #####";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) ,GRT(OnFail.Val_Notify,Wrk_Notify) MOV(OnFail.Val_Notify,Wrk_Notify) ,GRT(OffFail.Val_Notify,Wrk_Notify) MOV(OffFail.Val_Notify,Wrk_Notify) ,GRT(IntlkTrip.Val_Notify,Wrk_Notify) MOV(IntlkTrip.Val_Notify,Wrk_Notify) ,GRT(IOFault.Val_Notify,Wrk_Notify) MOV(IOFault.Val_Notify,Wrk_Notify) ,[XIC(OnFail.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(OffFail.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IntlkTrip.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IOFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTE(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_Notify,Val_NotifyAll) MOV(Wrk_UnackAlmC,Val_UnackAlmC) ];
				RC: "This rung identifies:$N"
				    "* if a latched Shed condition requires a reset in order to run the motor;$N"
				    "* if that reset or any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(OnFail.Sts_RdyAck) ,XIC(OffFail.Sts_RdyAck) ,XIC(IntlkTrip.Sts_RdyAck) ,XIC(IOFault.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(OnFail.Sts_RdyReset) ,XIC(OffFail.Sts_RdyReset) ,XIC(IntlkTrip.Sts_RdyReset) ,XIC(IOFault.Sts_RdyReset) ,XIC(Nrdy_PrioOff) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) XIO(Sts_IOFault) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear Ownershp, clear $Qlurking$Q Commands, de-energize output")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, set the Ownership to NO OWNER (0).";
				N: CLR(PSet_Owner)CLR(Val_Owner);
				RC: "$QLurking$Q Commands not handled elsewhere are cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Command Source and Commands.  #####";
				N: [OTU(OCmd_On) OTU(OCmd_Off) OTU(OCmd_OnPulse) OTU(OCmd_OffPulse) OTU(OCmd_ContPulse) ,OTU(XCmd_On) OTU(XCmd_Off) OTU(XCmd_OnPulse) OTU(XCmd_OffPulse) OTU(XCmd_ContPulse) ,OTU(PCmd_On) OTU(PCmd_Off) OTU(PCmd_OnPulse) OTU(PCmd_OffPulse) OTU(PCmd_ContPulse) ,OTU(MCmd_Bypass) OTU(MCmd_Check) ,CLR(Inp_OvrdCmd) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####";
				N: [OTU(ORdy_On) OTU(ORdy_Off) OTU(ORdy_OnPulse) OTU(ORdy_OffPulse) OTU(ORdy_ContPulse) ,OTU(MRdy_Bypass) OTU(MRdy_Check) ,OTU(ORdy_Reset) OTU(ORdy_ResetAckAll) ];
				RC: "Clear the latched Shed faults.";
				N: OTU(Nrdy_PrioOff)OTU(Nrdy_Fail)OTU(Nrdy_IOFault);
				RC: "Output is cleared on Prescan.";
				N: [OTU(Out) OTU(Sts_Out) ,OTU(Wrk_StartHorn) OTU(Out_Horn) OTU(Sts_Horn) ];
				RC: "Show the enumerated device command as NONE.$N"
				    "Show the enumerated device status as POWERUP / UNKNOWN$N"
				    "Show the enumerated internal state as DE-ENERGIZED.$N"
				    "$N"
				    "#####  V3.5-08  2017-10-11:  Reworked internal state machine logic.  #####";
				N: CLR(Wrk_Cmd)CLR(Val_Cmd)CLR(Wrk_State)CLR(Val_State)CLR(Val_Sts);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_Motor (Description := "Single Speed Motor",
	                                       Revision := "4.10",
	                                       RevisionExtension := ".01 Release",
	                                       RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                       Vendor := "Rockwell Automation",
	                                       ExecutePrescan := Yes,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := Yes,
	                                       CreatedDate := "2008-03-27T19:50:50.098Z",
	                                       CreatedBy := "Not Available",
	                                       EditedDate := "2020-12-08T03:31:53.950Z",
	                                       EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                       SoftwareRevision := "v32.02",
	                                       AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction controls and monitors a single-speed motor$N(FVNR, soft-start, etc.) and provides:$N  * Monitoring of run feedback, display of actual motor status$N  * Detection of Failure to Start, Failure to Stop$N  * Monitoring of a Permissive condition to allow starting$N  * Monitoring of an Interlock condition to stop / prevent starting$N  * Audible warning on start with configurable delay time$N  * Simulation, providing feedback of a working motor while disabling outputs$N  * Monitoring of I/O communication faults$N  * Alarms for Fail to Start, Fail to Stop, Interlock Trip, I/O Fault$N  * Options to shed (stop motor) on Fail to Start or I/O Fault$N  * Operation from Hand, Maintenance, Override, Program and Operator command sources$N  * Option to automatically reset faults and alarms when operator commands motor to start or stop$N  * Supports HMI $Qbreadcrumbs$Q for Alarm Inhibited, Bad Configuration,$N     Not Ready, Maintenance Bypass Active$N  * $QAvailable$Q status for use by automation logic to know whether motor can be controlled by other objects.$N$NCommand Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$NCommand Sources: Operator, Program, External, Override, Maintenance, Out of$NService, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$NSee 4.10 Release Notes for details.$N* Corrected handling of Jog and Horn on shed conditions.$N* Modified to lock out jog when jog time expires until jog commands are cleared.$N* Corrected handling of outputs in Hand.$N* Modified to account for overlapping Horn and Jog times$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.02)$NSee 4.10 Release Notes for details.$N* Changed Sts_Available to use input availability from interlocks.$N* Added Horn Status and Horn Inhibit.$N* Updated to P_CmdSrc V4.10.00.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.00 Release Notes for details.$N* Corrected handling Allow Local when horn is enabled.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-11)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added jog function.$N* Added notify and unack count rollup for Channel object.$N* Changed $QMode$Q to $QCommand Source$Q using P_CmdSrc 4.00.00$N   added External Commands (XCmds) and Settings (XSet).$N* Added output for audible alert prior to motor starting when commanded.$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* Aligned ready bit naming with command bit names.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N* Changed delay / time configuration items to REAL seconds.$N* Updated Val_Sts to common enumeration across all motors and drives.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_RunFdbk : BOOL (Description := "Input Signal: RUN feedback from motor",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Inp_PermOK : BOOL (Description := "1=Permissives OK, motor can start",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 1);
			Inp_NBPermOK : BOOL (Description := "1=Non-Bypassable Permissives OK, motor can start",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 1);
			Inp_IntlkOK : BOOL (Description := "1=Interlocks OK, motor can start/run",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 1);
			Inp_NBIntlkOK : BOOL (Description := "1=Non-Bypassable Interlocks OK, motor can start/run",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_IntlkAvail : BOOL (Description := "1 = Interlock Availibility OK",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Inp_OvldNotify : DINT (Description := "Related Overload object alarm prio and ack status (enum)",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Inp_IOFault : BOOL (Description := "Input Communication Status 0=OK, 1=fail",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Sim : BOOL (Description := "1=Simulate working motor; 0=Start/Stop/ Monitor actual motor",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Inp_Hand OF CmdSrc.Inp_Hand (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_Ovrd OF CmdSrc.Inp_Ovrd (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_OvrdCmd : DINT (Description := "Override Mode Command: 0=None, 1=Stop, 2=Start",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_ExtInh OF CmdSrc.Inp_ExtInh (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_HornInh : BOOL (Description := "1 = Inhibit audible alert, 0 = Alllow audible alert",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Reset : BOOL (Description := "1=Reset Shed Latches and Cleared Alarms",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_HasJog : BOOL (Description := "1=Motor Jog Command enabled/visible, 0=Motor Jog Command not allowed",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_HasRunFdbk : BOOL (Description := "1=Motor provides run feedback",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_UseRunFdbk : BOOL (Description := "1=Motor run feedback should be used for failure checking",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_AllowLocal : BOOL (Description := "1=Allow Local Start/Stop without alarm, 0=Start/Stop from HMI/prog only",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasPermObj : BOOL (Description := "1=Enable navigation to permissive object",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasIntlkObj : BOOL (Description := "1=Enable navigation to interlock object",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HasResInhObj : BOOL (Description := "1=Enable navigation to restart inhibit object",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_HasRunTimeObj : BOOL (Description := "1=Enable navigation to run time object",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_HasOvldObj : BOOL (Description := "1=Enable navigation to overload object",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_OperStopPrio : BOOL (Description := "1=OCmd_Stop any time, 0=OCmd_Stop only when Oper selected",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Cfg_ExtStopPrio : BOOL (Description := "1=XCmd_Stop any time, 0=XCmd_Stop only when Ext selected",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_OCmdResets : BOOL (Description := "1=New motor OCmd resets shed latches and cleared alarms, 0=OCmdReset req$'d.",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_XCmdResets : BOOL (Description := "1=New motor XCmd resets shed latches and cleared alarms, 0=XCmdReset req$'d.",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_OvrdPermIntlk : BOOL (Description := "1=Override ignores Bypassable Perm/ Intlk; 0=always use Perm/Intlk",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_ShedOnFailToStart : BOOL (Description := "1=Stop Motor and Alarm on Fail to Start; 0=Alarm only on Fail to Start",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 1);
			Cfg_ShedOnIOFault : BOOL (Description := "1=Stop Motor and Alarm on I/O Fault; 0=Alarm only on I/O Fault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1);
			Cfg_HasFailToStartAlm OF FailToStart.Cfg_Exists (Description := "1=Fail to Start Alarm exists and will be checked",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_HasFailToStopAlm OF FailToStop.Cfg_Exists (Description := "1=Fail to Stop Alarm exists and will be checked",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_HasIntlkTripAlm OF IntlkTrip.Cfg_Exists (Description := "1=Interlock Trip Alarm exists and will be checked",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_HasIOFaultAlm OF IOFault.Cfg_Exists (Description := "1=I/O Fault Alarm exists and will be checked",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_FailToStartResetReqd OF FailToStart.Cfg_ResetReqd (Description := "1=Reset required to clear Fail to Start Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			Cfg_FailToStopResetReqd OF FailToStop.Cfg_ResetReqd (Description := "1=Reset required to clear Fail to Stop Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			Cfg_IntlkTripResetReqd OF IntlkTrip.Cfg_ResetReqd (Description := "1=Reset required to clear Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_IOFaultResetReqd OF IOFault.Cfg_ResetReqd (Description := "1=Reset required to clear I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_FailToStartAckReqd OF FailToStart.Cfg_AckReqd (Description := "1=Acknowledge required for Fail to Start Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_FailToStopAckReqd OF FailToStop.Cfg_AckReqd (Description := "1=Acknowledge required for Fail to Stop Alarm",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_IntlkTripAckReqd OF IntlkTrip.Cfg_AckReqd (Description := "1=Acknowledge required for Interlock Trip Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_IOFaultAckReqd OF IOFault.Cfg_AckReqd (Description := "1=Acknowledge required for I/O Fault Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_FailToStartSeverity OF FailToStart.Cfg_Severity (Description := "Fail To Start Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			Cfg_FailToStopSeverity OF FailToStop.Cfg_Severity (Description := "Fail To Stop Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_IntlkTripSeverity OF IntlkTrip.Cfg_Severity (Description := "Interlock Trip Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_IOFaultSeverity OF IOFault.Cfg_Severity (Description := "I/O Fault Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_StartHornT : REAL (Description := "Time to sound audible on commanded start (sec) (0=disabled)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0.00000000e+000);
			Cfg_SimFdbkT : REAL (Description := "Feedback delay in Simulation (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 2.00000000e+000);
			Cfg_FailToStartT : REAL (Description := "Time after Start for running feedback before Fault (sec)",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 1.00000000e+001);
			Cfg_FailToStopT : REAL (Description := "Time after Stop for stopped feedback (=0) before Fault (sec)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 1.00000000e+001);
			Cfg_MaxJogT : REAL (Description := "Maximum jog time (sec, 0=unlimited)",
			                       Usage := Input,
			                       RADIX := Float,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0.00000000e+000);
			PSet_Owner : DINT (Description := "Program Owner Request ID (non-zero) or Release (zero)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_Start : BOOL (Description := "Program Command to Start Motor",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_Stop : BOOL (Description := "Program Command to Stop Motor",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			PCmd_Prog OF CmdSrc.PCmd_Prog (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Oper OF CmdSrc.PCmd_Oper (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Lock OF CmdSrc.PCmd_Lock (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Unlock OF CmdSrc.PCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Normal OF CmdSrc.PCmd_Normal (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Reset : BOOL (Description := "Program Command to ResetShed Latches and Cleared Alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_FailToStartAck OF FailToStart.PCmd_Ack (Description := "Program Command to Acknowledge Fail to Start Alarm",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			PCmd_FailToStartSuppress OF FailToStart.PCmd_Suppress (Description := "Program Command to Suppress Fail to Start Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_FailToStartUnsuppress OF FailToStart.PCmd_Unsuppress (Description := "Program Command to Unsuppress Fail to Start Alarm",
			                                      Usage := Input,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No);
			PCmd_FailToStartUnshelve OF FailToStart.PCmd_Unshelve (Description := "Program Command to Unshelve Fail to Start Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_FailToStopAck OF FailToStop.PCmd_Ack (Description := "Program Command to Acknowledge Fail to Stop Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			PCmd_FailToStopSuppress OF FailToStop.PCmd_Suppress (Description := "Program Command to Suppress Fail to Stop Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			PCmd_FailToStopUnsuppress OF FailToStop.PCmd_Unsuppress (Description := "Program Command to Unsuppress Fail to Stop Alarm",
			                                     Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			PCmd_FailToStopUnshelve OF FailToStop.PCmd_Unshelve (Description := "Program Comnmand to Unshelve Fail to Stop Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			PCmd_IntlkTripAck OF IntlkTrip.PCmd_Ack (Description := "Program Command to Acknowledge Interlock Trip Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_IntlkTripSuppress OF IntlkTrip.PCmd_Suppress (Description := "Program Command to Suppress Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IntlkTripUnsuppress OF IntlkTrip.PCmd_Unsuppress (Description := "Program Command to Unsuppress Interlock Trip Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_IntlkTripUnshelve OF IntlkTrip.PCmd_Unshelve (Description := "Program Command to Unshelve Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultAck OF IOFault.PCmd_Ack (Description := "Program Command to Acknowledge I/O Fault Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_IOFaultSuppress OF IOFault.PCmd_Suppress (Description := "Program Command to Suppress I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_IOFaultUnsuppress OF IOFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress I/O Fault Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultUnshelve OF IOFault.PCmd_Unshelve (Description := "Program Command to Unshelve I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			MCmd_Rel OF CmdSrc.MCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			OCmd_Unlock OF CmdSrc.OCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			XCmd_Start : BOOL (Description := "External Command to Start Motor",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			XCmd_Stop : BOOL (Description := "External Command to Stop Motor",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			XCmd_Jog : BOOL (Description := "External Command to Jog Motor",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			XCmd_Acq OF CmdSrc.XCmd_Acq (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Rel OF CmdSrc.XCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Reset : BOOL (Description := "External Command to reset shed latches and cleared alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Out_Run : BOOL (Description := "1=Run Motor, 0=Stop Motor",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Out_Start : BOOL (Description := "1=Start Motor, 0=Motor left in current state",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Out_Stop : BOOL (Description := "1=Stop Motor, 0=Motor left in current state",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Out_Horn : BOOL (Description := "1=Sound audible prior to commanded motor start",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			SrcQ_IO : DINT (Description := "Source and Quality of primary I/O (enumeration)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			SrcQ : DINT (Description := "Source and Quality of primary Val/Sts (enumeration)",
			                Usage := Output,
			                RADIX := Decimal,
			                Required := No,
			                Visible := No,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
			Val_Cmd : DINT (Description := "Device Command 0=None, 1=Stop, 2=Start",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fdbk : DINT (Description := "Device Feedback 0=Stopped, 1=Running",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Val_Sts : DINT (Description := "Device Sts: 0=? 1=Stopped 2=RunFwd 3=RunRev 4=RunSlow 5=StartFwd 6=StartRev 7=StartSlow 8=JogFwd 9=JogRev 10=Sopping",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fault : DINT (Description := "Device Fault Status 0=None, 16=Fail to Start, 17 = Fail to Stop, 32=I/O Fault, 34=Config Error",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : DINT (Description := "Highest Alarm prio and ack status this object + channel (enum)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : DINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_Owner : DINT (Description := "Current Object Owner ID (0=not owned)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Horn : BOOL (Description := "1=Motor Horn Active",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_Stopped : BOOL (Description := "1=Motor requested to stop and is confirmed stopped",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 1);
			Sts_Starting : BOOL (Description := "1=Motor requested to run and awaiting run feedback",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_Running : BOOL (Description := "1=Motor requested to run and is confirmed running",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_Stopping : BOOL (Description := "1=Motor requested to stop and awaiting stopped feedback",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_Jogging : BOOL (Description := "1=Motor requested to Jog",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_Available : BOOL (Description := "1=Motor available for control by automation (Prog)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Bypass : BOOL (Description := "1=Bypassable Interlocks and Permissives are Bypassed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_BypActive : BOOL (Description := "1=Bypassing Active (Bypassed or Maintenance)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_NotRdy : BOOL (Description := "1=Device Not Ready, see detail bits for reason",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_CfgErr : BOOL (Description := "1=Device Not Ready: Configuration Error",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Nrdy_Fail : BOOL (Description := "1=Device Not Ready: Device Failure (Shed Requires Reset)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Nrdy_Intlk : BOOL (Description := "1=Device Not Ready: Interlock Not OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_IOFault : BOOL (Description := "1=Device Not Ready: I/O Fault (Shed Requires Reset)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Nrdy_OoS : BOOL (Description := "1=Device Not Ready: Device is Out of Service",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Nrdy_Perm : BOOL (Description := "1=Device Not Ready: Permissive Not OK",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Nrdy_PrioStop : BOOL (Description := "1=Device Not Ready: Oper/Ext Priority Stop Requires Reset",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=A Maintenance Bypass is Active, display icon",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=An Alarm is Shelved, Disabled or Suppressed: display icon",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: Start/Stop Check timer preset (use 0 to 2147483)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_Sim : BOOL (Description := "1=Error in Config: Simulation timer preset (use 0 to 2147483)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time, Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Hand OF CmdSrc.Sts_Hand (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OoS OF CmdSrc.Sts_OoS (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Maint OF CmdSrc.Sts_Maint (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only);
			Sts_Ovrd OF CmdSrc.Sts_Ovrd (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_Ext OF CmdSrc.Sts_Ext (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Prog OF CmdSrc.Sts_Prog (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_ProgLocked OF CmdSrc.Sts_ProgLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Oper OF CmdSrc.Sts_Oper (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OperLocked OF CmdSrc.Sts_OperLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Normal OF CmdSrc.Sts_Normal (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_ExtReqInh OF CmdSrc.Sts_ExtReqInh (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_ProgReqInh OF CmdSrc.Sts_ProgReqInh (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_MAcqRcvd OF CmdSrc.Sts_MAcqRcvd (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_FailToStart OF FailToStart.Inp (Description := "1=Motor Failed to Start (one-shot)",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Alm_FailToStart OF FailToStart.Alm (Description := "1=Motor Fail to Start Alarm",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Ack_FailToStart OF FailToStart.Ack (Description := "1=Fail to Start Alarm has been acknowledged",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write);
			Sts_FailToStartDisabled OF FailToStart.Disabled (Description := "1=Fail to Start Alarm has been Disabled by Maintenance",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_FailToStartShelved OF FailToStart.Shelved (Description := "1=Fail to Start Alarm has been Shelved by Operator",
			                                  Usage := Output,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read/Write);
			Sts_FailToStartSuppressed OF FailToStart.Suppressed (Description := "1=Fail to Start Alarm has been Suppressed by Program",
			                                     Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No,
			                                     ExternalAccess := Read/Write);
			Sts_FailToStop OF FailToStop.Inp (Description := "1=Motor Failed to Stop",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Alm_FailToStop OF FailToStop.Alm (Description := "1=Motor Fail to Stop Alarm",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Ack_FailToStop OF FailToStop.Ack (Description := "1=Fail to Stop Alarm has been acknowledged",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write);
			Sts_FailToStopDisabled OF FailToStop.Disabled (Description := "1=Fail to Stop Alarm has been Disabled by Maintenance",
			                                  Usage := Output,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read/Write);
			Sts_FailToStopShelved OF FailToStop.Shelved (Description := "1=Fail to Stop Alarm has been Shelved by Operator",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_FailToStopSuppressed OF FailToStop.Suppressed (Description := "1=Fail to Stop Alarm has been Suppressed by Program",
			                                    Usage := Output,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No,
			                                    ExternalAccess := Read/Write);
			Sts_IntlkTrip OF IntlkTrip.Inp (Description := "1=Motor stopped by an Interlock NOT OK (one-shot)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Alm_IntlkTrip OF IntlkTrip.Alm (Description := "1=Alarm: Motor stopped by an Interlock NOT OK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Ack_IntlkTrip OF IntlkTrip.Ack (Description := "1=Interlock Trip Alarm has been acknowledged",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_IntlkTripDisabled OF IntlkTrip.Disabled (Description := "1=Interlock Trip Alarm has been Disabled by Maintenance",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_IntlkTripShelved OF IntlkTrip.Shelved (Description := "1=Interlock Trip Alarm has been Shelved by Operator",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_IntlkTripSuppressed OF IntlkTrip.Suppressed (Description := "1=Interlock Trip Alarm has been Suppressed by Program",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_IOFault OF IOFault.Inp (Description := "I/O Comm Fault Status (0=OK, 1=Bad)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Alm_IOFault OF IOFault.Alm (Description := "1=I/O Fault Alarm",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Ack_IOFault OF IOFault.Ack (Description := "1=I/O Fault Alarm has been acknowledged",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_IOFaultDisabled OF IOFault.Disabled (Description := "1=I/O Fault Alarm has been Disabled by Maintenance",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_IOFaultShelved OF IOFault.Shelved (Description := "1=I/O Fault Alarm has been Shelved by Operator",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_IOFaultSuppressed OF IOFault.Suppressed (Description := "1=I/O Fault Alarm has been Suppressed by Program",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			MRdy_Rel OF CmdSrc.MRdy_Rel (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			ORdy_Unlock OF CmdSrc.ORdy_Unlock (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only);
			P_Motor : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			CmdSrc : P_CmdSrc (Description := "Control / Command Source Selection",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[7649,0,0,1,0,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']]");
			IOFault : P_Alarm (Description := "I/O Fault Alarm",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			IntlkTrip : P_Alarm (Description := "Interlock Trip Alarm",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			FailToStop : P_Alarm (Description := "Motor Failed to Stop Alarm",
			                     ExternalAccess := Read/Write,
			                     DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Failed to Stop$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			FailToStart : P_Alarm (Description := "Motor Failed to Start Alarm",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Failed to Start$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[7,'P_Motor$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[13,'Motor Control$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[18,'Single Speed Motor$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_Run : BOOL (Description := "1=Motor should be $Qrunning$Q, 0=should be $Qstopped$Q",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_SimRunT : TIMER (Description := "Simulation Delay until Running",
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0]");
			Wrk_StopT : TIMER (Description := "Stop Check Timer",
			                    ExternalAccess := Read Only,
			                    DefaultData := "[0,0,0]");
			Wrk_StartT : TIMER (Description := "Start Check Timer",
			                     ExternalAccess := Read Only,
			                     DefaultData := "[0,0,0]");
			Wrk_SimStopT : TIMER (Description := "Simulation Delay until Stopped",
			                       ExternalAccess := None,
			                       DefaultData := "[0,0,0]");
			Wrk_RunFdbk : BOOL (Description := "Run Feedback based on mode, simulation, etc. 1=running",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_Notify : DINT (Description := "Buffer for building Val_Notify",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_Bypass : BOOL (Description := "Internal Bypassable Permissives and Interlocks are Bypassed flag",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_Cmd : DINT (Description := "Buffer for building Val_Cmd",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Sts : DINT (Description := "Buffer for building Val_Sts",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Fault : DINT (Description := "Buffer for building Val_Fault",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_Retrigger : BOOL (Description := "Maint Start issued while running or Stop while stopped",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			HMI_Type : STRING_16 (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[7,'P_Motor$00$00$00$00$00$00$00$00$00']");
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			Wrk_SrcQ : DINT (Description := "Register for building Source / Quality enumeration",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Val_Notify : DINT (Description := "Current Alarm Level and Acknowledgement (enumeration)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Wrk_RetrigONS : BOOL (Description := "Retrigger on Oper/Ext stop One-Shot Store",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_NotRdy : BOOL (Description := "Device Not Ready conditions excluding shed latches",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_StopInhT : TIMER (Description := "Local Stop Inhibit Timer",
			                       ExternalAccess := None,
			                       DefaultData := "[0,0,0]");
			Wrk_StartInhT : TIMER (Description := "Local Start Inhibit Timer",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			Wrk_NoLongerSim : BOOL (Description := "Switched from Simulated to Real Motor this scan",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			Wrk_UnackAlmC : DINT (Description := "Buffer for building Val_UnackAlmC",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_StartHorn : BOOL (Description := "1=Sound audible prior to commanded motor start",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_StartHornT : TIMER (Description := "Timer for audible alert or start",
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			Wrk_JogT : TIMER (Description := "Jog Timer",
			                   ExternalAccess := None,
			                   DefaultData := "[0,0,0]");
			Wrk_Jog : BOOL (Description := "1=Jog Motor, 0=Motor not jogging",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			OCmd_Stop : BOOL (Description := "Operator Command to Stop Motor",
			                    RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			OCmd_Start : BOOL (Description := "Operator Command to Start Motor",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			OCmd_ResetAckAll : BOOL (Description := "Oper Cmd to reset shed latches and cleared alarms, plus  Acknowledge alarms",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Oper Cmd to reset shed latches and cleared alarms",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			OCmd_Jog : BOOL (Description := "Operator Command to Jog motor (not cleared by instruction!)",
			                   RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			MCmd_Check : BOOL (Description := "Maintenance Command to Check (not bypass) all Interlocks and Permissives",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Bypass : BOOL (Description := "Maintenance Command to Bypass all Bypassable Interlocks and Permissives",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			Wrk_PermOK : BOOL (Description := "Permissives and NB Permissive OK",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			ORdy_ResetAckAll : BOOL (Description := "1=Ready for OCmd_ResetAckAll (enables HMI button)",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			ORdy_Jog : BOOL (Description := "1=Ready for OCmd_Jog (enables HMI button)",
			                   RADIX := Decimal,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			ORdy_Stop : BOOL (Description := "1=Ready for OCmd_Stop (enables HMI button)",
			                    RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			ORdy_Start : BOOL (Description := "1=Ready for OCmd_Start (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Check : BOOL (Description := "1=Ready for MCmd_Check (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Bypass : BOOL (Description := "1=Ready for MCmd_Bypass (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Out of Service is asserted; Outputs OFF; Run Status shown but Alarms inhibited")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    "Handle $QProgrammed Out of Servie$Q Selection using the standard$N"
				    "P_CmdSrc AOI (EnableInFalse Routine, false scan required!).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Changed P_Mode to P_CmdSrc.  #####";
				N: XIC(EnableIn)P_CmdSrc(CmdSrc);
				RC: "First-Come First-Served Ownership Arbitration still needs to happen, even when device is disabled.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "$QLurking$Q Operator and Program Commands are cleared.$N"
				    "(Lurking Acknowledge Commands are left to perform their action.)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Command Source and Commands. Added Jog function.  #####";
				N: [OTU(OCmd_Start) OTU(OCmd_Stop) OTU(OCmd_Jog) ,OTU(XCmd_Start) OTU(XCmd_Stop) OTU(XCmd_Jog) ,OTU(PCmd_Start) OTU(PCmd_Stop) ,OTU(MCmd_Bypass) OTU(MCmd_Check) ,CLR(Inp_OvrdCmd) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Command Source and Commands. Added Jog function.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [OTU(ORdy_Start) OTU(ORdy_Stop) OTU(ORdy_Jog) ,OTU(MRdy_Bypass) OTU(MRdy_Check) ,OTU(ORdy_ResetAckAll) OTU(ORdy_Reset) OTU(Sts_RdyAck) ];
				RC: "The Motor Status bits show the state of the motor,$N"
				    "regardless of Mode, EVEN IF OFF-SCAN!";
				N: XIO(Inp_Sim)XIC(Inp_RunFdbk)XIC(Cfg_UseRunFdbk)OTE(Sts_Running)MOV(1,Val_Fdbk);
				RC: "If the motor is not Running, it$'s Stopped.";
				N: XIO(Sts_Running)OTE(Sts_Stopped)CLR(Val_Fdbk);
				RC: "Reset the fault condition and simulation / command retrigger timers.";
				N: RES(Wrk_StartT)RES(Wrk_StopT)RES(Wrk_SimRunT)RES(Wrk_SimStopT);
				RC: "Set motor to Stop in Programmed Out of Service (PooS).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-03:  Added Jog function, Audible Alert on start.  #####";
				N: OTU(Wrk_Run)OTU(Wrk_Jog)OTU(Out_Start)OTL(Out_Stop)OTU(Out_Run)OTU(Out_Horn);
				RC: "Show the motor as Disabled and Not Ready, not Available, and with no$N"
				    "Maintenance Bypass breadcrumb.$N"
				    "Clear remaining Status bits.$N"
				    "Show the enumerated motor command as NONE.$N"
				    "Show the enumerated motor status as STOPPED or RUNNING.$N"
				    "Show the enumerated motor fault status as NONE.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  Added Jog function.  Updated Val_Sts to common enumeration across all motors and drives.  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added Horn Status.  #####";
				N: [OTL(Sts_NotRdy) OTU(Sts_Available) OTU(Sts_MaintByp) ,OTU(Nrdy_CfgErr) OTU(Nrdy_Fail) OTU(Nrdy_Intlk) ,OTL(Nrdy_OoS) OTU(Nrdy_IOFault) OTU(Nrdy_Perm) OTU(Nrdy_PrioStop) ,OTU(Sts_Starting) OTU(Sts_Stopping) OTU(Sts_Horn) ,XIC(Sts_Stopped) MOV(1,Val_Sts) ,XIC(Sts_Running) MOV(2,Val_Sts) ,CLR(Val_Cmd) CLR(Val_Fault) ];
				RC: "If the device is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then show the alarms as $QParent object out of service$Q.$N"
				    "Show the overall acknowledgement status.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Changed P_Mode to P_CmdSrc, added Out of Service.  #####";
				N: [OTL(FailToStart.Inp_OoS) P_Alarm(FailToStart) ,OTL(FailToStop.Inp_OoS) P_Alarm(FailToStop) ,OTL(IntlkTrip.Inp_OoS) P_Alarm(IntlkTrip) ,OTL(IOFault.Inp_OoS) P_Alarm(IOFault) ,CLR(Val_Notify) CLR(Val_NotifyAll) ,[XIC(FailToStart.Val_Notify.0) ,XIC(FailToStop.Val_Notify.0) ,XIC(IntlkTrip.Val_Notify.0) ,XIC(IOFault.Val_Notify.0) ] OTL(Val_Notify.0) OTL(Val_NotifyAll.0) ,[XIC(FailToStart.Sts_AlmInh) ,XIC(FailToStop.Sts_AlmInh) ,XIC(IntlkTrip.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ] OTE(Sts_AlmInh) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(1,Wrk_SrcQ) ,XIO(Cfg_HasRunFdbk) MOV(2,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: MOV(20,SrcQ);
		END_ROUTINE

		ROUTINE Logic (Description := "Normal Scan: control / monitor single speed motor")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_Motor:  PROCESS -- MOTOR (single speed, on/off)$N"
				    "============================================================$N"
				    "Revision 4.10.01 Release  2019-10-16:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-09:  Changed $QMode$Q to $QCommand Source$Q. Added audible alert$N"
				    "on commanded start. Changed Inf_ items to HMI_, and added Cfg_Area$N"
				    "for security. Added unacked alarm count. Added Jog function. Deleted$N"
				    "Cfg_PCmdClear; all Program Commands are now self-clearing.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyAck and Sts_ResetReqd for use by external objects.$N"
				    "Changed delay / time configuration items to REAL seconds.$N"
				    "Updated Val_Sts to common enumeration across all motors and drives.$N"
				    "V4.00.02  2018-10-30:  Corrected handling Allow Local when horn is enabled. $N"
				    "V4.10.00  2019-03-25:  Changed Sts_Available to use input availability from$N"
				    "interlocks. Added Horn Status, Horn Inhibit. Updated to$N"
				    "P_CmdSrc V4.10.00. Added Cfg_HasMoreObj.$N"
				    "V4.10.01  2019-10-16:  Corrected handling of Jog and Horn on shed conditions. Modified to lock out jog$N"
				    "when jog time expires until jog commands are cleared. Corrected handling of outputs$N"
				    "in Hand. Modified to account for overlapping Horn and Jog times$N"
				    "============================================================$N"
				    "This Instruction controls and monitors a single-speed motor$N"
				    "(FVNR, soft-start, etc.) and provides:$N"
				    "$N"
				    "*  Monitoring of run feedback, display of actual motor status$N"
				    "*  Detection of Failure to Start, Failure to Stop$N"
				    "*  Monitoring of a Permissive condition to allow starting$N"
				    "* Monitoring of an Interlock condition to stop / prevent starting$N"
				    "* Simulation, providing feedback of a working motor while disabling outputs$N"
				    "* Monitoring of I/O communication faults$N"
				    "* Alarms for Fail to Start, Fail to Stop, Interlock Trip, I/O Fault$N"
				    "* Options to shed (stop motor) on Fail to Start or I/O Fault$N"
				    "* Option to automatically reset faults and alarms when operator commands$N"
				    "motor to start or stop$N"
				    "* Supports HMI $Qbreadcrumbs$Q for Alarm Inhibited, Bad Configuration,$N"
				    "Not Ready, Maintenance Bypass Active$N"
				    "* $QAvailable$Q status for use by automation logic to know whether motor$N"
				    "can be controlled by other objects.$N"
				    "* Horn output for audible alert prior to starting motor.$N"
				    "$N"
				    "Command Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$N"
				    "Command Sources: Operator, External, Program, External, Override, Maintenance,$N"
				    "Out of Service, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)LOWER(Cfg_Desc,Cfg_Label)LOWER(Cfg_Tag,Cfg_Area)LOWER(HMI_Lib,HMI_Type);
				RC: "This rung handles received Command Source selection Inputs and Commands:$N"
				    "$N"
				    "NOTE:  All Commands for Command Source and Alarm are aliased directly to the$N"
				    "corresponding Commands in the contained P_CmdSrc and P_Alarm AOIs.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Changed P_Mode to P_CmdSrc.  #####";
				N: LBL(SkipText)P_CmdSrc(CmdSrc);
				RC: "This rung handles simple First-Come First-Served Ownership Arbitration.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "============================================================$N"
				    "CONFIGURATION PROCESSING$N"
				    "============================================================$N"
				    "If the device is configured to not HAVE device feedback input (engineer),$N"
				    "it cannot be USE the feedback for fail checking (maintenance).";
				N: XIO(Cfg_HasRunFdbk)OTU(Cfg_UseRunFdbk)OTU(Cfg_AllowLocal);
				RC: "These rungs get Configuration data (such as timer presets) and distribute as needed.$N"
				    "Note that some Configuration data are used directly in-place.$N"
				    "$N"
				    "Enter the time (in seconds) for the motor to successfully start before declaring a fault.$N"
				    "Enter the time (in seconds) for the motor to successfully stop before declaring a fault.$N"
				    "$N"
				    "If the timer preset calcuated wraps negative (more than 2.14... million seconds), then use a default$N"
				    "limit value and report Bad Configuration.  Note that a negative timer preset will fault the controller!!!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added audible alert prior to commanded start.  #####$N"
				    "#####  Added Jog function. Changed delay / time configuration items to REAL seconds.  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added Horn Inhibit.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to account for overlapping Horn and Jog times.  #####";
				N: [[MUL(Cfg_FailToStartT,1000.0,Wrk_StartT.PRE) XIC(Wrk_StartT.PRE.31) MOV(2147483647,Wrk_StartT.PRE) ,MUL(Cfg_FailToStopT,1000.0,Wrk_StopT.PRE) XIC(Wrk_StopT.PRE.31) MOV(2147483647,Wrk_StopT.PRE) ,[GRT(Cfg_StartHornT,1000.0) CLR(Cfg_StartHornT) ,MUL(Cfg_StartHornT,1000.0,Wrk_StartHornT.PRE) ,XIC(Inp_HornInh) CLR(Wrk_StartHornT.PRE) ] XIC(Wrk_StartHornT.PRE.31) CLR(Wrk_StartHornT.PRE) ,CPT(Wrk_JogT.PRE,Cfg_MaxJogT*1000.0+Wrk_StartHornT.PRE) XIC(Wrk_JogT.PRE.31) CLR(Wrk_JogT.PRE) ] OTE(Err_Timer) ,MOV(Wrk_StartT.PRE,Wrk_StartInhT.PRE) MOV(Wrk_StopT.PRE,Wrk_StopInhT.PRE) ];
				RC: "Enter the time (in seconds) to echo back the desired state when running in simulation$N"
				    "$N"
				    "Handle timer preset invalid values as above.";
				N: [MUL(Cfg_SimFdbkT,1000,Wrk_SimRunT.PRE) XIC(Wrk_SimRunT.PRE.31) MOV(0,Wrk_SimRunT.PRE) OTE(Err_Sim) ,MOV(Wrk_SimRunT.PRE,Wrk_SimStopT.PRE) ];
				RC: "============================================================$N"
				    "DEVICE FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "If the device is being simulated or has no feedback,$N"
				    "use the simulation timers to provide $Qfake$Q feedback.$N"
				    "$N"
				    "If the motor is NOT being simulated and it HAS and IS USING a run feedback,$N"
				    "use the state of the run feedback input as the motor run state.";
				N: [[XIC(Inp_Sim) ,XIO(Cfg_UseRunFdbk) ] [XIC(Wrk_SimRunT.DN) OTL(Wrk_RunFdbk) ,XIC(Wrk_SimStopT.DN) OTU(Wrk_RunFdbk) ] ,XIO(Inp_Sim) XIC(Cfg_UseRunFdbk) [XIC(Inp_RunFdbk) OTL(Wrk_RunFdbk) ,XIO(Inp_RunFdbk) OTU(Wrk_RunFdbk) ] ,XIC(Sts_Hand) XIO(Cfg_UseRunFdbk) OTU(Wrk_RunFdbk) ];
				RC: "Val_Fdbk is the current state of the device feedback, as seen on the AOI$'s Inputs:$N"
				    "0 = Stopped$N"
				    "1 = Running";
				N: [XIO(Wrk_RunFdbk) CLR(Val_Fdbk) ,XIC(Wrk_RunFdbk) MOV(1,Val_Fdbk) ];
				RC: "============================================================$N"
				    "INTERLOCK / PERMISSIVE BYPASS / CHECK COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Bypass Command bypasses the Bypassable Permissives and Interlocks.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Changed P_Mode to P_CmdSrc. Bypass now a Maintenance function.  #####";
				N: XIC(MCmd_Bypass)OTU(MCmd_Bypass)OTL(Wrk_Bypass);
				RC: "The Check Command enables checking of ALL$N"
				    "Permissives and Interlocks (cancels the bypass).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Changed P_Mode to P_CmdSrc. Bypass now a Maintenance function.  #####";
				N: XIC(MCmd_Check)OTU(MCmd_Check)OTU(Wrk_Bypass);
				RC: "If the internal Bypass flag is set, Bypassable Interlocks and Permissives ARE BYPASSED.$N"
				    "Bypassing is ACTIVE if Bypass selected OR in Maintenance Mode,$N"
				    "or in Override Mode if Override Bypassing is configured.";
				N: [XIC(Wrk_Bypass) OTE(Sts_Bypass) ,XIC(Sts_Maint) ,XIC(Sts_Ovrd) XIC(Cfg_OvrdPermIntlk) ]OTE(Sts_BypActive);
				RC: "If a Maintenance Bypass function is active, display the Maintenance Bypass$N"
				    "Indicator (triangle symbol) on the graphic symbol.  Bypass functions are:$N"
				    "*  Interlock / Permissive Bypass function is enabled$N"
				    "*  Motor HAS run feedback designated by engineer, but$N"
				    "maintenance has selected to NOT USE run feedback";
				N: [XIC(Sts_Bypass) ,XIC(Cfg_HasRunFdbk) XIO(Cfg_UseRunFdbk) ]OTE(Sts_MaintByp);
				RC: "Ready for Interlock / Permissive Bypass if not bypassed.$N"
				    "Ready to cancel Bypass (resume checking) if bypassed.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Changed P_Mode to P_CmdSrc. Bypass now a Maintenance function.  #####";
				N: [XIO(Wrk_Bypass) OTE(MRdy_Bypass) ,XIC(Wrk_Bypass) OTE(MRdy_Check) ];
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.$N"
				    "$N"
				    "This rung processes received Reset Commands from:$N"
				    "$N"
				    "1.  The Operator via HMI Operator Command, or$N"
				    "2.  Higher-level strategies via Program Command$N"
				    "3.  Pushbuttons or other block via Input$N"
				    "4.  Resets initiated by other device Operator Commands (if configured to do so)$N"
				    "and forwards the Reset to ALL Alarms and latched Shed conditions.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External Command Source and Commands.  Added Jog.  #####";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(XCmd_Reset) OTU(XCmd_Reset) ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ,[XIC(OCmd_Start) ,XIC(OCmd_Stop) ,XIC(OCmd_Jog) XIC(Cfg_HasJog) ] XIC(Cfg_OCmdResets) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,[XIC(XCmd_Start) ,XIC(XCmd_Stop) ,XIC(XCmd_Jog) XIC(Cfg_HasJog) ] XIC(Cfg_XCmdResets) XIC(Sts_Ext) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(PCmd_FailToStartAck) ,OTL(PCmd_FailToStopAck) ,OTL(PCmd_IntlkTripAck) ,OTL(PCmd_IOFaultAck) ] ][OTL(FailToStart.PCmd_Reset) OTL(FailToStop.PCmd_Reset) OTL(IntlkTrip.PCmd_Reset) OTL(IOFault.PCmd_Reset) ,XIC(Sts_FailToStart) RES(Wrk_StartT) ,XIC(Sts_FailToStop) RES(Wrk_StopT) ,OTU(Nrdy_PrioStop) OTU(Nrdy_Fail) ,[XIO(Inp_IOFault) ,XIC(Inp_Sim) ] OTU(Nrdy_IOFault) ];
				RC: "============================================================$N"
				    "MOTOR START / STOP COMMAND HANDLING$N"
				    "============================================================$N"
				    "In preparation for the Start / Stop logic that follows, this rung$N"
				    "stashes away the Permissive status in reusable bits.$N"
				    "#####  V4.00.00 2018-07-09:  Added Jog function.  #####";
				N: [XIC(Inp_PermOK) ,XIC(Sts_BypActive) ]XIC(Inp_NBPermOK)OTE(Wrk_PermOK);
				RC: "The Motor is NOT READY TO RUN if:$N"
				    "* Interlocks are not OK and not bypassed;$N"
				    "* Non-bypassable Interlocks are not OK;$N"
				    "* Permissives are not OK and not bypassed,$N"
				    "or Non-Bypassable Permissives are not OK, $N"
				    "and the motor is not already starting or running;$N"
				    "* There$'s an I/O failure and the motor is NOT being simulated;$N"
				    "* The motor has a Fail to Start or Fail to Stop that has not been reset;$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  Added Jog function.  #####";
				N: [[XIC(Err_Timer) ,XIC(Err_Sim) ] OTE(Nrdy_CfgErr) ,XIC(Sts_OoS) OTE(Nrdy_OoS) ,[XIO(Inp_IntlkOK) XIO(Sts_BypActive) ,XIO(Inp_NBIntlkOK) ] [[XIC(Wrk_Run) ,XIC(Wrk_Jog) ] XIO(Sts_Hand) OTE(Sts_IntlkTrip) ,OTE(Nrdy_Intlk) ] ,XIO(Wrk_PermOK) XIO(Sts_Starting) XIO(Sts_Running) OTE(Nrdy_Perm) ,XIC(Inp_IOFault) XIO(Inp_Sim) OTE(Sts_IOFault) XIC(Cfg_ShedOnIOFault) OTL(Nrdy_IOFault) ]OTE(Wrk_NotRdy);
				RC: "============================================================$N"
				    "MOTOR START / STOP COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Motor is NOT READY TO RUN if:$N"
				    "* Interlocks are not OK and not bypassed;$N"
				    "* Non-bypassable Interlocks are not OK;$N"
				    "* Permissives are not OK and not bypassed,$N"
				    "or Non-Bypassable Permissives are not OK, $N"
				    "and the motor is not already starting or running;$N"
				    "* There$'s an I/O failure and the motor is NOT being simulated;$N"
				    "* The motor has a Fail to Start or Fail to Stop that has not been reset;$N"
				    "* The motor is disabled by Maintenance.";
				N: [XIC(Wrk_NotRdy) ,XIC(Nrdy_PrioStop) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) ]OTE(Sts_NotRdy);
				RC: "The motor is AVAILABLE to be run by automation if it is in PROGRAM$N"
				    "Mode and the $QNot Ready$Q status is cleared.$N"
				    "#####  V4.10.00  2019-03-08:  Changed Sts_Available to use input availability from interlocks.  #####";
				N: XIC(Sts_Prog)XIO(Nrdy_PrioStop)XIO(Nrdy_Fail)XIO(Nrdy_IOFault)XIO(Nrdy_CfgErr)XIO(Nrdy_OoS)XIO(Nrdy_Perm)[[XIC(Inp_IntlkOK) ,XIC(Sts_BypActive) ] XIC(Inp_NBIntlkOK) ,XIC(Inp_IntlkAvail) ]OTE(Sts_Available);
				RC: "If we$'re not timing an HMI or programmed Start or Stop,$N"
				    "and there$'s no sealed-in fail-to-start or fail-to-stop,$N"
				    "and if Local Start/Stop Control is permitted,$N"
				    "and if we are using run feedback (not in simulation),$N"
				    "detect a local start or stop transition and track state with it.$N"
				    "(Don$'t track the Start if conditions do not allow the motor to run.)$N"
				    "$N"
				    "#####  V4.00.00 2018-07-09:  Added Jog function.  #####$N"
				    "#####  V4.00.02 2018-10-30: Corrected handling Allow Local when horn is enabled.  #####$N"
				    "";
				N: XIO(Wrk_StartInhT.TT)XIO(Wrk_StartHornT.TT)XIO(Wrk_StopInhT.TT)XIO(Sts_FailToStart)XIO(Sts_FailToStop)XIC(Cfg_AllowLocal)XIC(Cfg_UseRunFdbk)XIO(Inp_Sim)XIO(Wrk_Jog)[XIC(Inp_RunFdbk) XIO(Sts_NotRdy) OTL(Wrk_Run) ,XIO(Inp_RunFdbk) OTU(Wrk_Run) ];
				RC: "These next several rungs, in priority order, determine whether$N"
				    "the Motor should be running, jogging or stopped.$N"
				    "$N"
				    "If a Motor START command is received in Operator, Program or Maintenance$N"
				    "Mode, or if in Override Mode and the Override State is RUN, mark the Motor to RUN.$N"
				    "Permissives must be OK or bypassed to start the Motor (Interlocks are checked below...).$N"
				    "(Modes are mutually exclusive, thus handling the priority.)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####   Added audible alert prior to commanded start.  #####$N"
				    "#####  Added Jog function. Added External Command Source and Commands.  #####";
				N: [XIC(OCmd_Start) OTU(OCmd_Start) [XIC(Sts_Oper) ,XIC(Sts_Maint) OTL(Wrk_Retrigger) RES(Wrk_SimRunT) ] ,XIC(XCmd_Start) OTU(XCmd_Start) XIC(Sts_Ext) ,XIC(PCmd_Start) OTU(PCmd_Start) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,2) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]XIO(Sts_NotRdy)XIO(Wrk_Jog)[[XIO(Wrk_Run) OTL(Wrk_StartHorn) ,XIC(CmdSrc.Sts_Maint) ] OTL(Wrk_Retrigger) RES(Wrk_SimRunT) ,OTL(Wrk_Run) ];
				RC: "This rung determines if the Motor SHOULD BE JOGGING. This is when:$N"
				    "$N"
				    "* The Operator is requesting to Jog$N"
				    "* The Motor is in OPER or MAINT$N"
				    "* Permissives and Interlocks are OK or bypassed if in OPER$N"
				    "* Non-Bypassable Interlocks and Permissives are OK,$N"
				    "* The Motor is Ready (or in simulation), AND$N"
				    "* The Motor is not otherwise requested to RUN$N"
				    "$N"
				    "#####  V4.00.00 2018-07-09:  Added Jog function. Deleted Cfg_PCmdClear.  #####$N"
				    "#####  Added External Command Source and Commands.  #####";
				N: [XIC(OCmd_Jog) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIC(XCmd_Jog) XIC(Sts_Ext) ]XIO(Sts_NotRdy)XIC(Wrk_PermOK)XIO(Wrk_Run)OTL(Wrk_Jog)OTL(Wrk_StartHorn);
				RC: "If the motor is being jogged, run the Jog Timer.$N"
				    "$N"
				    "#####  V4.00.00 2018-07-09:  Added Jog function.  #####";
				N: XIC(Wrk_Jog)TON(Wrk_JogT,?,?);
				RC: "If we are sounding the audible start alert (start command accepte) and we lose$N"
				    "the permissive before actually starting the motor, cancel the start$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added audible alert prior to commanded start.  #####$N"
				    "#####  Added Jog function.  #####$N"
				    "";
				N: XIC(Wrk_StartHorn)XIO(Wrk_PermOK)OTU(Wrk_Run)OTU(Wrk_Jog)OTU(OCmd_Jog)OTU(XCmd_Jog)OTU(Wrk_StartHorn);
				RC: "If the motor is changed to a Mode other than Oper or Maint,$N"
				    "or if the Jog command goes away,$N"
				    "or if the Jog command does not clear within the Maximum Jog Time,$N"
				    "stop jogging.$N"
				    "$N"
				    "#####  V4.00.00 2018-07-09:  Added Jog function. Deleted Cfg_PCmdClear.  #####$N"
				    "#####  Added External Command Source and Commands.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####";
				N: [[XIO(OCmd_Jog) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIO(XCmd_Jog) XIC(Sts_Ext) ,XIO(Sts_Oper) XIO(Sts_Maint) XIO(Sts_Ext) ,XIO(Cfg_HasJog) ] OTU(Wrk_Jog) ,XIC(Wrk_JogT.DN) NEQ(Wrk_JogT.PRE,0) ]OTU(OCmd_Jog)OTU(XCmd_Jog);
				RC: "If a Motor STOP command is received in Operator, Program or Maintenance$N"
				    "Mode, or if in Override Mode and the Override State is STOP,$N"
				    "mark the Motor TO STOP (jogging or running).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added Jog function. Added External Command Source and Commands.  #####";
				N: [XIC(OCmd_Stop) OTU(OCmd_Stop) [[XIC(Sts_Maint) ,XIC(Sts_Oper) ] ,XIC(Cfg_OperStopPrio) XIO(Sts_Oper) XIO(Sts_Maint) OTL(Nrdy_PrioStop) ] ,XIC(XCmd_Stop) OTU(XCmd_Stop) [XIC(Sts_Ext) ,XIC(Cfg_ExtStopPrio) XIO(Sts_Ext) OTL(Nrdy_PrioStop) ] ,XIC(PCmd_Stop) OTU(PCmd_Stop) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,1) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ,XIC(Wrk_NotRdy) ,[XIC(Nrdy_PrioStop) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) ] XIO(Sts_Hand) ][[XIC(Wrk_Run) ,[XIC(Sts_Oper) ,XIC(Sts_Maint) ,XIC(Sts_Ext) ] ONS(Wrk_RetrigONS) ] OTL(Wrk_Retrigger) RES(Wrk_SimStopT) ,OTU(Wrk_Run) OTU(Wrk_Jog) OTU(Wrk_StartHorn) ,OTU(OCmd_Jog) OTU(XCmd_Jog) ];
				RC: "Higher Priority: HAND always beats Oper, Prog, Ovrd, Maint:$N"
				    "If in Hand, have the Motor follow the Run Feedback.";
				N: [XIC(Sts_Hand) ,XIO(Inp_Sim) ONS(Wrk_NoLongerSim) ,XIC(S:FS) ][XIC(Wrk_RunFdbk) OTL(Wrk_Run) ,XIO(Wrk_RunFdbk) OTU(Wrk_Run) ];
				RC: "If anything stops the motor, also stop the pre-start audible.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added audible alert prior to commanded start.  #####$N"
				    "#####  Added Jog function.  #####";
				N: XIO(Wrk_Run)XIO(Wrk_Jog)OTU(Wrk_StartHorn);
				RC: "============================================================$N"
				    "MOTOR START HORN TIMING$N"
				    "============================================================$N"
				    "Sound the horn for the configured time on a start or a jog.$N"
				    "$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####$N"
				    "$N"
				    "@@@@@  The TON is doubled to ensure it goes done  @@@@@$N"
				    "@@@@@  the same scan it is enabled if its preset is zero.  @@@@@";
				N: [XIC(Wrk_Run) ,XIC(Wrk_Jog) ][XIC(Wrk_StartHorn) TON(Wrk_StartHornT,?,?) TON(Wrk_StartHornT,?,?) ,XIC(Wrk_StartHornT.DN) OTU(Wrk_StartHorn) ];
				RC: "============================================================$N"
				    "MOTOR START SIMULATION AND FAIL TO START DETECTION$N"
				    "============================================================$N"
				    "If the motor SHOULD BE RUNNING, run a Start Timer to check for Fail to Start, and run a$N"
				    "Simulation Timer to provide simulated run feedback if needed.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added audible alert prior to commanded start.  #####$N"
				    "#####  Added Jog function.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####$N"
				    "$N"
				    "@@@@@  The TON is doubled to ensure it goes done  @@@@@$N"
				    "@@@@@  the same scan it is enabled if its preset is zero.  @@@@@";
				N: [XIC(Wrk_Run) ,XIC(Wrk_Jog) [XIC(Wrk_JogT.TT) ,EQU(Wrk_JogT.PRE,0) ] ]XIO(Wrk_StartHorn)[TON(Wrk_StartT,?,?) ,TON(Wrk_SimRunT,?,?) TON(Wrk_SimRunT,?,?) ,XIO(Wrk_RunFdbk) TON(Wrk_StartInhT,?,?) ,XIC(Wrk_SimRunT.DN) OTU(Wrk_Retrigger) ];
				RC: "If the Start Timer times out and the motor run feedback (or simulated feedback) never showed up,$N"
				    "show the motor as $QFAILED TO START$Q";
				N: XIC(Wrk_StartT.DN)XIO(Wrk_RunFdbk)XIO(Sts_Maint)OTE(Sts_FailToStart);
				RC: "============================================================$N"
				    "MOTOR STOP SIMULATION AND FAIL TO STOP DETECTION$N"
				    "============================================================$N"
				    "If the motor SHOULD BE STOPPED, run a Stop Timer to check for Fail to Stop, and run a$N"
				    "Simulation Timer to provide simulated run feedback off (stop feedback) if needed.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added Jog function.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####$N"
				    "$N"
				    "@@@@@  The TON is doubled to ensure it goes done  @@@@@$N"
				    "@@@@@  the same scan it is enabled if its preset is zero.  @@@@@";
				N: XIO(Wrk_Run)[XIO(Wrk_Jog) ,XIC(Wrk_JogT.DN) NEQ(Wrk_JogT.PRE,0) ][TON(Wrk_StopT,?,?) ,TON(Wrk_SimStopT,?,?) TON(Wrk_SimStopT,?,?) ,XIC(Wrk_RunFdbk) TON(Wrk_StopInhT,?,?) ,XIC(Wrk_SimStopT.DN) OTU(Wrk_Retrigger) ];
				RC: "If the Stop Timer times out and the motor run feedback (or simulated feedback) never showed $Qstopped$Q,$N"
				    "show the motor as $QFAILED TO STOP$Q";
				N: XIC(Wrk_StopT.DN)XIC(Wrk_RunFdbk)XIO(Sts_Maint)OTE(Sts_FailToStop);
				RC: "============================================================$N"
				    "SHED ON FAULT LOGIC$N"
				    "============================================================$N"
				    "This rung handles latching in of conditions which are configured to cause$N"
				    "motor to shed (de-energize).";
				N: XIC(Sts_FailToStart)XIC(Cfg_ShedOnFailToStart)OTL(Nrdy_Fail);
				RC: "If a shed condition is latched in above, de-energize the motor.$N"
				    "$N"
				    "#####  V4.10.01  2019-10-16:  Corrected handling of Jog and Horn on shed conditions.  #####";
				N: [XIC(Nrdy_PrioStop) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) ]XIO(Sts_Hand)OTU(Wrk_Run)OTU(Wrk_Jog)OTU(Wrk_StartHorn);
				RC: "============================================================$N"
				    "DEVICE COMMAND ENUMERATED VALUE$N"
				    "============================================================$N"
				    "Val_Cmd is the command currently being processed:$N"
				    "0 = None$N"
				    "1 = Stop$N"
				    "2 = Start$N"
				    "4 = Jog$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added Jog function.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####";
				N: [CLR(Wrk_Cmd) ,XIO(Wrk_Run) [XIC(Wrk_RunFdbk) ,XIC(Wrk_Retrigger) ] MOV(1,Wrk_Cmd) ,XIC(Wrk_Run) [XIO(Wrk_RunFdbk) ,XIC(Wrk_Retrigger) ] MOV(2,Wrk_Cmd) ,XIC(Wrk_Jog) [XIC(Wrk_JogT.TT) ,EQU(Wrk_JogT.PRE,0) ] MOV(4,Wrk_Cmd) ,MOV(Wrk_Cmd,Val_Cmd) ];
				RC: "============================================================$N"
				    "OUTPUT GENERATION$N"
				    "============================================================$N"
				    "If the motor is NOT SIMULATED, generate the appropriate outputs for the motor.$N"
				    "$N"
				    "If the motor should be running, is not faulted and not in hardwired control, energice Out_Run.$N"
				    "Also, energize Out_Start until we get feedback that the motor is running.$N"
				    "$N"
				    "If the motor should be stopped and is not in hardwired control and the feedback shows the motor$N"
				    "is NOT stopped, or if the motor is Faulted or Disabled, energize the Out_Stop output to stop the motor.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added audible alert prior to commanded start.  #####$N"
				    "#####  Added Jog function.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####$N"
				    "#####  Corrected handling of output in Hand.  #####";
				N: XIO(Inp_Sim)[XIO(Sts_NotRdy) XIO(Wrk_StartHorn) [XIC(Wrk_Run) ,XIC(Wrk_Jog) [XIC(Wrk_JogT.TT) ,EQU(Wrk_JogT.PRE,0) ] ] [OTE(Out_Run) ,XIO(Sts_Hand) [XIO(Wrk_RunFdbk) ,XIC(Wrk_Retrigger) ] OTE(Out_Start) ] ,XIO(Wrk_Run) [XIO(Wrk_Jog) ,XIC(Wrk_JogT.DN) NEQ(Wrk_JogT.PRE,0) ] [XIC(Wrk_RunFdbk) ,XIC(Wrk_Retrigger) ,XIC(Wrk_NotRdy) ] XIO(Sts_Hand) OTE(Out_Stop) ,XIC(Wrk_StartHorn) XIO(Sts_Hand) OTE(Out_Horn) ];
				RC: "============================================================$N"
				    "DEVICE STATUS GENERATION$N"
				    "============================================================$N"
				    "These rungs generate the Starting, Running, Stopping and Stopped Status bits.$N"
				    "$N"
				    "If the motor is in HAND and HAS NO RUN FEEDBACK, its state is meaningless;$N"
				    "turn off ALL the Sts_xxx states!!!!!$N"
				    "$N"
				    "If the motor is commanded to run (Output on) and the feedback doesn$'t yet show it running,$N"
				    "the motor is STARTING.$N"
				    "$N"
				    "If the motor is commanded to run (Output on) and the feedback shows it running,$N"
				    "the motor is RUNNING.$N"
				    "$N"
				    "If the motor is commanded to stoop (Output off) and the feedback still shows it running,$N"
				    "the motor is STOPPING.$N"
				    "$N"
				    "If the motor is commanded to stop (Output off) and the feedback shows it has stopped,$N"
				    "the motor is STOPPED.$N"
				    "$N"
				    "If the audible alert is active, show the Status as HORN.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added Jog function.  #####$N"
				    "#####  V4.10.00  2019-03-25  Added Horn Status.  #####$N"
				    "#####  V4.10.01  2019-10-16:  Modified to lock out jog when jog time expires until jog commands are cleared.  #####";
				N: [XIO(Sts_Hand) ,XIC(Cfg_UseRunFdbk) ][XIO(Wrk_StartHorn) XIC(Wrk_Run) XIO(Wrk_Jog) [XIO(Wrk_RunFdbk) OTE(Sts_Starting) ,XIC(Wrk_RunFdbk) OTE(Sts_Running) ] ,XIO(Wrk_Run) [XIO(Wrk_Jog) ,XIC(Wrk_JogT.DN) NEQ(Wrk_JogT.PRE,0) ] [XIC(Wrk_RunFdbk) OTE(Sts_Stopping) ,XIO(Wrk_RunFdbk) OTE(Sts_Stopped) ] ,XIO(Wrk_StartHorn) XIC(Wrk_Jog) [XIC(Wrk_JogT.TT) ,EQU(Wrk_JogT.PRE,0) ] OTE(Sts_Jogging) ,XIC(Wrk_StartHorn) OTE(Sts_Horn) ];
				RC: "============================================================$N"
				    "OPERATOR COMMAND READIES$N"
				    "============================================================$N"
				    "Ready to Start if in Operator Manual, Stopped, and Permissives and Interlocks are OK.$N"
				    "$N"
				    "Ready to Stop if in Operator Manual and (Running or Starting).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  Added Jog function.  #####";
				N: XIO(Wrk_NotRdy)[XIO(Sts_NotRdy) ,XIC(Cfg_OCmdResets) ][[XIC(Sts_Oper) ,XIC(Sts_Maint) ] [[XIC(Sts_Stopped) ,XIC(Sts_Maint) XIC(Sts_Running) ] OTE(ORdy_Start) ,XIC(Cfg_HasJog) XIO(Wrk_Run) XIC(Wrk_PermOK) OTE(ORdy_Jog) ] ,[XIC(Sts_Oper) ,XIC(Sts_Maint) ,XIC(Cfg_OperStopPrio) ] XIO(Sts_Stopping) OTE(ORdy_Stop) ];
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "The various alarms are ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1), EXCEPT:$N"
				    "* If the motor DOES NOT HAVE RUN FEEDBACK, the Fail to Start and Fail to Stop$N"
				    "alarms will never occur and should not exist.  (If feedback exists, $N"
				    "the Fail alarms must be allowed to exist.)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [OTL(IntlkTrip.PCfg_AllowExist) OTL(IOFault.PCfg_AllowExist) ,XIC(Cfg_HasRunFdbk) OTE(FailToStart.PCfg_AllowExist) OTE(FailToStop.PCfg_AllowExist) ];
				RC: "Let the Alarm instance know if this object is taken Out of Service$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Now using P_CmdSrc, including Out of Service.  #####";
				N: XIC(CmdSrc.Sts_OoS)OTE(FailToStart.Inp_OoS)OTE(FailToStop.Inp_OoS)OTE(IntlkTrip.Inp_OoS)OTE(IOFault.Inp_OoS);
				RC: "Handle Motor Failed to Start Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(FailToStart);
				RC: "Handle Motor Failed to Stop Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(FailToStop);
				RC: "Handle Interlock Trip Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IntlkTrip);
				RC: "Handle I/O Fault Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IOFault);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q box on the graphic symbol).";
				N: [XIC(FailToStart.Sts_AlmInh) ,XIC(FailToStop.Sts_AlmInh) ,XIC(IntlkTrip.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "This rung generates a summary Bad Config status, simply an OR of the individual bits provided above$N"
				    "(in the Configuration handling section).";
				N: [XIC(Err_Timer) ,XIC(Err_Sim) ,[XIC(FailToStart.Sts_Err) ,XIC(FailToStop.Sts_Err) ,XIC(IntlkTrip.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(1,Wrk_SrcQ) ,XIO(Cfg_HasRunFdbk) MOV(2,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(SrcQ_IO,Wrk_SrcQ) ,XIC(Cfg_HasRunFdbk) XIO(Cfg_UseRunFdbk) MOV(18,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ) ];
				RC: "Val_Sts is the current device status, as determined by this AOI,$N"
				    "based on its knowledge of commands executed and feedback.$N"
				    "(This is the status that should be monitored by, for example, FT Historian.)$N"
				    "0 = Powerup / Unknown$N"
				    "1 = Stopped$N"
				    "2 = Running Forward$N"
				    "3 = Running Reverse$N"
				    "4 = Running Slow$N"
				    "5 = Starting Forward$N"
				    "6 = Starting Reverse$N"
				    "7 = Starting Slow$N"
				    "8 = Jogging Forward$N"
				    "9 = Jogging Reverse$N"
				    "10 = Stopping$N"
				    "14 = Horn$N"
				    "$N"
				    "Val_Fault is the current device fault status, as determined by this AOI,$N"
				    "based on its knowledge of commands executed and feedback.$N"
				    "(This is the fault status that should be monitored by, for example, FT Historian.)$N"
				    "0 = None$N"
				    "16 = Fail to Start$N"
				    "17 = Fail to Stop$N"
				    "32 = I/O Fault (from Input)$N"
				    "34 = Configuration Error$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####$N"
				    "#####  Added Jog function.  Updated Val_Sts to common enumeration across all motors and drives.  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added Horn Status.  #####";
				N: [CLR(Wrk_Sts) CLR(Wrk_Fault) ,XIC(Sts_Stopped) MOV(1,Wrk_Sts) ,XIC(Sts_Running) MOV(2,Wrk_Sts) ,XIC(Sts_Starting) MOV(5,Wrk_Sts) ,XIC(Sts_Jogging) MOV(8,Wrk_Sts) ,XIC(Sts_Stopping) MOV(10,Wrk_Sts) ,XIC(Sts_Horn) MOV(14,Wrk_Sts) ,XIC(Nrdy_Fail) MOV(16,Wrk_Fault) ,XIC(Sts_FailToStop) MOV(17,Wrk_Fault) ,[XIC(Sts_IOFault) ,XIC(Nrdy_IOFault) ] MOV(32,Wrk_Fault) ,XIC(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Sts,Val_Sts) MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for reset or ack required:$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count.  #####";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) OTU(Wrk_Notify.0) ,GRT(FailToStart.Val_Notify,Wrk_Notify) MOV(FailToStart.Val_Notify,Wrk_Notify) ,GRT(FailToStop.Val_Notify,Wrk_Notify) MOV(FailToStop.Val_Notify,Wrk_Notify) ,GRT(IntlkTrip.Val_Notify,Wrk_Notify) MOV(IntlkTrip.Val_Notify,Wrk_Notify) ,GRT(IOFault.Val_Notify,Wrk_Notify) MOV(IOFault.Val_Notify,Wrk_Notify) ,[XIC(FailToStart.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(FailToStop.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IntlkTrip.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IOFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTL(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_UnackAlmC,Val_UnackAlmC) ];
				RC: "Roll up the notification from the associated Overload Relay object.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count including attached Overload object.  #####";
				N: [GRT(Inp_OvldNotify,Wrk_Notify) MVM(Inp_OvldNotify,2#1111_1110,Wrk_Notify) ,XIC(Inp_OvldNotify.0) OTL(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_NotifyAll) ];
				RC: "This rung identifies:$N"
				    "* if a latched Shed condition requires a reset in order to run the motor;$N"
				    "* if that reset or any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(FailToStart.Sts_RdyAck) ,XIC(FailToStop.Sts_RdyAck) ,XIC(IntlkTrip.Sts_RdyAck) ,XIC(IOFault.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(FailToStart.Sts_RdyReset) ,XIC(FailToStop.Sts_RdyReset) ,XIC(IntlkTrip.Sts_RdyReset) ,XIC(IOFault.Sts_RdyReset) ,XIC(Nrdy_PrioStop) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) XIO(Sts_IOFault) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear Ownership, clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, set the Ownership to NO OWNER (0).";
				N: CLR(PSet_Owner)CLR(Val_Owner);
				RC: "$QLurking$Q Commands not handled elsewhere are cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Command Source and Commands.  #####";
				N: [OTU(OCmd_Start) OTU(OCmd_Stop) OTU(OCmd_Jog) ,OTU(XCmd_Start) OTU(XCmd_Stop) OTU(XCmd_Jog) ,OTU(PCmd_Start) OTU(PCmd_Stop) ,OTU(MCmd_Bypass) OTU(MCmd_Check) ,CLR(Inp_OvrdCmd) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(XCmd_Reset) OTU(PCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Removed Disable, Enable; now handled as OoS, IS.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [OTU(ORdy_Start) OTU(ORdy_Stop) OTU(ORdy_Jog) ,OTU(MRdy_Bypass) OTU(MRdy_Check) ,OTU(ORdy_Reset) OTU(ORdy_ResetAckAll) OTU(Sts_RdyAck) ];
				RC: "Internal latches are de-energized on Prescan.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added Jog function.  #####";
				N: OTU(Wrk_Run)OTU(Wrk_Jog)OTU(Wrk_RunFdbk);
				RC: "Clear the latched Shed faults.";
				N: OTU(Nrdy_PrioStop)OTU(Nrdy_Fail)OTU(Nrdy_IOFault);
				RC: "Outputs are cleared on Prescan.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-09:  Added Autible Alert on start.  #####";
				N: OTU(Out_Run)OTU(Out_Start)OTU(Out_Stop)OTU(Out_Horn);
				RC: "On Prescan, clear the following:$N"
				    "Val_Cmd (no command active)$N"
				    "Val_Fdbk (device position not determined)$N"
				    "Val_Sts (device status powerup / unknown)";
				N: CLR(Val_Cmd)CLR(Val_Fdbk)CLR(Val_Sts);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_ValveSO (Description := "Solenoid Operated Valve",
	                                         Revision := "4.10",
	                                         RevisionExtension := ".01 Release",
	                                         RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                         Vendor := "Rockwell Automation",
	                                         ExecutePrescan := Yes,
	                                         ExecutePostscan := No,
	                                         ExecuteEnableInFalse := Yes,
	                                         CreatedDate := "2008-03-27T19:50:50.098Z",
	                                         CreatedBy := "Not Available",
	                                         EditedDate := "2021-01-13T16:34:53.452Z",
	                                         EditedBy := "DESKTOP-6HQO39D\GNOP_30L_SUF",
	                                         SoftwareRevision := "v32.03",
	                                         AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction controls and monitors a single solenoid operated$Nvalve (two position: opened, closed) and provides:$N$N*  Support for fail open (energize to close) and fail closed (energize to open, default) valves$N*  Monitoring of limit switch feedback, display of actual valve status$N*  Detection of Failure to Open, Failure to Close$N*  Monitoring of Permissive conditions to allow energizing$N*  Monitoring of Interlock conditions to de-energize$N*  Simulation, providing feedback of a working valve while disabling outputs$N*  Monitoring of I/O communication faults$N*  Alarms for Full Stall (didn$'t move), Transit Stall (didn$'t reach target position), Interlock Trip, I/O Fault$N*  Operation in Hand, Maintenance, Override, Program and Operator Modes$N*  $QAvailable$Q status for use by automation logic to know whether valve$N      can be controlled by other objects.$N$NCommand Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$NCommand Sources: Operator, External, Program, Override, Maintenance, Out of$NService, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.10.00)$NSee 4.10 Release Notes for details.$N* No changes, uprevved because P_CmdSrc 4.10.01 is used.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.02)$NSee 4.10 Release Notes for details.$N* Added audible alert on commanded energize.$N* Added Horn Status, Horn Inhibit.$N* Updated to P_CmdSrc V4.10.00.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.01)$NSee 4.00 Release Notes for details.$N* Modified handling of simultaneous open and close commands.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.00 Release Notes for details.$N* Corrected Reset Command logic.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-11)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added notify and unack count rollup for Channel object.$N* Changed $QMode$Q to $QCommand Source$Q using P_CmdSrc 4.00.00.$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* Aligned ready bit naming with command bit names.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyAck and Sts_RdyReset for use by external objects.$N* Changed delay / time configuration items to REAL seconds.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_OpenLS : BOOL (Description := "Valve Open Limit Switch 1=confirmed OPEN",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			Inp_ClosedLS : BOOL (Description := "Valve Closed Limit Switch 1=confirmed CLOSED",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0);
			Inp_PermOK : BOOL (Description := "1=Permissives OK, Valve can energize",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 1);
			Inp_NBPermOK : BOOL (Description := "1=Non-Bypassable Permissives OK, valve can energize",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 1);
			Inp_IntlkOK : BOOL (Description := "1=Interlocks OK, valve can energize",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 1);
			Inp_NBIntlkOK : BOOL (Description := "1=Non-Bypassable Interlocks OK, valve can energize",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Inp_IntlkAvail : BOOL (Description := "1 = Interlock Availibility OK",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Inp_IOFault : BOOL (Description := "Input Communication Status 0=OK, 1=fail",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Sim : BOOL (Description := "1=Simulate working valve; 0=Open/Close/ Monitor actual valve",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Inp_Hand OF CmdSrc.Inp_Hand (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_Ovrd OF CmdSrc.Inp_Ovrd (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			Inp_OvrdCmd : DINT (Description := "Override Mode Command: 0=None, 1=Close, 2=Open",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_ExtInh OF CmdSrc.Inp_ExtInh (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_HornInh : BOOL (Description := "1 = Inhibit audible alert, 0 = Alllow audible alert",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Inp_Reset : BOOL (Description := "1=Reset all fault conditions and latched Alarms",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Cfg_FailOpen : BOOL (Description := "1=Fail Open (energize to close), 0=Fail Closed (energize to open)",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_HasOpenLS : BOOL (Description := "1=Valve provides an Open Limit Switch signal",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_HasClosedLS : BOOL (Description := "1=Valve provides a Closed Limit Switch signal",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_UseOpenLS : BOOL (Description := "1=Valve Open LS should be used for failure checking",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			Cfg_UseClosedLS : BOOL (Description := "1=Valve Closed LS should be used for failure checking",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_LSFail : BOOL (Description := "1=both switches ON=fail, 0=both switches OFF=fail",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 1);
			Cfg_HasPermObj : BOOL (Description := "1=Tells HMI a P_Perm is connected to Inp_Perm",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasIntlkObj : BOOL (Description := "1=Tells HMI a P_Intlk is connected to Inp_Intlk",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HasStatsObj : BOOL (Description := "1=Tells HMI a P_ValveStats is monitoring this valve",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_OCmdResets : BOOL (Description := "1=New valve OCmd resets shed latches and cleared alarms, 0=OCmdReset req$'d.",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_XCmdResets : BOOL (Description := "1=New valve XCmd resets shed latches and cleared alarms, 0=OCmdReset req$'d.",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_OvrdPermIntlk : BOOL (Description := "1=Override ignores Bypassable Perm/ Intlk; 0=always use Perm/Intlk",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			Cfg_ShedOnFullStall : BOOL (Description := "1=Stop Valve and Alarm on Full Stall; 0=Alarm only on Full Stall",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 1);
			Cfg_ShedOnTransitStall : BOOL (Description := "1=Stop Valve and Alarm on Transit Stall; 0=Alarm only on Transit Stall",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No,
			                                  DefaultData := 1);
			Cfg_ShedOnIOFault : BOOL (Description := "1=Stop Valve and Alarm on I/O Fault; 0=Alarm only on I/O Fault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1);
			Cfg_HasFullStallAlm OF FullStall.Cfg_Exists (Description := "1=Full Stall Alarm exists and will be checked",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_HasTransitStallAlm OF TransitStall.Cfg_Exists (Description := "1=Transit Stall Alarm exists and will be checked",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_HasIntlkTripAlm OF IntlkTrip.Cfg_Exists (Description := "1=Interlock Trip Alarm exists and will be checked",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_HasIOFaultAlm OF IOFault.Cfg_Exists (Description := "1=I/O Fault Alarm exists and will be checked",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			Cfg_FullStallResetReqd OF FullStall.Cfg_ResetReqd (Description := "1=Reset requied to clear Full Stall Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_TransitStallResetReqd OF TransitStall.Cfg_ResetReqd (Description := "1=Reset required to clear Transit Stall Alarm",
			                                     Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			Cfg_IntlkTripResetReqd OF IntlkTrip.Cfg_ResetReqd (Description := "1=Reset required to clear Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			Cfg_IOFaultResetReqd OF IOFault.Cfg_ResetReqd (Description := "1=Reset required to clear I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_FullStallAckReqd OF FullStall.Cfg_AckReqd (Description := "1=Acknowledge required for Full Stall Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_TransitStallAckReqd OF TransitStall.Cfg_AckReqd (Description := "1=Acknowledge required for Transit Stall Alarm",
			                                   Usage := Input,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No);
			Cfg_IntlkTripAckReqd OF IntlkTrip.Cfg_AckReqd (Description := "1=Acknowledge required for Interlock Trip Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			Cfg_IOFaultAckReqd OF IOFault.Cfg_AckReqd (Description := "1=Acknowledge required for I/O Fault Alarm",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			Cfg_FullStallSeverity OF FullStall.Cfg_Severity (Description := "Full Stall Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_TransitStallSeverity OF TransitStall.Cfg_Severity (Description := "Transit Stall Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			Cfg_IntlkTripSeverity OF IntlkTrip.Cfg_Severity (Description := "Interlock Trip Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			Cfg_IOFaultSeverity OF IOFault.Cfg_Severity (Description := "I/O Fault Alarm Severity: 1..250=Low, 251..500=Medium, 501..750=High, 751..1000=Urgent",
			                               Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			Cfg_SimFdbkT : REAL (Description := "Delay to echo back of Open/Closed status when in Simulation (sec)",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 2.00000000e+000);
			Cfg_FullStallT : REAL (Description := "After command, time with no motion before Fault (sec)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 5.00000000e+000);
			Cfg_TransitStallT : REAL (Description := "After command, time to reach position before fault (sec)",
			                             Usage := Input,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 1.00000000e+001);
			Cfg_StartHornT : REAL (Description := "Time to sound audible on commanded start (sec) (0=disabled)",
			                          Usage := Input,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0.00000000e+000);
			PSet_Owner : DINT (Description := "Program Owner Request ID (non-zero) or Release (zero)",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_Open : BOOL (Description := "Program Command to Open Valve",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			PCmd_Close : BOOL (Description := "Program Command to Close Valve",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_Prog OF CmdSrc.PCmd_Prog (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Oper OF CmdSrc.PCmd_Oper (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Lock OF CmdSrc.PCmd_Lock (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No);
			PCmd_Unlock OF CmdSrc.PCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Normal OF CmdSrc.PCmd_Normal (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			PCmd_Reset : BOOL (Description := "Program Command to ResetShed Latches and Cleared Alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			PCmd_FullStallAck OF FullStall.PCmd_Ack (Description := "Program Command to Acknowledge Full Stall Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_FullStallSuppress OF FullStall.PCmd_Suppress (Description := "Program Command to Suppress Full Stall Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_FullStallUnsuppress OF FullStall.PCmd_Unsuppress (Description := "Program Command to Unsuppress Full Stall Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_FullStallUnshelve OF FullStall.PCmd_Unshelve (Description := "Program Command to Unshelve Full Stall Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_TransitStallAck OF TransitStall.PCmd_Ack (Description := "Program Command to Acknowledge Transit Stall Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_TransitStallSuppress OF TransitStall.PCmd_Suppress (Description := "Program Command to Suppress Transit Stall Alarm",
			                                     Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			PCmd_TransitStallUnsuppress OF TransitStall.PCmd_Unsuppress (Description := "Program Command to Unsuppress Transit Stall Alarm",
			                                       Usage := Input,
			                                       RADIX := Decimal,
			                                       Required := No,
			                                       Visible := No);
			PCmd_TransitStallUnshelve OF TransitStall.PCmd_Unshelve (Description := "Program Command to Unshelve Transit Stall Alarm",
			                                     Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			PCmd_IntlkTripAck OF IntlkTrip.PCmd_Ack (Description := "Program Command to Acknowledge Interlock Trip Alarm",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			PCmd_IntlkTripSuppress OF IntlkTrip.PCmd_Suppress (Description := "Program Command to Suppress Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IntlkTripUnsuppress OF IntlkTrip.PCmd_Unsuppress (Description := "Program Command to Unsuppress Interlock Trip Alarm",
			                                    Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No);
			PCmd_IntlkTripUnshelve OF IntlkTrip.PCmd_Unshelve (Description := "Program Command to Unshelve Interlock Trip Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultAck OF IOFault.PCmd_Ack (Description := "Program Command to Acknowledge I/O Fault Alarm",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			PCmd_IOFaultSuppress OF IOFault.PCmd_Suppress (Description := "Program Command to Suppress I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			PCmd_IOFaultUnsuppress OF IOFault.PCmd_Unsuppress (Description := "Program Command to Unsuppress I/O Fault Alarm",
			                                  Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			PCmd_IOFaultUnshelve OF IOFault.PCmd_Unshelve (Description := "Program Command to Unshelve I/O Fault Alarm",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			MCmd_Rel OF CmdSrc.MCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			OCmd_Unlock OF CmdSrc.OCmd_Unlock (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			XCmd_Open : BOOL (Description := "External Command to Open Valve",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			XCmd_Close : BOOL (Description := "External Command to Close Valve",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			XCmd_Acq OF CmdSrc.XCmd_Acq (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Rel OF CmdSrc.XCmd_Rel (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No);
			XCmd_Reset : BOOL (Description := "Ext Cmd to clear shed latches and cleared alarms",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Out : BOOL (Description := "1=Energize Valve Solenoid",
			               Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			Out_Horn : BOOL (Description := "1=Sound audible prior to commanded motor start",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			SrcQ_IO : DINT (Description := "Source and Quality of primary I/O (enumeration)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			SrcQ : DINT (Description := "Source and Quality of primary Val/Sts (enumeration)",
			                Usage := Output,
			                RADIX := Decimal,
			                Required := No,
			                Visible := No,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
			Val_Cmd : DINT (Description := "Device Command 0=None, 1=Close, 2=Open",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fdbk : DINT (Description := "Device Feedback 0=Moving, 1=Closed, 2=Opened, 3=Limit Switch Failure",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Val_Sts : DINT (Description := "Device Confirmed Sts 0=? 1=Closed 2=Open 5=Closing, 6=Opening",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Val_Fault : DINT (Description := "Device Fault Status 0=None, 16=Transit Stall, 17 = Full Stall, 32=I/O Fault, 34=Config Error",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Val_NotifyAll : DINT (Description := "Highest Alarm prio and ack status this object + channel (enum)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_UnackAlmC : DINT (Description := "Count of Unacknowledged Alarms",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Val_Owner : DINT (Description := "Current Object Owner ID (0=not owned)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Closed : BOOL (Description := "1=Valve requested to Close and is confirmed Closed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Opening : BOOL (Description := "1=Valve requested to open and awaiting open feedback",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_Opened : BOOL (Description := "1=Valve requested to open and is confirmed Opened",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Closing : BOOL (Description := "1=Valve requested to Close and awaiting Closed feedback",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_Horn : BOOL (Description := "1=Valve Horn Active",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Sts_Available : BOOL (Description := "1=Valve available for control by automation (Prog)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Bypass : BOOL (Description := "1=Bypassable Interlocks and Permissives are Bypassed",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_BypActive : BOOL (Description := "1=Bypassing Active (Bypassed or Maintenance)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_LSFail : BOOL (Description := "1=Limit Switch Overlap Failure",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_NotRdy : BOOL (Description := "1=Device Not Ready, see detail bits for reason",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_CfgErr : BOOL (Description := "1=Device Not Ready: Configuration Error",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Nrdy_Fail : BOOL (Description := "1=Device Not Ready: Device Failure (Shed Requires Reset)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Nrdy_Intlk : BOOL (Description := "1=Device Not Ready: Interlock Not OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Nrdy_IOFault : BOOL (Description := "1=Device Not Ready: I/O Fault (Shed Requires Reset)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Nrdy_OoS : BOOL (Description := "1=Device Not Ready: Device is Out of Service",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Nrdy_Perm : BOOL (Description := "1=Device Not Ready: Permissive Not OK",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_MaintByp : BOOL (Description := "1=A Maintenance Bypass is Active, display icon",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Sts_AlmInh : BOOL (Description := "1=An Alarm is Shelved, Disabled or Suppressed, display icon",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_Err : BOOL (Description := "1=Error in Config: see detail bits for reason",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Timer : BOOL (Description := "1=Error in Config: Invalid Check Time (use 0 to 2147483)",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Err_Sim : BOOL (Description := "1=Error in Config: Invalid Simulation Time (use 0 to 2147483)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Err_Alarm : BOOL (Description := "1=Error in Config: Alarm Min On Time, Shelf Time, Severity",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_Hand OF CmdSrc.Sts_Hand (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OoS OF CmdSrc.Sts_OoS (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Maint OF CmdSrc.Sts_Maint (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only);
			Sts_Ovrd OF CmdSrc.Sts_Ovrd (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_Ext OF CmdSrc.Sts_Ext (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			Sts_Prog OF CmdSrc.Sts_Prog (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_ProgLocked OF CmdSrc.Sts_ProgLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Oper OF CmdSrc.Sts_Oper (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			Sts_OperLocked OF CmdSrc.Sts_OperLocked (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_Normal OF CmdSrc.Sts_Normal (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only);
			Sts_ExtReqInh OF CmdSrc.Sts_ExtReqInh (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only);
			Sts_ProgReqInh OF CmdSrc.Sts_ProgReqInh (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only);
			Sts_MAcqRcvd OF CmdSrc.Sts_MAcqRcvd (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched alarm or shed condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_RdyAck : BOOL (Description := "1=An alarm is ready to be acknowledged",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Sts_FullStall OF FullStall.Inp (Description := "1=Valve Full Stall (failed to move at all)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Alm_FullStall OF FullStall.Alm (Description := "1=Valve Full Stall (failed to move at all) Alarm",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Ack_FullStall OF FullStall.Ack (Description := "1=Full Stall Alarm has been acknowledged",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_FullStallDisabled OF FullStall.Disabled (Description := "1=Full Stall Alarm has been Disabled by Maintenance",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_FullStallShelved OF FullStall.Shelved (Description := "1=Full Stall Alarm has been Shelved by Operator",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_FullStallSuppressed OF FullStall.Suppressed (Description := "1=Full Stall Alarm has been Suppressed by Program",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_TransitStall OF TransitStall.Inp (Description := "1=Valve Transit Stall (did not reach target position)",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Alm_TransitStall OF TransitStall.Alm (Description := "1=Valve Transit Stall (did not reach target pos.) Alarm",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Ack_TransitStall OF TransitStall.Ack (Description := "1=Transit Stall Alarm has been acknowledged",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write);
			Sts_TransitStallDisabled OF TransitStall.Disabled (Description := "1=Transit Stall Alarm has been Disabled by Maintenance",
			                                    Usage := Output,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No,
			                                    ExternalAccess := Read/Write);
			Sts_TransitStallShelved OF TransitStall.Shelved (Description := "1=Transit Stall Alarm has been Shelved by Operator",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_TransitStallSuppressed OF TransitStall.Suppressed (Description := "1=Transit Stall Alarm has been Suppressed by Program",
			                                      Usage := Output,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No,
			                                      ExternalAccess := Read/Write);
			Sts_IntlkTrip OF IntlkTrip.Inp (Description := "1=Valve de-energized by an Interlock NOT OK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Alm_IntlkTrip OF IntlkTrip.Alm (Description := "1=Alarm: Valve de-energized by an Interlock NOT OK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Ack_IntlkTrip OF IntlkTrip.Ack (Description := "1=Interlock Trip Alarm has been acknowledged",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write);
			Sts_IntlkTripDisabled OF IntlkTrip.Disabled (Description := "1=Interlock Trip Alarm has been Disabled by Maintenance",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			Sts_IntlkTripShelved OF IntlkTrip.Shelved (Description := "1=Interlock Trip Alarm has been Shelved by Operator",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write);
			Sts_IntlkTripSuppressed OF IntlkTrip.Suppressed (Description := "1=Interlock Trip Alarm has been Suppressed Program",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := No,
			                                   ExternalAccess := Read/Write);
			Sts_IOFault OF IOFault.Inp (Description := "I/O Comm Fault Status (0=OK, 1=Bad)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Alm_IOFault OF IOFault.Alm (Description := "1=I/O Fault Alarm",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Ack_IOFault OF IOFault.Ack (Description := "1=I/O Fault Alarm has been acknowledged",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write);
			Sts_IOFaultDisabled OF IOFault.Disabled (Description := "1=I/O Fault Alarm has been Disabled by Maintenance",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write);
			Sts_IOFaultShelved OF IOFault.Shelved (Description := "1=I/O Fault Alarm has been Shelved by Operator",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read/Write);
			Sts_IOFaultSuppressed OF IOFault.Suppressed (Description := "1=I/O Fault Alarm has been Suppressed by Program",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 ExternalAccess := Read/Write);
			MRdy_Rel OF CmdSrc.MRdy_Rel (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			ORdy_Unlock OF CmdSrc.ORdy_Unlock (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only);
			P_ValveSO : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			CmdSrc : P_CmdSrc (Description := "Valve Mode Selection",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[7649,0,0,1,0,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']]");
			IOFault : P_Alarm (Description := "I/O Fault Alarm",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			IntlkTrip : P_Alarm (Description := "Interlock Trip Alarm",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[961,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			TransitStall : P_Alarm (Description := "Valve Transit Stall (moved but did not reach target) Alarm",
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19,'Valve Transit Stall$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			FullStall : P_Alarm (Description := "Valve Full Stall (did not move) Alarm",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[961,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,2,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[16,'Valve Full Stall$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0]");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[9,'P_ValveSO$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[13,'Valve Control$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[23,'Solenoid Operated Valve$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_Open : BOOL (Description := "1=Requested to OPEN Valve, 0=Requested to CLOSE Valve",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Wrk_SimOpenT : TIMER (Description := "Simulation Delay until Opened",
			                       ExternalAccess := None,
			                       DefaultData := "[0,0,0]");
			Wrk_SimCloseT : TIMER (Description := "Simulation Delay until Closed",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			Wrk_OpenFdbk : BOOL (Description := "1=LS Feedback shows valve confirmed open",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_Notify : DINT (Description := "Buffer for building Val_Notify",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_Bypass : BOOL (Description := "Internal Bypassable Permissives and Interlocks are Bypassed flag",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_ClosedFdbk : BOOL (Description := "1=LS Feedback shows valve confirmed closed",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			Wrk_TransitStallT : TIMER (Description := "Timer for Transit Stall Check",
			                            ExternalAccess := Read Only,
			                            DefaultData := "[0,0,0]");
			Wrk_FullStallT : TIMER (Description := "Timer for Full Stall Check",
			                         ExternalAccess := Read Only,
			                         DefaultData := "[0,0,0]");
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_Cmd : DINT (Description := "Buffer for building Val_Cmd",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Sts : DINT (Description := "Buffer for building Val_Sts",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_Fault : DINT (Description := "Buffer for building Val_Fault",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			HMI_Type : STRING_16 (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[9,'P_ValveSO$00$00$00$00$00$00$00']");
			Wrk_SimOpenLS : BOOL (Description := "Simulated valve Open Limit Switch",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_SimClosedLS : BOOL (Description := "Simulated valve Closed Limit Switch",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			Wrk_SrcQ : DINT (Description := "Register for building Source / Quality enumeration",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Val_Notify : DINT (Description := "Current Alarm Level and Acknowledgement (enumeration)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Wrk_NotRdy : BOOL (Description := "Device Not Ready conditions excluding shed latches",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Wrk_NoLongerSim : BOOL (Description := "Switched from Simulated to Real Valve this scan",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			OCmd_Close : BOOL (Description := "Operator Command to Close Valve",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			OCmd_Open : BOOL (Description := "Operator Command to Open Valve",
			                    RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			ORdy_ResetAckAll : BOOL (Description := "1=Ready for OCmd_ResetAckAll (enables HMI button)",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Check : BOOL (Description := "1=Ready for MCmd_Check (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			MRdy_Bypass : BOOL (Description := "1=Ready for MCmd_Bypass (enables HMI button)",
			                      RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			ORdy_Close : BOOL (Description := "1=Ready for OCmd_Close (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			ORdy_Open : BOOL (Description := "1=Ready for OCmd_Open (enables HMI button)",
			                    RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			MCmd_Check : BOOL (Description := "Maintenance Command to Check (not bypass) all Interlocks and Permissives",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			MCmd_Bypass : BOOL (Description := "Maintenance Command to Bypass all Bypassable Interlocks and Permissives",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'Area01$00$00']");
			OCmd_ResetAckAll : BOOL (Description := "Oper Cmd to reset shed latches and cleared alarms, plus  Acknowledge alarms",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Oper Cmd to clear shed latches and cleared alarms",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			Wrk_UnackAlmC : DINT (Description := "Buffer for building Val_UnackAlmC",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Wrk_CloseCmdRcvd : BOOL (Description := "1=Received a Close command this scan",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_OpenCmdRcvd : BOOL (Description := "1=Received an Open command this scan",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Wrk_StartHornT : TIMER (Description := "Timer for audible alert on start",
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			Wrk_StartHorn : BOOL (Description := "1=Sound audible prior to commanded motor start",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Out of Service is asserted; Outputs OFF; Valve Status shown but Alarms inhibited.")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    "Handle $QProgrammed Out of Servie$Q Selection using the standard$N"
				    "P_CmdSrc AOI (EnableInFalse Routine, false scan required!).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed P_Mode to P_CmdSrc.  #####";
				N: XIC(EnableIn)P_CmdSrc(CmdSrc);
				RC: "First-Come First-Served Ownership Arbitration still needs to happen, even when device is disabled.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "$QLurking$Q Commands not handled elsewhere are cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Command Source and Commands.  #####";
				N: [OTU(PCmd_Open) OTU(PCmd_Close) ,OTU(OCmd_Open) OTU(OCmd_Close) ,OTU(XCmd_Open) OTU(XCmd_Close) ,OTU(MCmd_Bypass) OTU(MCmd_Check) ,CLR(Inp_OvrdCmd) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(PCmd_Reset) OTU(XCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####";
				N: [OTU(ORdy_Open) OTU(ORdy_Close) OTU(ORdy_Reset) OTU(Sts_RdyAck) OTU(ORdy_ResetAckAll) ,OTU(MRdy_Bypass) OTU(MRdy_Check) ];
				RC: "============================================================$N"
				    "LIMIT SWITCH FEEDBACK DETERMINATION$N"
				    "============================================================$N"
				    "This first $QOpen$Q feedback is a copy of the Open Limit Switch, if it is being$N"
				    "used, or a copy of the OPPOSITE of the Closed Limit Switch, if ONLY the$N"
				    "Closed Limit Switch is being used.";
				N: [XIC(Cfg_UseOpenLS) XIC(Inp_OpenLS) ,XIO(Cfg_UseOpenLS) XIC(Cfg_UseClosedLS) XIO(Inp_ClosedLS) ]OTE(Wrk_OpenFdbk);
				RC: "This first $QClosed$Q feedback is a copy of the Closed Limit Switch, if it is being$N"
				    "used, or a copy of the OPPOSITE of the Open Limit Switch, if ONLY the$N"
				    "Open Limit Switch is being used.";
				N: [XIC(Cfg_UseClosedLS) XIC(Inp_ClosedLS) ,XIO(Cfg_UseClosedLS) XIC(Cfg_UseOpenLS) XIO(Inp_OpenLS) ]OTE(Wrk_ClosedFdbk);
				RC: "============================================================$N"
				    "VALVE FEEDBACK STATUS$N"
				    "============================================================$N"
				    "This rung generates the Valve Feedback Status bits and Enumeration Value:$N"
				    "Limit Switch Fail, if the Limit Switches are in the fail position (won$'t be seen in Simulation)$N"
				    "Opened, if the valve is confirmed opened$N"
				    "Closed, if the valve is confirmed closed$N"
				    "Moving, if the Limit Switches show travel";
				N: [XIO(Inp_Sim) [[XIC(Cfg_LSFail) XIC(Wrk_OpenFdbk) XIC(Wrk_ClosedFdbk) ,XIO(Cfg_LSFail) XIO(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) ] OTE(Sts_LSFail) MOV(3,Val_Fdbk) ,XIC(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) OTE(Sts_Opened) MOV(2,Val_Fdbk) ,XIC(Wrk_ClosedFdbk) XIO(Wrk_OpenFdbk) OTE(Sts_Closed) MOV(1,Val_Fdbk) ] ,[[XIC(Cfg_LSFail) XIO(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) ,XIO(Cfg_LSFail) XIC(Wrk_OpenFdbk) XIC(Wrk_ClosedFdbk) ] ,XIC(Inp_Sim) ] [XIO(Cfg_FailOpen) OTE(Sts_Closing) ,XIC(Cfg_FailOpen) OTE(Sts_Opening) ] CLR(Val_Fdbk) ];
				RC: "Reset the fault condition and simulation timers.$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [RES(Wrk_FullStallT) RES(Wrk_TransitStallT) RES(Wrk_SimOpenT) RES(Wrk_SimCloseT) ,[XIO(Cfg_FailOpen) OTU(Wrk_Open) ,XIC(Cfg_FailOpen) OTL(Wrk_Open) ] ,OTU(Wrk_SimOpenLS) OTU(Wrk_SimClosedLS) ,OTU(Wrk_StartHorn) ];
				RC: "Outputs are cleared when Disabled (EnableInFalse).$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [OTU(Out) ,OTU(Out_Horn) ];
				RC: "Show the current state of the valve.";
				N: [XIC(Wrk_ClosedFdbk) MOV(1,Val_Sts) ,XIC(Wrk_OpenFdbk) MOV(2,Val_Sts) ,XIO(Wrk_ClosedFdbk) XIO(Wrk_OpenFdbk) [XIC(Cfg_FailOpen) MOV(6,Val_Sts) ,XIO(Cfg_FailOpen) MOV(5,Val_Sts) ] ];
				RC: "Show the motor as Disabled and Not Ready, not Available, and with no$N"
				    "Maintenance Bypass breadcrumb.$N"
				    "Clear remaining Status bits.$N"
				    "Show the enumerated valve command as NONE.$N"
				    "Show the enumerated valve fault status as NONE.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable and NoMode replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [OTL(Sts_NotRdy) OTU(Sts_Available) OTU(Sts_MaintByp) ,OTU(Nrdy_CfgErr) OTU(Nrdy_Fail) OTU(Nrdy_Intlk) ,OTL(Nrdy_OoS) OTU(Nrdy_IOFault) OTU(Nrdy_Perm) ,CLR(Val_Cmd) CLR(Val_Fault) ];
				RC: "If this Analog Output is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then show the alarms as $QParent object out of service$Q.$N"
				    "Show the overall acknowledgement status.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed P_Mode to P_CmdSrc, added Out of Service.  #####";
				N: [OTL(FullStall.Inp_OoS) P_Alarm(FullStall) ,OTL(TransitStall.Inp_OoS) P_Alarm(TransitStall) ,OTL(IntlkTrip.Inp_OoS) P_Alarm(IntlkTrip) ,OTL(IOFault.Inp_OoS) P_Alarm(IOFault) ,CLR(Val_Notify) CLR(Val_NotifyAll) ,[XIC(FullStall.Val_Notify.0) ,XIC(TransitStall.Val_Notify.0) ,XIC(IntlkTrip.Val_Notify.0) ,XIC(IOFault.Val_Notify.0) ] OTL(Val_Notify.0) OTL(Val_NotifyAll.0) ,[XIC(FullStall.Sts_AlmInh) ,XIC(TransitStall.Sts_AlmInh) ,XIC(IntlkTrip.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ] OTE(Sts_AlmInh) ];
				RC: "============================================================$N"
				    "ENUMERATED STATUS VALUES$N"
				    "============================================================$N"
				    "Source and Quality (Srcq) for Val_InpPV$N"
				    "Start with the Srcq from the Input Channel object if it$'s available.$N"
				    "Otherwise, start based on bad/uncertain input bits.$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [CLR(Wrk_SrcQ) ,[XIO(Cfg_HasOpenLS) ,XIO(Cfg_HasClosedLS) ] MOV(1,Wrk_SrcQ) ,XIO(Cfg_HasOpenLS) XIO(Cfg_HasClosedLS) MOV(2,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: MOV(20,SrcQ);
		END_ROUTINE

		ROUTINE Logic (Description := "Normal Scan: control / monitor solenoid-operated valve")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_ValveSO:  PROCESS -- SOLENOID OPERATED VALVE$N"
				    "============================================================$N"
				    "Revision 4.10.01 Release  2019-10-17:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-16:  Changed $QMode$Q to $QCommand Source$Q. Changed Inf_ items$N"
				    "to HMI_, and added Cfg_Area for security. Added unacked alarm count.$N"
				    "Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "Changed delay / time configuration items to REAL seconds.$N"
				    "V4.00.01  2018-08-24:  Corrected Reset Command logic.$N"
				    "V4.00.02  2018-11-02:  Modified handling of simultaneous open and close commands.$N"
				    "V4.10.00  2019-03-25:  Added audible alert on commanded energize. Added Horn$N"
				    "Status, Horn Inhibit. Updated to P_CmdSrc V4.10.00. Added Cfg_HasMoreObj.$N"
				    "V4.10.01  2019-10-17:  No changes, uprevved because P_CmdSrc 4.10.01 is used.$N"
				    "============================================================$N"
				    "This Instruction controls and monitors a single solenoid operated$N"
				    "valve (typ. two position: opened, closed) and provides:$N"
				    "$N"
				    "*  Support for fail open (energize to close) and fail closed (energize to open, default) valves$N"
				    "*  Monitoring of limit switch feedback, display of actual valve status$N"
				    "*  Detection of failure to move (full stall), failure to reach position (transit stall)$N"
				    "*  Monitoring of Permissive conditions to allow energizing$N"
				    "*  Monitoring of Interlock conditions to de-energize$N"
				    "*  Simulation, providing feedback of a working valve while disabling outputs$N"
				    "*  Monitoring of I/O communication faults$N"
				    "*  Alarms for Full Stall, Transit Stall, Interlock Trip, I/O Fault$N"
				    "*  $QAvailable$Q status for use by automation logic to know whether valve$N"
				    "can be controlled by other objects.$N"
				    "$N"
				    "Command Sources are arbitrated by a P_CmdSrc Add-On Instruction instance.$N"
				    "Command Sources: Operator, External, Program, External, Override, Maintenance,$N"
				    "Out of Service, Hand.  Alarms are provided by P_Alarm Add-On Instruction instances.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)LOWER(Cfg_Desc,Cfg_Label)LOWER(Cfg_Tag,Cfg_Area)LOWER(HMI_Lib,HMI_Type);
				RC: "This rung handles received Command Source selection Inputs and Commands:$N"
				    "$N"
				    "NOTE:  All Commands for Command Source and Alarm are aliased directly to the$N"
				    "corresponding Commands in the contained P_CmdSrc and P_Alarm AOIs.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed P_Mode to P_CmdSrc.  #####";
				N: LBL(SkipText)P_CmdSrc(CmdSrc);
				RC: "This rung handles simple First-Come First-Served Ownership Arbitration.$N"
				    "If a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$N"
				    "Ownership is assigned to the requesting ID.  When that requestor sets the Owner ID back$N"
				    "to zero, Ownership is relinquished back to NONE.";
				N: [EQU(PSet_Owner,0) ,EQU(Val_Owner,0) ]MOV(PSet_Owner,Val_Owner);
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "If the Valve does not have an Open Limit Switch input,$N"
				    "it cannot be used for Valve feedback checking.";
				N: XIO(Cfg_HasOpenLS)OTU(Cfg_UseOpenLS);
				RC: "If the Valve does not have a Closed Limit Switch input,$N"
				    "it cannot be used for Valve feedback checking.";
				N: XIO(Cfg_HasClosedLS)OTU(Cfg_UseClosedLS);
				RC: "Enter the time (in seconds) for the Valve to successfully move from its starting position before declaring a fault.$N"
				    "Enter the time (in seconds) for the Valve to successfully reach its target position before declaring a fault.$N"
				    "Enter the time (in seconds) to pulse the valve outputs (Out_Open, Out_Close and Out_Stop)$N"
				    "(zero - held on continuously)$N"
				    "$N"
				    "If the timer preset calcuated wraps negative (more than 2.14... million seconds), then max out the$N"
				    "Timer Preset.  Note that a negative timer preset will fault the controller!!!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed delay / time configuration items to REAL seconds.  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####$N"
				    "#####  Added Inp_HornInh to disable Horn operation.  #####";
				N: [[MUL(Cfg_FullStallT,1000.0,Wrk_FullStallT.PRE) XIC(Wrk_FullStallT.PRE.31) MOV(2147483647,Wrk_FullStallT.PRE) ,MUL(Cfg_TransitStallT,1000.0,Wrk_TransitStallT.PRE) XIC(Wrk_TransitStallT.PRE.31) MOV(2147483647,Wrk_TransitStallT.PRE) ,MUL(Cfg_StartHornT,1000.0,Wrk_StartHornT.PRE) XIC(Wrk_StartHornT.PRE.31) CLR(Wrk_StartHornT.PRE) ] OTE(Err_Timer) ,[XIC(Inp_HornInh) ,GRT(Cfg_StartHornT,1000.0) CLR(Cfg_StartHornT) ] CLR(Wrk_StartHornT.PRE) ];
				RC: "Enter the time (in seconds) to echo back the desired state when Opened or Closed in simulation$N"
				    "$N"
				    "Handle timer preset invalid values as above.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed delay / time configuration items to REAL seconds.  #####";
				N: [MUL(Cfg_SimFdbkT,1000.0,Wrk_SimOpenT.PRE) XIC(Wrk_SimOpenT.PRE.31) CLR(Wrk_SimOpenT.PRE) OTE(Err_Sim) ,MOV(Wrk_SimOpenT.PRE,Wrk_SimCloseT.PRE) ];
				RC: "This rung generates a summary Bad Config status, simply an OR of the individual bits provided above$N"
				    "(in the Configuration handling section).";
				N: [XIC(Err_Timer) ,XIC(Err_Sim) ]OTE(Nrdy_CfgErr);
				RC: "============================================================$N"
				    "SIMULATION TIMERS$N"
				    "============================================================$N"
				    "If the Valve SHOULD BE Opened, run an Open Simulation Timer.$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: XIC(Wrk_Open)XIO(Wrk_StartHorn)TON(Wrk_SimOpenT,?,?);
				RC: "If the valve SHOULD BE CLosed, run a Close Simulation Timer.$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: XIO(Wrk_Open)XIO(Wrk_StartHorn)TON(Wrk_SimCloseT,?,?);
				RC: "When 1/4 of the valve simulation open time has expired, move off the simulated closed limit switch.";
				N: CMP(Wrk_SimOpenT.ACC>(Wrk_SimOpenT.PRE/4))[XIC(Cfg_LSFail) OTU(Wrk_SimClosedLS) ,XIO(Cfg_LSFail) OTL(Wrk_SimOpenLS) ];
				RC: "When 1/4 of the valve simulation close time has expired, move off the simulated open limit switch.";
				N: CMP(Wrk_SimCloseT.ACC>(Wrk_SimCloseT.PRE/4))[XIC(Cfg_LSFail) OTU(Wrk_SimOpenLS) ,XIO(Cfg_LSFail) OTL(Wrk_SimClosedLS) ];
				RC: "When the valve simulation open time has expired, move onto the simulated open limit switch.";
				N: XIC(Wrk_SimOpenT.DN)OTL(Wrk_SimOpenLS)OTU(Wrk_SimClosedLS);
				RC: "When the valve simulation close time has expired, move onto the simulated closed limit switch.";
				N: XIC(Wrk_SimCloseT.DN)OTL(Wrk_SimClosedLS)OTU(Wrk_SimOpenLS);
				RC: "============================================================$N"
				    "DEVICE FEEDBACK PROCESSING$N"
				    "============================================================$N"
				    "If the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$N"
				    "use the state of the limit switch feedback inputs as the Valve position.$N"
				    "$N"
				    "If the Valve is being simulated or has no limit switch feedback, use the Sim Timers to provide$N"
				    "$Qfake$Q feedback signals based on the simulation time to Open and time to Close.";
				N: [XIO(Inp_Sim) [XIC(Cfg_UseOpenLS) XIC(Inp_OpenLS) ,XIO(Cfg_UseOpenLS) XIC(Cfg_UseClosedLS) XIO(Inp_ClosedLS) ] ,[XIC(Inp_Sim) ,XIO(Cfg_UseOpenLS) XIO(Cfg_UseClosedLS) ] XIC(Wrk_SimOpenLS) ]OTE(Wrk_OpenFdbk);
				RC: "If the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$N"
				    "use the state of the limit switch feedback inputs as the Valve position.$N"
				    "$N"
				    "If the Valve is being simulated or has no limit switch feedback, use the Sim Timers to provide$N"
				    "$Qfake$Q feedback signals based on the simulation time to Open and time to Close.";
				N: [XIO(Inp_Sim) [XIC(Cfg_UseClosedLS) XIC(Inp_ClosedLS) ,XIO(Cfg_UseClosedLS) XIC(Cfg_UseOpenLS) XIO(Inp_OpenLS) ] ,[XIC(Inp_Sim) ,XIO(Cfg_UseClosedLS) XIO(Cfg_UseOpenLS) ] XIC(Wrk_SimClosedLS) ]OTE(Wrk_ClosedFdbk);
				RC: "This rung generates the Valve Feedback Status bits and Enumeration Value:$N"
				    "Limit Switch Fail, if the Limit Switches are in the fail position (won$'t be seen in Simulation)$N"
				    "Opened, if the valve is confirmed opened$N"
				    "Closed, if the valve is confirmed closed$N"
				    "Moving, if the Limit Switches show travel";
				N: [[XIC(Cfg_LSFail) XIC(Wrk_OpenFdbk) XIC(Wrk_ClosedFdbk) ,XIO(Cfg_LSFail) XIO(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) ] OTE(Sts_LSFail) MOV(3,Val_Fdbk) ,XIC(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) MOV(2,Val_Fdbk) ,XIC(Wrk_ClosedFdbk) XIO(Wrk_OpenFdbk) MOV(1,Val_Fdbk) ,[XIC(Cfg_LSFail) XIO(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) ,XIO(Cfg_LSFail) XIC(Wrk_OpenFdbk) XIC(Wrk_ClosedFdbk) ] CLR(Val_Fdbk) ];
				RC: "============================================================$N"
				    "INTERLOCK / PERMISSIVE BYPASS / CHECK COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Bypass Command bypasses the Bypassable Permissives and Interlocks.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed P_Mode to P_CmdSrc. Bypass now a Maintenance function.  #####";
				N: XIC(MCmd_Bypass)OTU(MCmd_Bypass)OTL(Wrk_Bypass);
				RC: "The Check Command enables checking of ALL$N"
				    "Permissives and Interlocks (cancels the bypass).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed P_Mode to P_CmdSrc. Bypass now a Maintenance function.  #####";
				N: XIC(MCmd_Check)OTU(MCmd_Check)OTU(Wrk_Bypass);
				RC: "If the internal Bypass flag is set, Bypassable Interlocks and Permissives ARE BYPASSED.$N"
				    "Bypassing is ACTIVE if Bypass selected OR in Maintenance Mode,$N"
				    "or in Override Mode if Override Bypassing is configured.";
				N: [XIC(Wrk_Bypass) OTE(Sts_Bypass) ,XIC(Sts_Maint) ,XIC(Sts_Ovrd) XIC(Cfg_OvrdPermIntlk) ]OTE(Sts_BypActive);
				RC: "If a Maintenance Bypass function is active, display the Maintenance Bypass$N"
				    "Indicator (triangle symbol) on the graphic symbol.  Bypass functions are:$N"
				    "*  Interlock / Permissive Bypass function is enabled$N"
				    "*  Valve HAS opened position feedback designated by engineer, but$N"
				    "maintenance has selected to NOT USE opened position feedback$N"
				    "*  Valve HAS closed position feedback designated by engineer, but$N"
				    "maintenance has selected to NOT USE closed position feedback";
				N: [XIC(Sts_Bypass) ,XIC(Cfg_HasOpenLS) XIO(Cfg_UseOpenLS) ,XIC(Cfg_HasClosedLS) XIO(Cfg_UseClosedLS) ]OTE(Sts_MaintByp);
				RC: "Ready for Interlock / Permissive Bypass if not bypassed.$N"
				    "Ready to cancel Bypass (resume checking) if bypassed.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Changed P_Mode to P_CmdSrc. Bypass now a Maintenance function.  #####";
				N: [XIO(Wrk_Bypass) OTE(MRdy_Bypass) ,XIC(Wrk_Bypass) OTE(MRdy_Check) ];
				RC: "============================================================$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "============================================================$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.$N"
				    "$N"
				    "This rung processes received Reset Commands from:$N"
				    "$N"
				    "1.  The Operator via HMI Operator Command, or$N"
				    "2.  Higher-level strategies via Program Command$N"
				    "3.  Pushbuttons or other block via Input$N"
				    "4.  Resets initiated by other device Operator Commands (if configured to do so)$N"
				    "and forwards the Reset to ALL Alarms and latched Shed conditions.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External Command Source and Commands.  #####$N"
				    "#####  V4.00.01  2018-08-24:  Corrected Reset Command logic.  #####";
				N: [XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(XCmd_Reset) OTU(XCmd_Reset) ,XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(Inp_Reset) ,XIC(Cfg_OCmdResets) [XIC(OCmd_Open) ,XIC(OCmd_Close) ] [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIC(Cfg_XCmdResets) [XIC(XCmd_Open) ,XIC(XCmd_Close) ] XIC(Sts_Ext) ,XIC(OCmd_ResetAckAll) OTU(OCmd_ResetAckAll) [OTL(PCmd_FullStallAck) ,OTL(PCmd_TransitStallAck) ,OTL(PCmd_IntlkTripAck) ,OTL(PCmd_IOFaultAck) ] ][OTL(FullStall.PCmd_Reset) OTL(TransitStall.PCmd_Reset) OTL(IntlkTrip.PCmd_Reset) OTL(IOFault.PCmd_Reset) ,XIC(Sts_FullStall) RES(Wrk_FullStallT) ,XIC(Sts_TransitStall) RES(Wrk_TransitStallT) ,OTU(Nrdy_Fail) ,[XIO(Inp_IOFault) ,XIC(Inp_Sim) ] OTU(Nrdy_IOFault) ];
				RC: "============================================================$N"
				    "VALVE FULL STALL DETECTION$N"
				    "============================================================$N"
				    "If the Valve was told to Open and it hasn$'t moved off the Fully Closed position,$N"
				    "or if it was told to Close and it hasn$'t moved off the Fully Open position,$N"
				    "run the Full Stall Timer.$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [XIC(Wrk_Open) EQU(Val_Fdbk,1) ,XIO(Wrk_Open) EQU(Val_Fdbk,2) ]XIO(Sts_Maint)XIO(Wrk_TransitStallT.DN)XIO(Wrk_StartHorn)TON(Wrk_FullStallT,?,?);
				RC: "If the Full Stall timer times out, the valve never moved when it was commanded.$N"
				    "If we$'re not in Maintenance mode, issue a Full Stall Status.";
				N: XIC(Wrk_FullStallT.DN)OTE(Sts_FullStall);
				RC: "============================================================$N"
				    "VALVE TRANSIT STALL DETECTION$N"
				    "============================================================$N"
				    "If the Valve was told to Open and it hasn$'t reached fully Open,$N"
				    "or if it was told to Close and it hasn$'t reached fully Closed,$N"
				    "run the Transit Stall Timer.$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [XIC(Wrk_Open) NEQ(Val_Fdbk,2) ,XIO(Wrk_Open) NEQ(Val_Fdbk,1) ]XIO(Sts_Maint)XIO(Wrk_FullStallT.DN)XIO(Wrk_StartHorn)TON(Wrk_TransitStallT,?,?);
				RC: "If the Transit Stall timer times out and we$'re not in Maintenance Mode,$N"
				    "raise the Transit Stall Status (valve moved but did not reach target).";
				N: XIC(Wrk_TransitStallT.DN)OTE(Sts_TransitStall);
				RC: "============================================================$N"
				    "SHED ON FAULT LOGIC$N"
				    "============================================================$N"
				    "This rung handles latching in of conditions which are configured to cause$N"
				    "the valve to shed (de-energize).";
				N: [XIC(Sts_FullStall) XIC(Cfg_ShedOnFullStall) ,XIC(Sts_TransitStall) XIC(Cfg_ShedOnTransitStall) ]OTL(Nrdy_Fail);
				RC: "============================================================$N"
				    "VALVE COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Valve is NOT READY if Interlocks are not OK, Permissives do not allow$N"
				    "the valve to move, there is a latched Fault, the valve is disabled, or$N"
				    "there is a configuration error.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIC(Nrdy_CfgErr) ,XIC(Sts_OoS) OTE(Nrdy_OoS) ,[XIO(Inp_IntlkOK) XIO(Sts_BypActive) ,XIO(Inp_NBIntlkOK) ] [[XIC(Cfg_FailOpen) XIO(Wrk_Open) ,XIO(Cfg_FailOpen) XIC(Wrk_Open) ] OTE(Sts_IntlkTrip) ,OTE(Nrdy_Intlk) ] ,[XIO(Inp_PermOK) XIO(Sts_BypActive) ,XIO(Inp_NBPermOK) ] [XIO(Wrk_Open) XIO(Cfg_FailOpen) ,XIC(Wrk_Open) XIC(Cfg_FailOpen) ] OTE(Nrdy_Perm) ,XIC(Inp_IOFault) XIO(Inp_Sim) OTE(Sts_IOFault) XIC(Cfg_ShedOnIOFault) OTL(Nrdy_IOFault) ]OTE(Wrk_NotRdy);
				RC: "============================================================$N"
				    "VALVE COMMAND HANDLING$N"
				    "============================================================$N"
				    "The Valve is NOT READY if Interlocks are not OK, Permissives do not allow$N"
				    "the valve to move, there is a latched Fault, the valve is disabled, or$N"
				    "there is a configuration error.";
				N: [XIC(Wrk_NotRdy) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) ]OTE(Sts_NotRdy);
				RC: "The motor is AVAILABLE to be run by automation if it is in PROGRAM$N"
				    "Mode and the $QNot Ready$Q status is cleared.$N"
				    "#####  V4.10.00  2019-03-25:  Changed availability to use input availability from interlocks.  #####";
				N: XIC(Sts_Prog)XIO(Nrdy_Fail)XIO(Nrdy_IOFault)XIO(Nrdy_Perm)XIO(Nrdy_CfgErr)XIO(Nrdy_OoS)[[XIC(Inp_IntlkOK) ,XIC(Sts_BypActive) ] XIC(Inp_NBIntlkOK) ,XIC(Inp_IntlkAvail) ]OTE(Sts_Available);
				RC: "If a Valve CLOSE command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is CLOSE, mark the valve TO CLOSE.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External Command Source and Commands.  #####$N"
				    "#####  V4.00.02  2018-11-02:  Modified handling of simultaneous Commands.  #####";
				N: [XIC(OCmd_Close) OTU(OCmd_Close) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIC(XCmd_Close) OTU(XCmd_Close) XIC(Sts_Ext) ,XIC(PCmd_Close) OTU(PCmd_Close) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,1) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]OTE(Wrk_CloseCmdRcvd);
				RC: "If a Valve OPEN command is received in Operator, Program or Maintenance,$N"
				    "or if in Override and the Override State is OPEN, mark the valve TO OPEN.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####$N"
				    "#####  Added External Command Source and Commands.  #####$N"
				    "#####  V4.00.02  2018-11-02:  Modified handling of simultaneous Commands.  #####";
				N: [XIC(OCmd_Open) OTU(OCmd_Open) [XIC(Sts_Oper) ,XIC(Sts_Maint) ] ,XIC(XCmd_Open) OTU(XCmd_Open) XIC(Sts_Ext) ,XIC(PCmd_Open) OTU(PCmd_Open) XIC(Sts_Prog) ,EQU(Inp_OvrdCmd,2) CLR(Inp_OvrdCmd) XIC(Sts_Ovrd) ]OTE(Wrk_OpenCmdRcvd);
				RC: "If a Valve CLOSE command is received and there$'s no OPEN command (or closed is the fail state),$N"
				    "then check permissives -- if OK, close the valve.$N"
				    "#####  V4.00.02  2018-11-02:  Modified handling of simultaneous Commands.  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: XIC(Wrk_CloseCmdRcvd)[XIO(Wrk_OpenCmdRcvd) ,XIO(Cfg_FailOpen) ][[XIC(Inp_PermOK) ,XIC(Sts_BypActive) ] XIC(Inp_NBPermOK) ,XIO(Cfg_FailOpen) ][XIC(Sts_Opened) ,XIC(Sts_Opening) [XIO(Cfg_FailOpen) ,XIC(Sts_Maint) ,XIC(Sts_TransitStall) ,XIC(Sts_FullStall) ] ]XIO(Sts_Closed)[OTU(Wrk_Open) ,XIC(Cfg_FailOpen) OTL(Wrk_StartHorn) ,XIO(Cfg_FailOpen) OTU(Wrk_StartHorn) ];
				RC: "If a Valve OPEN command is received and there$'s no CLOSE command (or opened is the fail state),$N"
				    "then check permissives -- if OK, open the valve.$N"
				    "#####  V4.00.02  2018-11-02:  Modified handling of simultaneous Commands.  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: XIC(Wrk_OpenCmdRcvd)[XIO(Wrk_CloseCmdRcvd) ,XIC(Cfg_FailOpen) ][[XIC(Inp_PermOK) ,XIC(Sts_BypActive) ] XIC(Inp_NBPermOK) ,XIC(Cfg_FailOpen) ][XIC(Sts_Closed) ,XIC(Sts_Closing) [XIC(Cfg_FailOpen) ,XIC(Sts_Maint) ,XIC(Sts_TransitStall) ,XIC(Sts_FullStall) ] ]XIO(Sts_Opened)[OTL(Wrk_Open) ,XIO(Cfg_FailOpen) OTL(Wrk_StartHorn) ,XIC(Cfg_FailOpen) OTU(Wrk_StartHorn) ];
				RC: "Higher Priority: HAND always wins over other sources:$N"
				    "If in Hand, have the Valve follow the position feedback.$N"
				    "If the valve is Fail Open, have it set to Open if NOT confirmed FULLY CLOSED.$N"
				    "If the valve is Fail Close, have it set to Close if NOT confirmed FULLY OPEN.$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [XIC(Sts_Hand) ,XIO(Inp_Sim) ONS(Wrk_NoLongerSim) ,XIC(S:FS) ][[EQU(Val_Fdbk,2) ,NEQ(Val_Fdbk,1) XIC(Cfg_FailOpen) ] OTL(Wrk_Open) ,[EQU(Val_Fdbk,1) XIC(Wrk_ClosedFdbk) ,NEQ(Val_Fdbk,2) XIO(Cfg_FailOpen) ] OTU(Wrk_Open) ,[XIO(Cfg_UseOpenLS) XIO(Cfg_UseClosedLS) ,XIC(Sts_NotRdy) ] [XIC(Cfg_FailOpen) OTL(Wrk_Open) ,XIO(Cfg_FailOpen) OTU(Wrk_Open) ] ,OTU(Wrk_StartHorn) ];
				RC: "Sound the horn when energising$N"
				    "$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [XIC(Wrk_Open) XIO(Cfg_FailOpen) ,XIO(Wrk_Open) XIC(Cfg_FailOpen) ][XIC(Wrk_StartHorn) TON(Wrk_StartHornT,?,?) TON(Wrk_StartHornT,?,?) ,XIC(Wrk_StartHornT.DN) OTU(Wrk_StartHorn) ];
				RC: "If anything stops opening, also stop the pre-start audible.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [XIO(Wrk_Open) XIO(Cfg_FailOpen) ,XIC(Wrk_Open) XIC(Cfg_FailOpen) ]OTU(Wrk_StartHorn);
				RC: "If we are sounding the audible start alert (start command accepted) and we lose$N"
				    "the permissive before actually opening or closing the valve, cancel the command$N"
				    "$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: XIC(Wrk_StartHorn)[XIO(Inp_PermOK) XIO(Sts_BypActive) ,XIO(Inp_NBPermOK) ][XIC(Wrk_Open) XIO(Cfg_FailOpen) OTU(Wrk_Open) OTU(Wrk_StartHorn) ,XIO(Wrk_Open) XIC(Cfg_FailOpen) OTL(Wrk_Open) OTU(Wrk_StartHorn) ];
				RC: "Highest Priority:$N"
				    "If the Valve has a Shed Fault OR if the Valve is Disabled or$N"
				    "has a Configuration Error, set it to its FAIL STATE.";
				N: XIC(Sts_NotRdy)[XIC(Cfg_FailOpen) OTL(Wrk_Open) ,XIO(Cfg_FailOpen) OTU(Wrk_Open) ];
				RC: "============================================================$N"
				    "OUTPUT GENERATION$N"
				    "============================================================$N"
				    "If the Valve is NOT SIMULATED, generate the appropriate outputs for the Valve.$N"
				    "If the Valve is not faulted and not disabledm then:$N"
				    "if the valve energizes to open and should be open, or$N"
				    "if the valve energizes to close and should be closed,$N"
				    "then energize the Output (Out)$N"
				    "$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: XIO(Inp_Sim)[XIC(Wrk_Open) XIO(Cfg_FailOpen) ,XIO(Wrk_Open) XIC(Cfg_FailOpen) ][XIO(Wrk_StartHorn) OTE(Out) ,XIC(Wrk_StartHorn) OTE(Out_Horn) ];
				RC: "============================================================$N"
				    "DEVICE STATUS GENERATION$N"
				    "============================================================$N"
				    "Val_Cmd is the currently-executing command:$N"
				    "0 = None$N"
				    "1 = Close$N"
				    "2 = Open$N"
				    "$N"
				    "Val_Sts is the current device status, as determined by this AOI,$N"
				    "based on its knowledge of commands executed and feedback.$N"
				    "(This is the status that should be monitored by, for example, FT Historian.)$N"
				    "0 = Powerup / Unknown$N"
				    "1 = Closed$N"
				    "2 = Opened$N"
				    "5 = Closing$N"
				    "6 = Opening$N"
				    "10 = Horn$N"
				    "33 = Out of Service$N"
				    "$N"
				    "Val_Fault is the current device fault status, as determined by this AOI,$N"
				    "based on its knowledge of commands executed and feedback.$N"
				    "(This is the fault status that should be monitored by, for example, FT Historian.)$N"
				    "0 = None$N"
				    "16 = Full Stall$N"
				    "17 = Transit Stall$N"
				    "32 = I/O Fault (from Input)$N"
				    "34 = Configuration Error$N"
				    "$N"
				    "#####  V4.10.00  2019-03-25:  Added Horn Status.  #####";
				N: CLR(Wrk_Cmd)CLR(Wrk_Sts)CLR(Wrk_Fault);
				RC: "These rungs generate the Opening, Opened, Closeping and Closed Status bits.$N"
				    "$N"
				    "If the Valve is in HAND and HAS NO POSITION FEEDBACK, its state is meaningless;$N"
				    "turn off ALL the Sts_xxx states!!!!!$N"
				    "$N"
				    "If the Valve is commanded to Open and the feedback doesn$'t yet show it Opened,$N"
				    "the Valve is OpenING.$N"
				    "$N"
				    "If the Valve is commanded to Open and the feedback shows it Opened,$N"
				    "the Valve is Opened.$N"
				    "$N"
				    "If the Valve is commanded to Close and the feedback does not show Closed,$N"
				    "the Valve is CloseING.$N"
				    "$N"
				    "If the Valve is commanded to Close and the feedback shows it has Closed,$N"
				    "the Valve is Closed.$N"
				    "$N"
				    "If the audible alert is active, show the Status as HORN.$N"
				    "$N"
				    "#####  V4.10.00  2019-03-25:  Added Horn Status.  #####";
				N: [XIO(Sts_Hand) ,XIC(Cfg_UseOpenLS) ,XIC(Cfg_UseClosedLS) ][XIO(Wrk_StartHorn) XIC(Wrk_Open) [[XIO(Wrk_OpenFdbk) ,XIC(Wrk_ClosedFdbk) ] OTE(Sts_Opening) MOV(6,Wrk_Sts) ,XIC(Wrk_OpenFdbk) XIO(Wrk_ClosedFdbk) OTE(Sts_Opened) MOV(2,Wrk_Sts) ] ,XIO(Wrk_StartHorn) XIO(Wrk_Open) [[XIO(Wrk_ClosedFdbk) ,XIC(Wrk_OpenFdbk) ] OTE(Sts_Closing) MOV(5,Wrk_Sts) ,XIC(Wrk_ClosedFdbk) XIO(Wrk_OpenFdbk) OTE(Sts_Closed) MOV(1,Wrk_Sts) ] ,XIC(Wrk_StartHorn) OTE(Sts_Horn) MOV(10,Wrk_Sts) ];
				RC: "============================================================$N"
				    "OPERATOR COMMAND READIES$N"
				    "============================================================$N"
				    "Ready to Open if in Operator or Maintenance, valve is NOT $'not ready$' and valve is closed,$N"
				    "or valve is closing and energizes to close.$N"
				    "$N"
				    "Ready to Close if in Operator or Maintenance, valve is NOT $'not ready$' and valve is opened,$N"
				    "or valve is opening and energizes to open.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [XIC(Sts_Oper) ,XIC(Sts_Maint) ]XIO(Wrk_NotRdy)[XIO(Sts_NotRdy) ,XIC(Cfg_OCmdResets) ][[XIC(Sts_Closed) ,XIC(Sts_Closing) [XIC(Cfg_FailOpen) ,XIC(Sts_Maint) ,XIC(Sts_TransitStall) ,XIC(Sts_FullStall) ] ] XIO(Sts_Opened) XIO(Wrk_StartHorn) OTE(ORdy_Open) ,[XIC(Sts_Opened) ,XIC(Sts_Opening) [XIO(Cfg_FailOpen) ,XIC(Sts_Maint) ,XIC(Sts_TransitStall) ,XIC(Sts_FullStall) ] ] XIO(Sts_Closed) XIO(Wrk_StartHorn) OTE(ORdy_Close) ];
				RC: "============================================================$N"
				    "ALARM PROCESSING$N"
				    "============================================================$N"
				    "The various alarms are ALWAYS allowed to Exist (Cfg_HasXxxAlarm can be 1), EXCEPT:$N"
				    "$N"
				    "* If the valve DOES NOT HAVE ANY POSITION FEEDBACK, the Full Stall alarm$N"
				    "will never occur and should not exist.$N"
				    "* If the valve DOES NOT HAVE BOTH POSITION FEEDBACKs, the Transit Stall alarm$N"
				    "will never occur and should not exist.$N"
				    "(If feedback exists, the stall alarms must be allowed to exist.)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [OTL(IntlkTrip.PCfg_AllowExist) OTL(IOFault.PCfg_AllowExist) ,[XIC(Cfg_HasClosedLS) ,XIC(Cfg_HasOpenLS) ] OTE(FullStall.PCfg_AllowExist) ,XIC(Cfg_HasClosedLS) XIC(Cfg_HasOpenLS) OTE(TransitStall.PCfg_AllowExist) ];
				RC: "Let the Alarm instance know if this object is taken Out of Service$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Now using P_CmdSrc, including Out of Service.  #####";
				N: XIC(CmdSrc.Sts_OoS)OTE(FullStall.Inp_OoS)OTE(TransitStall.Inp_OoS)OTE(IntlkTrip.Inp_OoS)OTE(IOFault.Inp_OoS);
				RC: "Handle Valve Full Stall (never moved) Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(FullStall);
				RC: "Handle Valve Transit Stall (moved but did not complete move)$N"
				    "Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(TransitStall);
				RC: "Handle Interlock Trip Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IntlkTrip);
				RC: "Handle I/O Fault Alarm Processing using the standard P_Alarm AOI.";
				N: P_Alarm(IOFault);
				RC: "If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$N"
				    "summary status bit (which puts the $QI$Q box on the graphic symbol).";
				N: [XIC(TransitStall.Sts_AlmInh) ,XIC(FullStall.Sts_AlmInh) ,XIC(IntlkTrip.Sts_AlmInh) ,XIC(IOFault.Sts_AlmInh) ]OTE(Sts_AlmInh);
				RC: "This rung generates a summary Bad Config status, simply an OR of the individual bits provided above$N"
				    "(in the Configuration handling section).";
				N: [XIC(Nrdy_CfgErr) ,[XIC(FullStall.Sts_Err) ,XIC(TransitStall.Sts_Err) ,XIC(IntlkTrip.Sts_Err) ,XIC(IOFault.Sts_Err) ] OTE(Err_Alarm) ]OTE(Sts_Err);
				RC: "This rung handles the remaining Val_Cmd, Val_Sts and Val_Fault enumerated values.$N"
				    "$N"
				    "#####  V4.00.00 2018-07-16:  Disable/Enable replaced by P_CmdSrc Out of Service (OoS).  #####";
				N: [XIO(Wrk_StartHorn) XIC(Sts_Closing) MOV(1,Wrk_Cmd) ,XIO(Wrk_StartHorn) XIC(Sts_Opening) MOV(2,Wrk_Cmd) ,XIC(Sts_TransitStall) MOV(16,Wrk_Fault) ,XIC(Sts_FullStall) MOV(17,Wrk_Fault) ,[XIC(Sts_IOFault) ,XIC(Nrdy_IOFault) ] MOV(32,Wrk_Fault) ,XIC(Sts_Err) MOV(34,Wrk_Fault) ,MOV(Wrk_Cmd,Val_Cmd) MOV(Wrk_Sts,Val_Sts) MOV(Wrk_Fault,Val_Fault) ];
				RC: "============================================================$N"
				    "ENUMERATED SOURCE / QUALITY VALUES$N"
				    "============================================================$N"
				    "Source and Quality for Input / Output values / status (SrcQ_IO)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [CLR(Wrk_SrcQ) ,[XIO(Cfg_HasOpenLS) ,XIO(Cfg_HasClosedLS) ] MOV(1,Wrk_SrcQ) ,XIO(Cfg_HasOpenLS) XIO(Cfg_HasClosedLS) MOV(2,Wrk_SrcQ) ,XIC(Inp_IOFault) MOV(34,Wrk_SrcQ) ,XIC(Inp_Sim) MOV(9,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ_IO) ];
				RC: "Source and Quality for primary values / status (SrcQ)$N"
				    "$N"
				    "0 = Good: live, confirmed good;   1 = Good: live, assumed good;$N"
				    "2 = Good: no feedback, assumed good;   8 = Test: Simulated;   9 = Test: Loopback;$N"
				    "10 = Test: Manually Entered;   16 = Uncertain: Live, off-spec;$N"
				    "17 = Uncertain, Substituted at Device / Bus;   18 = Uncertain, Substituted at AOI;$N"
				    "19 = Uncertain, using last known good;    20 = Uncertain, using replacement value;$N"
				    "32 = Bad, Signal Failure;   33 = Bad, Channel Fault;$N"
				    "34 = Bad, Module / Comms Fault;   35 = Bad, Invalid Configuration";
				N: [MOV(SrcQ_IO,Wrk_SrcQ) ,[XIC(Cfg_HasOpenLS) XIO(Cfg_UseOpenLS) ,XIC(Cfg_HasClosedLS) XIO(Cfg_UseClosedLS) ] MOV(18,Wrk_SrcQ) ,MOV(Wrk_SrcQ,SrcQ) ];
				RC: "============================================================$N"
				    "NOTIFICATION VALUE$N"
				    "============================================================$N"
				    "Indicate the current alarm notification level as the max of any of the alarms,$N"
				    "and set the low-order bit for reset or ack required:$N"
				    "0 = Not in alarm, acknowledged$N"
				    "1 = Not in alarm, unacknowledged or reset required$N"
				    "2 = Low severity alarm, acknowledged$N"
				    "3 = Low severity alarm, unacknowledged$N"
				    "4 = Medium severity alarm, acknowledged$N"
				    "5 = Medium severity alarm, unacknowledged$N"
				    "6 = High severity alarm, acknowledged$N"
				    "7 = High severity alarm, unacknowledged$N"
				    "8 = Urgent severity alarm, acknowledged$N"
				    "9 = Urgent severity alarm, unacknowledged$N"
				    "#####  V4.00.00  2018-07-16:  Added Val_NotifyAll and Val_UnackAlmC to roll up alarm  #####$N"
				    "#####  priority / ack status and unack. alarm count.  #####";
				N: [CLR(Wrk_Notify) CLR(Wrk_UnackAlmC) ,GRT(FullStall.Val_Notify,Wrk_Notify) MOV(FullStall.Val_Notify,Wrk_Notify) ,GRT(TransitStall.Val_Notify,Wrk_Notify) MOV(TransitStall.Val_Notify,Wrk_Notify) ,GRT(IntlkTrip.Val_Notify,Wrk_Notify) MOV(IntlkTrip.Val_Notify,Wrk_Notify) ,GRT(IOFault.Val_Notify,Wrk_Notify) MOV(IOFault.Val_Notify,Wrk_Notify) ,[XIC(FullStall.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(TransitStall.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IntlkTrip.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ,XIC(IOFault.Val_Notify.0) ADD(Wrk_UnackAlmC,1,Wrk_UnackAlmC) ] OTE(Wrk_Notify.0) ,MOV(Wrk_Notify,Val_Notify) MOV(Wrk_Notify,Val_NotifyAll) MOV(Wrk_UnackAlmC,Val_UnackAlmC) ];
				RC: "This rung identifies:$N"
				    "* if any alarm reset or other reset is required; and$N"
				    "* if any reset or acknowledge from the operator is required.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_RdyAck and Sts_ResetReqd for use by external objects.  #####";
				N: [[XIC(FullStall.Sts_RdyAck) ,XIC(TransitStall.Sts_RdyAck) ,XIC(IntlkTrip.Sts_RdyAck) ,XIC(IOFault.Sts_RdyAck) ] OTE(Sts_RdyAck) ,[XIC(FullStall.Sts_RdyReset) ,XIC(TransitStall.Sts_RdyReset) ,XIC(IntlkTrip.Sts_RdyReset) ,XIC(IOFault.Sts_RdyReset) ,XIC(Nrdy_Fail) ,XIC(Nrdy_IOFault) XIO(Sts_IOFault) ] OTE(ORdy_Reset) ]OTE(ORdy_ResetAckAll);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear Ownership, set to De-Energized state, clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, set the Ownership to NO OWNER (0).";
				N: CLR(PSet_Owner)CLR(Val_Owner);
				RC: "$QLurking$Q Commands not handled elsewhere are cleared.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####$N"
				    "#####  Added External Command Source and Commands.  #####";
				N: [OTU(PCmd_Open) OTU(PCmd_Close) ,OTU(OCmd_Open) OTU(OCmd_Close) ,OTU(XCmd_Open) OTU(XCmd_Close) ,OTU(MCmd_Bypass) OTU(MCmd_Check) ,CLR(Inp_OvrdCmd) ,OTU(OCmd_Reset) OTU(OCmd_ResetAckAll) OTU(PCmd_Reset) OTU(XCmd_Reset) ];
				RC: "Since we$'re not processing Operator Commands or Settings, we$'re not READY for any of them either!$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Removed Disable, Enable; now handled by P_CmdSrc as OoS, IS.  #####";
				N: [OTU(ORdy_Open) OTU(ORdy_Close) OTU(ORdy_Reset) OTU(Sts_RdyAck) OTU(ORdy_ResetAckAll) ,OTU(MRdy_Bypass) OTU(MRdy_Check) ];
				RC: "On Prescan, set the valve to its DE-ENERGIZED STATE$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [XIO(Cfg_FailOpen) OTU(Wrk_Open) ,XIC(Cfg_FailOpen) OTL(Wrk_Open) ,OTU(Wrk_SimOpenLS) OTU(Wrk_SimClosedLS) ,OTU(Wrk_StartHorn) ];
				RC: "Clear the latched Run Command, latched Shed faults,$N"
				    "and reset the fault condition and command retrigger timers.";
				N: [OTU(Nrdy_Fail) OTU(Nrdy_IOFault) ,RES(Wrk_FullStallT) RES(Wrk_TransitStallT) RES(Wrk_SimOpenT) RES(Wrk_SimCloseT) ];
				RC: "All Outputs are de-energized on Prescan.$N"
				    "#####  V4.10.00  2019-03-25:  Added audible alert on commanded energize.  #####";
				N: [OTU(Out) ,OTU(Out_Horn) ];
				RC: "On Prescan, clear the following:$N"
				    "Val_Cmd (no command active)$N"
				    "Val_Fdbk (device position not determined)$N"
				    "Val_Sts (device status powerup / unknown)";
				N: CLR(Val_Cmd)CLR(Val_Fdbk)CLR(Val_Sts);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_Perm (Description := "Permissives",
	                                      Revision := "4.10",
	                                      RevisionExtension := ".00 Release",
	                                      RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                      Vendor := "Rockwell Automation",
	                                      ExecutePrescan := No,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := Yes,
	                                      CreatedDate := "2008-04-03T19:38:05.264Z",
	                                      CreatedBy := "Not Available",
	                                      EditedDate := "2020-12-08T03:32:20.045Z",
	                                      EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                      SoftwareRevision := "v32.02",
	                                      AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction monitors up to 16 Permissive conditions.  It provides these features:$N$N*  The $QOK$Q state of each Permissive Input is configurable.  By default,$N    each Input is 1 when OK to start, 0 when not OK to start.$N*  Permissives may be configured as Bypassable.  A separate Sts_NBPermOK $N    (Non-Bypassable Permissives OK) status is provided, which the destination$N    object can use for Bypass, Maintenance and other functions,$N    where Bypassable Permissives can be ignored.$N$NAll Permissive Inputs must be in their configured $QOK$Q states$Nfor the P_Perm instruction to provide a $QPermOK$Q status.$N$NAll non-bypassable Permissive inputs must be in their configured $QOK$Q states$Nfor the P_Perm instruction to provide a $QNBPermOK$Q status.$N$NFor each Permissive condition, a Tag may be defined for navigation. Clicking$Nthe Permissive description will call up the associated Tag$'s Faceplate.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-05)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* OSets / OCmds and MSets / MCmds are now LOCAL TAGS.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_Perm00 OF Wrk_Inp.0 (Description := "Permissive Cond 00, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			Inp_Perm01 OF Wrk_Inp.1 (Description := "Permissive Cond 01, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			Inp_Perm02 OF Wrk_Inp.2 (Description := "Permissive Cond 02, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			Inp_Perm03 OF Wrk_Inp.3 (Description := "Permissive Cond 03, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			Inp_Perm04 OF Wrk_Inp.4 (Description := "Permissive Cond 04, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			Inp_Perm05 OF Wrk_Inp.5 (Description := "Permissive Cond 05, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			Inp_Perm06 OF Wrk_Inp.6 (Description := "Permissive Cond 06, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			Inp_Perm07 OF Wrk_Inp.7 (Description := "Permissive Cond 07, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			Inp_Perm08 OF Wrk_Inp.8 (Description := "Permissive Cond 08, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm09 OF Wrk_Inp.9 (Description := "Permissive Cond 09, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm10 OF Wrk_Inp.10 (Description := "Permissive Cond 10, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm11 OF Wrk_Inp.11 (Description := "Permissive Cond 11, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm12 OF Wrk_Inp.12 (Description := "Permissive Cond 12, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm13 OF Wrk_Inp.13 (Description := "Permissive Cond 13, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm14 OF Wrk_Inp.14 (Description := "Permissive Cond 14, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm15 OF Wrk_Inp.15 (Description := "Permissive Cond 15, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_BypActive : BOOL (Description := "1=Permissive Bypassing is currently active",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0);
			Cfg_OKState : INT (Description := "Bits indicate which state (0 or 1) of each input is OK to start",
			                       Usage := Input,
			                       RADIX := Binary,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := -1);
			Cfg_Bypassable : INT (Description := "Set bits indicate which conditions can be bypassed",
			                          Usage := Input,
			                          RADIX := Binary,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasNav : INT (Description := "Set bits indicate which Navigation buttons are enabled",
			                      Usage := Input,
			                      RADIX := Binary,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Sts_PermOK : BOOL (Description := "Overall Permissive Status (1=OK to start)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 1);
			Sts_NBPermOK : BOOL (Description := "Non-Bypassable Permissive Status (1 =all non- bypassable Permissives OK to start)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 1);
			Sts_BypActive : BOOL (Description := "1=Permissive Bypassing is Active (ignore bypassable permissives)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Perm : INT (Description := "Individual Permissive Status (1=OK, 0=don$'t start)",
			                    Usage := Output,
			                    RADIX := Binary,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := -1);
			P_Perm : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Cfg_CondTxt : STRING_Cond[16] (Description := "Short HMI description of Permissive Conditions",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[[20,'Enter Description
			Wrk_Inp : INT (Description := "Collection copy of Inp_PermXXs",
			                  RADIX := Binary,
			                  ExternalAccess := Read/Write,
			                  DefaultData := -1);
			Wrk_Bypass : INT (Description := "Working Register for Bypassable Permissives",
			                     RADIX := Binary,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_InpInv : INT (Description := "Input states after inverting based on Cfg_OKState",
			                     RADIX := Binary,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			HMI_Type : STRING_16 (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[6,'P_Perm$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[11,'Permissives$00$00$00$00$00$00$00$00$00']");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[11,'Permissives$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_NavTag : STRING_NavTag[16] (Description := "Tagnames for destinations of Navigation buttons",
			                     ExternalAccess := Read/Write,
			                     DefaultData
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			MSet_Bypass : INT (Description := "Individual condition Maintenance Bypass toggles",
			                      RADIX := Binary,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Set summary $QOK$Q Status bits to FALSE (0)")
				RC: "============================================================$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "============================================================$N"
				    "If this Permissives instruction is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then set the summary Permissive OK Status bits to FALSE (0).";
				N: OTU(Sts_PermOK)OTU(Sts_NBPermOK);
				RC: "Individual Permissive Bypasses can only be set for conditions that are$N"
				    "configured as Bypassable.  This AND clears all the MSets for inputs$N"
				    "that are NOT Bypassable.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  OSets / OCmds and MSets / MCmds are now LOCAL TAGS.  #####";
				N: AND(MSet_Bypass,Cfg_Bypassable,MSet_Bypass);
		END_ROUTINE

		ROUTINE Logic (Description := "Check Permissive Conditions")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_Perm:  PROCESS -- PERMISSIVES$N"
				    "============================================================$N"
				    "Revision 4.10.00 Release  2019-03-08:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x and V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-16:  Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "OSets / OCmds and MSets / MCmds are now LOCAL TAGS.$N"
				    "V4.10.00  2019-03-08:  Added Cfg_HasMoreObj.$N"
				    "============================================================$N"
				    "This Instruction monitors up to 16 Permissive conditions.  It provides these features:$N"
				    "$N"
				    "*  The $QOK$Q state of each Permissive Input is configurable.  By default,$N"
				    "each Input is 1 when OK to start, 0 when not OK to start.$N"
				    "*  Permissives may be configured as Bypassable.  A separate Sts_NBPermOK $N"
				    "(Non-Bypassable Permissives OK) status is provided, which the destination$N"
				    "object can use forBypass, Maintenance and other functions,$N"
				    "where Bypassable Permissives can be ignored.$N"
				    "$N"
				    "All Permissive Inputs must be in their configured $QOK$Q states$N"
				    "for the P_Perm instruction to provide a $QPermOK$Q status.$N"
				    "$N"
				    "All non-bypassable Permissive inputs must be in their configured $QOK$Q states$N"
				    "for the P_Perm instruction to provide a $QNBPermOK$Q status.$N"
				    "$N"
				    "For each Permissive condition, a Tag may be defined for navigation. Clicking$N"
				    "the Permissive description will call up the associated Tag$'s Faceplate.$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)[LOWER(Cfg_Desc,Cfg_Label) LOWER(Cfg_Tag,Cfg_Area) LOWER(HMI_Lib,HMI_Type) ,LOWER(Cfg_CondTxt[0],Cfg_CondTxt[1]) LOWER(Cfg_CondTxt[2],Cfg_CondTxt[3]) LOWER(Cfg_CondTxt[4],Cfg_CondTxt[5]) LOWER(Cfg_CondTxt[6],Cfg_CondTxt[7]) ,LOWER(Cfg_CondTxt[8],Cfg_CondTxt[9]) LOWER(Cfg_CondTxt[10],Cfg_CondTxt[11]) LOWER(Cfg_CondTxt[12],Cfg_CondTxt[13]) LOWER(Cfg_CondTxt[14],Cfg_CondTxt[15]) ,LOWER(Cfg_NavTag[0],Cfg_NavTag[1]) LOWER(Cfg_NavTag[2],Cfg_NavTag[3]) LOWER(Cfg_NavTag[4],Cfg_NavTag[5]) LOWER(Cfg_NavTag[6],Cfg_NavTag[7]) ,LOWER(Cfg_NavTag[8],Cfg_NavTag[9]) LOWER(Cfg_NavTag[10],Cfg_NavTag[11]) LOWER(Cfg_NavTag[12],Cfg_NavTag[13]) LOWER(Cfg_NavTag[14],Cfg_NavTag[15]) ];
				RC: "============================================================$N"
				    "INPUT GATHERING$N"
				    "============================================================$N"
				    "This object uses word-wise logic.  The 16 permissive inputs are aliased$N"
				    "to the Wrk_Inp word, so no logic is needed to collect the individual$N"
				    "conditions.  We can immediately start processing the permissive logic.$N"
				    "============================================================$N"
				    "HANDLE $QOK STATE$Q INVERSIONS$N"
				    "============================================================$N"
				    "This rung inverts the Input bits whose $QOK State$Q is 1 (0 to Run).$N"
				    "The resulting Wrk_Inp word is ALL ONES if all permissive inputs are $QOK$Q.";
				N: LBL(SkipText)CPT(Wrk_InpInv,Wrk_Inp XOR(NOT(Cfg_OKState)));
				RC: "============================================================$N"
				    "PERMISSIVE PROCESSING$N"
				    "============================================================$N"
				    "Individual Permissive Bypasses can only be set for conditions that are$N"
				    "configured as Bypassable.  The AND clears all the MSets for inputs$N"
				    "that are NOT Bypassable.$N"
				    "$N"
				    "If an input is Bypassed, or the input is ON, that bit is OK as far as$N"
				    "Bypassable Permissives are concerned.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  OSets / OCmds and MSets / MCmds are now LOCAL TAGS.  #####";
				N: AND(MSet_Bypass,Cfg_Bypassable,MSet_Bypass)OR(MSet_Bypass,Wrk_InpInv,Wrk_Bypass);
				RC: "============================================================$N"
				    "STATUS GENERATION$N"
				    "============================================================$N"
				    "These rungs generate the public Status for this object.$N"
				    "$N"
				    "The Input Permissive conditions are passed through (wordwise)$N"
				    "directly to the final Permissive Status";
				N: MOV(Wrk_InpInv,Sts_Perm);
				RC: "If all the Permissive Status bits are ONE, there is no condition to$N"
				    "prevent starting the affected equipment: show the Permissive Status as $QOK$Q$N"
				    "$N"
				    "If all the Non-Bypassable permissives are true, set the NBPermOK Status as $QOK$Q$N"
				    "$N"
				    "If Permissive Bypassing is active (this input usually comes from a downstream$N"
				    "device block: motor, valve, etc.), then make this Status known to the HMI.";
				N: [EQU(Sts_Perm,-1) OTE(Sts_PermOK) ,EQU(Wrk_Bypass,-1) OTE(Sts_NBPermOK) ,XIC(Inp_BypActive) OTE(Sts_BypActive) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_Reset (Description := "Reset",
	                                       Revision := "4.10",
	                                       RevisionExtension := ".00 Release",
	                                       RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                       Vendor := "Rockwell Automation",
	                                       ExecutePrescan := Yes,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := Yes,
	                                       CreatedDate := "2008-08-19T20:03:31.976Z",
	                                       CreatedBy := "Not Available",
	                                       EditedDate := "2020-12-08T03:33:26.243Z",
	                                       EditedBy := "KEVIN_VM-PC\kevin_VM",
	                                       SoftwareRevision := "v32.02",
	                                       AdditionalHelpText := "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N$NThis instruction provides a central point in a control strategy (CM, EM, Unit, Group, Cell, Area, etc.)$Nor controller for accepting and fanning out a Reset of equipment alarms and faults.$N$NResets are accepted from Program Command (PCmd_Reset), Operator Command (OCmd_Reset) or$Nas an Input from another object (Inp_Reset).  The input can be tied to the output of a higher-level$NReset instruction to cascade Resets down through a hierarchy, say from a master Station Reset$Nto individual groups or units.$N$NThe minimum duration of the reset Output is configurable.  This can be set to allow time for a$NReset sent to equipment via an output card to feed back into the system via inputs.$N$NThe P_Reset instruction can be used on a ladder rung with the rung condition transitioning$Nfrom FALSE to TRUE causing the output to pulse.  In this configuration, the Program and$NOperator Commands and the reset Input still function normally, even if the rung is FALSE.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-01)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Aligned ready bit naming with command bit names.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyReset for use by external objects.$N* Changed delay / time configuration items to REAL seconds.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_Reset : BOOL (Description := "Reset Input, 1=Reset, from pushbutton or another object",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Inp_ResetReqd : BOOL (Description := "1=Reset Required, enable Reset button",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 1);
			Cfg_MinHoldTime : REAL (Description := "Minimum Time to hold Reset Output true (sec)",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 1.00000000e+000);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			PCmd_Reset : BOOL (Description := "Program Command to Reset, from other object",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Out_Reset : BOOL (Description := "1=Reset received for this P_Reset$'s scope",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched condition is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_Err : BOOL (Description := "1=Error in Config: Invalid Hold Time (use 0 to 2147483)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			P_Reset : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Wrk_HoldT : TIMER (Description := "Reset Output Hold Timer (TOF)",
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0]");
			Wrk_EnableInONS : BOOL (Description := "EnableIn transition detection to pulse Reset Output",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 1);
			Wrk_HoldONS : BOOL (Description := "One-Shot to fire Hold Timer to ensure min. output ON time.",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_ResetCond : BOOL (Description := "Any incoming Reset condition is TRUE",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			HMI_Type : STRING_16 (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[7,'P_Reset$00$00$00$00$00$00$00$00$00']");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[7,'P_Reset$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[5,'Reset$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[21,'Multiple-Device Reset$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			HMI_Lib : STRING_12 (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[6,'RA-BAS$00$00$00$00$00$00']");
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Operator Command to Reset, from HMI",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Sets up for One-Shot trigger of Reset when using XIC/XIO on rung")
				RC: "============================================================$N"
				    "P_Reset:  RESET EnableIn False Handling$N"
				    "============================================================$N"
				    "On EnableIn False:$N"
				    "$N"
				    "Clear the bit used to detect EnableIn transition from False to True$N"
				    "in preparation for the next transition$N"
				    "$N"
				    "(See main Logic Routine for EnableIn False-to-True triggering of Reset.)";
				N: OTU(Wrk_EnableInONS);
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "This rung takes the configured Output Hold time and calculates$N"
				    "the appropriate hold timer preset.  A negative preset would fault$N"
				    "the controller and so is disallowed.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Changed delay / time configuration items to REAL seconds.  #####";
				N: MUL(Cfg_MinHoldTime,1000.0,Wrk_HoldT.PRE)XIC(Wrk_HoldT.PRE.31)CLR(Wrk_HoldT.PRE)OTE(Sts_Err);
				RC: "============================================================$N"
				    "COMMAND AND INPUT HANDLING$N"
				    "============================================================$N"
				    "This rung processes received Reset Commands from:$N"
				    "$N"
				    "1.  Higher-level strategies via Program Command$N"
				    "2.  The Operator via HMI Operator Command$N"
				    "3.  Pushbuttons or other block via Input, or$N"
				    "4.  On transition of rung condition from False to True$N"
				    "(button or other logic as rung condition).$N"
				    "$N"
				    "The reset starts the Hold Timer (One-Shot Off-Delay)$N"
				    "to ensure the output is held on for at least the minimum time.";
				N: [XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(Inp_Reset) ][OTE(Wrk_ResetCond) ,ONS(Wrk_HoldONS) TOF(Wrk_HoldT,?,?) ];
				RC: "The Hold Timer $Qdone$Q bit comes on immediately and stays on$N"
				    "for the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.";
				N: [XIC(Wrk_HoldT.DN) ,XIC(Wrk_ResetCond) ]OTE(Out_Reset);
				RC: "If an associated object is ready to be reset, set the Inp_Reset pin on this object.$N"
				    "Then, if something needs reset, and we$'re not already resetting it, enable this$N"
				    "object$'s Reset Pushbutton.$N"
				    "$N"
				    "(If this function is not wired, the button will generally be enabled.$N"
				    "If this function IS wired, it is suggested to make the enabled Reset button$N"
				    "FLASH to alert the operator that a reset is required!)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_AckReqd and Sts_ResetReqd for use by external objects.  #####";
				N: XIC(Inp_ResetReqd)XIO(Out_Reset)OTE(ORdy_Reset);
		END_ROUTINE

		ROUTINE Logic (Description := "Process Reset Input and Commands")
				RC: "Copyright © Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "============================================================$N"
				    "P_Reset:  PROCESS -- RESET$N"
				    "============================================================$N"
				    "Revision 4.10.00 Release  2019-03-08:  See V4.10.xx Release Notes for details.$N"
				    "V2.x, V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-02:  Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "Aligned ready bit naming with command bit names.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyReset for use by external objects.$N"
				    "Changed delay / time configuration items to REAL seconds.$N"
				    "V4.10.00  2019-03-08:  Added Cfg_HasMoreObj.$N"
				    "============================================================$N"
				    "This Instruction provides a command/interface point for resetting$N"
				    "alarms, faults or other conditions across a strategy (EM,$N"
				    "Unit, Cell, Area, Site, etc.).  Its Output is intended to be wired$N"
				    "to input, device and interlock instructions to allow a single reset$N"
				    "command or pushbutton to reset alarms and faults in all objects in its scope.$N"
				    "============================================================$N"
				    "POWERUP OR INVALID STATE$N"
				    "============================================================$N"
				    "No special powerup logic is required.$N"
				    "$N"
				    "============================================================$N"
				    "SHOW LOCAL STRINGS$N"
				    "============================================================$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)LOWER(Cfg_Desc,Cfg_Label)LOWER(Cfg_Tag,Cfg_Area)LOWER(HMI_Lib,HMI_Type);
				RC: "============================================================$N"
				    "CONFIGURATION$N"
				    "============================================================$N"
				    "This rung takes the configured Output Hold time and calculates$N"
				    "the appropriate hold timer preset.  A negative preset would fault$N"
				    "the controller and so is disallowed and flagged.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Changed delay / time configuration items to REAL seconds.  #####";
				N: LBL(SkipText)MUL(Cfg_MinHoldTime,1000.0,Wrk_HoldT.PRE)XIC(Wrk_HoldT.PRE.31)CLR(Wrk_HoldT.PRE)OTE(Sts_Err);
				RC: "============================================================$N"
				    "COMMAND AND INPUT HANDLING$N"
				    "============================================================$N"
				    "This rung processes received Reset Commands from:$N"
				    "$N"
				    "1.  Higher-level strategies via Program Command$N"
				    "2.  The Operator via HMI Operator Command$N"
				    "3.  Pushbuttons or other block via Input, or$N"
				    "4.  On transition of rung condition from False to True$N"
				    "(button or other logic as rung condition).$N"
				    "$N"
				    "The reset starts the Hold Timer (One-Shot Off-Delay)$N"
				    "to ensure the output is held on for at least the minimum time.";
				N: [XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(Inp_Reset) ,XIO(Wrk_EnableInONS) OTL(Wrk_EnableInONS) ][OTE(Wrk_ResetCond) ,ONS(Wrk_HoldONS) TOF(Wrk_HoldT,?,?) ];
				RC: "The Hold Timer $Qdone$Q bit comes on immediately and stays on$N"
				    "for the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.";
				N: [XIC(Wrk_HoldT.DN) ,XIC(Wrk_ResetCond) ]OTE(Out_Reset);
				RC: "If an associated object is ready to be reset, set the Inp_Reset pin on this object.$N"
				    "Then, if something needs reset, and we$'re not already resetting it, enable this$N"
				    "object$'s Reset Pushbutton.$N"
				    "$N"
				    "(If this function is not wired, the button will generally be enabled.$N"
				    "If this function IS wired, it is suggested to make the enabled Reset button$N"
				    "FLASH to alert the operator that a reset is required!)$N"
				    "$N"
				    "#####  V4.00.00  2018-07-02:  Aligned ready bit naming with command bit names.  #####$N"
				    "#####  All OCmds/MCmds and ORdys/MRdys are now Local Tags.  #####$N"
				    "#####  Added Sts_AckReqd and Sts_ResetReqd for use by external objects.  #####";
				N: XIC(Inp_ResetReqd)XIO(Out_Reset)OTE(ORdy_Reset);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear $Qlurking$Q Commands")
				RC: "============================================================$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "============================================================$N"
				    "On Prescan, clear any $Qlurking$Q Commands.";
				N: OTU(OCmd_Reset)OTU(PCmd_Reset);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Timer_Calc (Description := "Calculates the Time Remaining and the Time Accumulated",
	                                          Revision := "1.1",
	                                          RevisionNote := "1.0 Published$N1.1 Added the Timer to the AOI",
	                                          Vendor := "AES Inc.",
	                                          ExecutePrescan := No,
	                                          ExecutePostscan := No,
	                                          ExecuteEnableInFalse := No,
	                                          CreatedDate := "2013-01-11T21:35:50.112Z",
	                                          CreatedBy := "Not Available",
	                                          EditedDate := "2021-04-20T04:37:19.215Z",
	                                          EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                          SoftwareRevision := "v32.03")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			CMD : BOOL (Usage := Input,
			               RADIX := Decimal,
			               Required := No,
			               Visible := No,
			               DefaultData := 0);
			Cmd_Reset : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Inp_Target_Setpoint : REAL (Description := "Input Target Setpoint",
			                               Usage := Input,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := Yes,
			                               DefaultData := 0.00000000e+000);
			Inp_Time_Base : INT (Description := "Target Setpoint Time Base$N0 = Seconds$N1 = Minutes$N2 = Hours",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0);
			Hours_Elapsed : DINT (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Minutes_Elapsed : DINT (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Seconds_Elapsed : DINT (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Running : BOOL (Description := "Timer Running Status",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Complete : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Total_Minutes_Elapsed : REAL (Description := "Total Time Elapsed in Minutes",
			                                 Usage := Output,
			                                 RADIX := Float,
			                                 Required := No,
			                                 Visible := Yes,
			                                 ExternalAccess := Read Only,
			                                 DefaultData := 0.00000000e+000);
			Total_Minutes_Left : REAL (Description := "Total Time Left in Minutes",
			                              Usage := Output,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := Yes,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0.00000000e+000);
			Total_Hours_Elapsed : REAL (Description := "Total Time Elapsed in Hours",
			                               Usage := Output,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := Yes,
			                               ExternalAccess := Read Only,
			                               DefaultData := 0.00000000e+000);
			Total_Hours_Left : REAL (Description := "Total Time Left in Hours",
			                            Usage := Output,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0.00000000e+000);
			Hours_Left : DINT (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			Minutes_Left : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Seconds_Left : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Minute_Timer : TIMER (ExternalAccess := None,
			                       DefaultData := "[0,60000,0]");
			Minute_Counter : COUNTER (ExternalAccess := None,
			                         DefaultData := "[0,60,0]");
			Hour_Counter : COUNTER (ExternalAccess := None,
			                       DefaultData := "[0,86400000,0]");
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			Base : INT (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 3600);
			Internal_Hours_Left : DINT (RADIX := Decimal,
			                              ExternalAccess := None,
			                              DefaultData := 0);
			Internal_Setpoint_Hours : REAL (Description := "Target Setpoint Converted to Hours",
			                                  RADIX := Float,
			                                  ExternalAccess := None,
			                                  DefaultData := 0.00000000e+000);
			Remainder_Hours : REAL (Description := "Reaminder of Time Left in Hours",
			                          RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			Internal_Minutes_Left : REAL (RADIX := Float,
			                                ExternalAccess := None,
			                                DefaultData := 0.00000000e+000);
			Remainder_Minutes : REAL (RADIX := Float,
			                            ExternalAccess := None,
			                            DefaultData := 0.00000000e+000);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "****************************************************************************************$N"
				    "Timer Calculation AOI$N"
				    "****************************************************************************************$N"
				    "* Used to Claculate both the Time Remaining and the Time Accumulated$N"
				    "* The Operator need to input the Target Setpoint and the Time Base associated with that Setpoint$N"
				    "* If using the AOI as a countdown timer then the timer will stop when complete$N"
				    "****************************************************************************************";
				N: NOP();
				N: XIC(Cmd_Reset)[OTU(CMD) ,OTU(Complete) ,RES(Minute_Timer) ,RES(Minute_Counter) ,RES(Hour_Counter) ,MOV(0,Total_Hours_Left) ];
				N: EQU(Total_Hours_Left,0)EQU(Total_Hours_Elapsed,0)OTU(Cmd_Reset);
				RC: "****************************************************************************************$N"
				    "Total Time Elapsed$N"
				    "Broken into Hours, Mnutes, and Seconds$N"
				    "****************************************************************************************";
				N: XIC(CMD)[OTE(Running) ,RTO(Minute_Timer,?,?) ,XIC(Minute_Timer.DN) [ONS(ONS.0) CTU(Minute_Counter,?,?) ,RES(Minute_Timer) ] ];
				N: XIC(Minute_Counter.DN)[ONS(ONS.1) CTU(Hour_Counter,?,?) ,RES(Minute_Counter) ];
				RC: "Calculate the Seconds, Muntes, and Hours that have Elapsed";
				N: [CPT(Seconds_Elapsed,Minute_Timer.ACC/1000) ,MOV(Minute_Counter.ACC,Minutes_Elapsed) ,MOV(Hour_Counter.ACC,Hours_Elapsed) ];
				RC: "Total Time Elapsed as Hours and Minutes";
				N: CPT(Total_Hours_Elapsed,Hours_Elapsed + (Minutes_Elapsed / 60) + (Seconds_Elapsed / 3600));
				N: CPT(Total_Minutes_Elapsed,(Hours_Elapsed * 60) + Minutes_Elapsed + (Seconds_Elapsed / 60));
				RC: "****************************************************************************************$N"
				    "Total Time Left$N"
				    "Broken into Hours, Mnutes, and Seconds$N"
				    "****************************************************************************************";
				N: SUB(Internal_Setpoint_Hours,Total_Hours_Elapsed,Total_Hours_Left);
				N: CPT(Total_Minutes_Left,(Internal_Setpoint_Hours * 60) - Total_Minutes_Elapsed);
				RC: "Hours Left Calculation";
				N: [MOV(Total_Hours_Left,Internal_Hours_Left) ,GRT(Internal_Hours_Left,Total_Hours_Left) ONS(ONS.2) SUB(Internal_Hours_Left,1,Hours_Left) ,LEQ(Internal_Hours_Left,Total_Hours_Left) MOV(Internal_Hours_Left,Hours_Left) ];
				RC: "Minutes Left Calculation";
				N: [SUB(Total_Hours_Left,Hours_Left,Remainder_Hours) ,MUL(Remainder_Hours,60,Internal_Minutes_Left) ,CMP((Internal_Minutes_Left / 60) > Remainder_Hours) ONS(ONS.3) SUB(Internal_Minutes_Left,1,Minutes_Left) ,CMP((Internal_Minutes_Left / 60) <= Remainder_Hours) MOV(Internal_Minutes_Left,Minutes_Left) ];
				RC: "Seconds Left Calculation";
				N: [SUB(Internal_Minutes_Left,Minutes_Left,Remainder_Minutes) ,MUL(Remainder_Minutes,60,Seconds_Left) ];
				N: LEQ(Total_Hours_Left,0)OTL(Complete);
				N: XIC(Complete)MOV(0,Total_Hours_Left)MOV(0,Total_Minutes_Left);
				RC: "Time Base Used for Target Setpoint$N"
				    "0 = Seconds$N"
				    "1 = Minutes$N"
				    "2 = Hours";
				N: [EQU(Inp_Time_Base,0) MOV(3600,Base) ,EQU(Inp_Time_Base,1) MOV(60,Base) ,EQU(Inp_Time_Base,2) MOV(1,Base) ];
				N: DIV(Inp_Target_Setpoint,Base,Internal_Setpoint_Hours);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION T_Valid (Description := "Is DateTime Valid?",
	                                       Revision := "1.0",
	                                       RevisionExtension := "00 Release",
	                                       RevisionNote := "Initial formal release",
	                                       Vendor := "Rockwell Automation",
	                                       ExecutePrescan := No,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := No,
	                                       CreatedDate := "2007-09-07T20:09:49.027Z",
	                                       CreatedBy := "Not Available",
	                                       EditedDate := "2021-01-23T04:38:12.493Z",
	                                       EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                       SoftwareRevision := "v32.03",
	                                       AdditionalHelpText := "This instruction tests the given DateTime variable and verifies that it is a valid calendar date and clock time, as follows:$N$N  *  0 <= Microseconds < 1,000,000$N  *  0 <= Seconds < 60    (NOTE: this instruction cannot check leap seconds;  sorry!$N  *  0 <= Minutes < 60$N  *  0 <= Hours < 24$N  *  1 <= Day <= 31 AND Day is Valid for Gregorian Date (28, 29, 30 or 31 days in month, see below)$N  *  1 <= Month <= 12$N  *  Year is within the range of dates that this instruction can calculate a Gregorian day number (about +/- 5.8 million years)$N$N  NOTE:  This instruction does NOT switch to Julian dates for dates before 1582 (or 1753 or whenever your place of interest switched to the Gregorian Calendar (see Wikipedia on Gregorian Calendar for details)!  This instruction assumes the Gregorian Calendar extends $Qindefinitely$Q (at least 5.8 million years) either side of $Qzero$Q!  It DOES handle the Gregorian 4 / 100 / 400 year rules, so Feb. 29, 2000 is a valid date, but Feb. 29, 2100 is not.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Ref_DT : DateTime (Description := "Date and Time to check for validity",
			                  Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			Out : BOOL (Description := "1 = Date/Time is valid (exists)",
			               Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			Sts_YrInvalid : BOOL (Description := "1 = Date is invalid because year is out of the range this instruction can check",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_MoInvalid : BOOL (Description := "1 = Month is Invalid (1 to 12)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_DaInvalid : BOOL (Description := "1 = Day is Invalid (not within days for that month/year)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_HrInvalid : BOOL (Description := "1 = Hour is Invalid (0 to 23)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_MinInvalid : BOOL (Description := "1 = Minute is invalid (0 to 59)",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_SecInvalid : BOOL (Description := "1 = Second is invalid (0 to 59)",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Sts_uSecInvalid : BOOL (Description := "1 = Microsecond is Invalid (0 to 999,999)",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Wrk_F : DINT (Description := "Used in calculating Gregorian Day Number (function of month)",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			Wrk_G : DINT (Description := "Used in calculating Gregorian Day Number (function of Year and F)",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			Wrk_GD : DINT (Description := "Gregorian Day Number (calculated for given Y/M/D)",
			                 RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			Wrk_yyy : DINT (Description := "Intermediate for year calculation",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_ddd : DINT (Description := "Intermediate for day calculation",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_mmm : DINT (Description := "Intermediate for month calculation",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_y : DINT (Description := "Calculated YEAR from Gregorian Day Number",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			Wrk_m : DINT (Description := "Calculated MONTH from Gregorian Day Number",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			Wrk_d : DINT (Description := "Calculated DAY from Gregorian Day Number",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
		END_LOCAL_TAGS

		ST_ROUTINE Logic (Description := "Checks whether given DateTime is valid (exists on common calendar/clock)")
			'// T_Valid : TIME -- CHECK FOR VALID DATE / TIME
			'// 
			'// This instruction tests the given DateTime variable and verifies that it is a valid calendar date and clock time, as follows:
			'//
			'//  *  0 <= Microseconds < 1,000,000
			'//  *  0 <= Seconds < 60    (NOTE: this instruction cannot check leap seconds;  sorry!
			'//  *  0 <= Minutes < 60
			'//  *  0 <= Hours < 24
			'//  *  1 <= Day <= 31 AND Day is Valid for Gregorian Date (28, 29, 30 or 31 days in month, see below)
			'//  *  1 <= Month <= 12
			'//  *  Year is within the range of dates that this instruction can calculate a Gregorian day number (about +/- 5.8 million years)
			'//
			'//  NOTE:  This instruction does NOT switch to Julian dates for dates before 1582 (or 1753 or whenever your place of interest
			'//  switched to the Gregorian Calendar (see Wikipedia on Gregorian Calendar for details)!  This instruction assumes the Gregorian
			'//  Calendar extends "indefinitely" (at least 5.8 million years) either side of "zero"!  It DOES handle the Gregorian 4 / 100 /
			'//  400 year rules, so Feb. 29, 2000 is a valid date, but Feb. 29, 2100 is not.
			'//
			'//  NOTE:  For algorithms, see http://alcor.concordia.ca/~gpkatch/gdate-algorithm.html
			'//
			'//  Version 1.0-00 Release
			'//	Initial Formal Release
			'//
			'
			'// Check Microseconds
			'IF ((Ref_DT.uSec < 0) OR (Ref_DT.uSec > 999999)) THEN
			'	Sts_uSecInvalid := 1;
			'ELSE
			'	Sts_uSecInvalid := 0;
			'END_IF;
			'
			'// Check Seconds
			'IF ((Ref_DT.Sec < 0) OR (Ref_DT.Sec > 59)) THEN
			'	Sts_SecInvalid := 1;
			'ELSE
			'	Sts_SecInvalid := 0;
			'END_IF;
			'
			'// Check Minutes
			'IF ((Ref_DT.Min < 0) OR (Ref_DT.Min > 59)) THEN
			'	Sts_MinInvalid := 1;
			'ELSE
			'	Sts_MinInvalid := 0;
			'END_IF;
			'
			'// Check Hour
			'IF ((Ref_DT.Hr < 0) OR (Ref_DT.Hr > 23)) THEN
			'	Sts_HrInvalid := 1;
			'ELSE
			'	Sts_HrInvalid := 0;
			'END_IF;
			'
			'// Check Day (basic check, see below for more!)
			'IF ((Ref_DT.Da < 1) OR (Ref_DT.Da > 31)) THEN
			'	Sts_DaInvalid := 1;
			'ELSE
			'	Sts_DaInvalid := 0;
			'END_IF;
			'
			'// Check Month
			'IF ((Ref_DT.Mo < 1) OR (Ref_DT.Mo > 12)) THEN
			'	Sts_MoInvalid := 1;
			'ELSE
			'	Sts_MoInvalid := 0;
			'END_IF;
			'
			'// Check Year is in the range we can test
			'IF ((Ref_DT.Yr < -5879600) OR (Ref_DT.Yr > 5879600)) THEN
			'	Sts_YrInvalid := 1;
			'ELSE
			'	Sts_YrInvalid := 0;
			'END_IF;
			'
			'// If the Year, Month and Day are all valid in the base checks above, check that the Date is a valid Gregorian Date
			'IF (NOT(Sts_DaInvalid) AND NOT(Sts_MoInvalid) AND NOT(Sts_YrInvalid)) THEN
			'//  First, Calculate a "Gregorian Day Number" for the input Yr/Mo/Da:
			'	Wrk_F := (Ref_DT.Mo+9) MOD 12;
			'	Wrk_G := Ref_DT.Yr - Wrk_F/10;
			'	Wrk_GD := 365*Wrk_G+Wrk_G/4-Wrk_G/100+Wrk_G/400+(Wrk_F*306+5)/10+Ref_DT.Da-1;
			'
			'//  Now, given the Gregorian Day Number, calculate the calendar date
			'
			'	Wrk_yyy := TRUNC (Wrk_GD +1.5)/365.2425;
			'	Wrk_ddd := Wrk_GD - (365*Wrk_yyy+Wrk_yyy/4-Wrk_yyy/100+Wrk_yyy/400);
			'	IF (Wrk_ddd < 0) THEN
			'		Wrk_yyy := Wrk_yyy - 1;
			'		Wrk_ddd := Wrk_GD - (365*Wrk_yyy+Wrk_yyy/4-Wrk_yyy/100+Wrk_yyy/400);
			'		IF (Wrk_ddd < 0) THEN
			'			Wrk_yyy := Wrk_yyy - 1;
			'			Wrk_ddd := Wrk_GD - (365*Wrk_yyy+Wrk_yyy/4-Wrk_yyy/100+Wrk_yyy/400);
			'		END_IF;
			'	END_IF;
			'	Wrk_mmm := (100*Wrk_ddd + 52)/3060;
			'	Wrk_y := Wrk_yyy + (Wrk_mmm + 2)/12;
			'	Wrk_m := ((Wrk_mmm + 2) MOD 12) + 1; 
			'	Wrk_d := Wrk_ddd - ((Wrk_mmm * 306) + 5)/10 + 1;
			'
			'//  If the Input Year/Month/Day match the calculated Year/Month/Day, the date (day number) is valid.
			'
			'	IF ((Wrk_m <> Ref_DT.Mo) OR (Wrk_y <> Ref_DT.Yr) OR (Wrk_d <> Ref_DT.Da)) THEN
			'		Sts_DaInvalid := 1;
			'	END_IF;
			'	
			'END_IF;
			'
			'//  If nothing is invalid, set Out to indicate a valid date/time; otherwise, clear Out
			'
			'IF ((NOT(Sts_uSecInvalid)) AND (NOT(Sts_SecInvalid)) AND (NOT(Sts_MinInvalid)) AND (NOT(Sts_HrInvalid)) AND (NOT(Sts_DaInvalid)) AND (NOT(Sts_MoInvalid)) AND (NOT(Sts_YrInvalid))) THEN
			'	Out := 1;
			'ELSE
			'	Out := 0;
			'END_IF;
			'
		END_ST_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION T_DoW (Description := "Day of the Week",
	                                     Revision := "1.0",
	                                     RevisionExtension := "00 Release",
	                                     RevisionNote := "Initial formal release",
	                                     Vendor := "Rockwell Automation",
	                                     ExecutePrescan := No,
	                                     ExecutePostscan := No,
	                                     ExecuteEnableInFalse := No,
	                                     CreatedDate := "2008-04-09T17:38:34.917Z",
	                                     CreatedBy := "Not Available",
	                                     EditedDate := "2021-01-23T04:38:11.581Z",
	                                     EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                     SoftwareRevision := "v32.03",
	                                     AdditionalHelpText := "T_DoW : Day of the Week$N$NThis instruction takes a given Date/Time, and, for the Date part, returns the Day of the Week$N  (0=Sun, 1=Mon, 2=Tue, 3=Wed, 4=Thu, 5=Fri, 6=Sat)$N$NIf the given Date is INVALID, a flag is set (but the calculated Day of the Week is returned anyway...)$N$NNOTE:  The Time part of Input Parameter DT (hours, minutes, seconds, microseconds) is ignored.$N$NNOTE:  This instruction does NOT switch to Julian dates for dates before 1582 (or 1753 or whenever your place of interest switched to the Gregorian Calendar (see Wikipedia on Gregorian Calendar for details)!  This instruction assumes the Gregorian Calendar extends $Qindefinitely$Q (at least 5.8 million years) either side of $Qzero$Q!  It DOES handle the Gregorian 4 / 100 / 400 year rules, so Feb. 29, 2000 is a valid date, but Feb. 29, 2100 is not.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Ref_DT : DateTime (Description := "Date/Time input",
			                  Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			Out : DINT (Description := "Returned Day of the Week (0=Sun, 1=Mon,... 6=Sat)",
			               Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			Sts_InvDate : BOOL (Description := "Cannot compute Day of Week because Date is INVALID",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Wrk_G : DINT (Description := "Intermediate variable, function of Month, Year",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			Wrk_F : DINT (Description := "Intermediate variable, function of Month",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			Wrk_TValid : T_Valid (Description := "AOI Backing Tag for valid Date check",
			                     ExternalAccess := Read/Write,
			                     DefaultData := "[1,0,0,0,0,0,0,0,0,0]");
			Wrk_D : DINT (Description := "Work register for computed day number",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
		END_LOCAL_TAGS

		ST_ROUTINE Logic (Description := "Determine Day of the Week for the given Date")
			'// T_DoW : TIME -- DAY OF THE WEEK
			'// 
			'//  This instruction takes a given Date/Time, and, for the Date part, returns the Day of the Week
			'//    (0=Sun, 1=Mon, 2=Tue, 3=Wed, 4=Thu, 5=Fri, 6=Sat)
			'// 
			'//  If the given Date is INVALID, a flag is set (but the calculated Day of the Week is returned anyway...)
			'//
			'//  NOTE:  The Time parts of Input Parameter DT (hours, minutes, seconds, microseconds) are ignored.
			'//
			'//  NOTE:  This instruction does NOT switch to Julian dates for dates before 1582 (or 1753 or whenever your place of interest
			'//  switched to the Gregorian Calendar (see Wikipedia on Gregorian Calendar for details)!  This instruction assumes the Gregorian
			'//  Calendar extends "indefinitely" (at least 5.8 million years) either side of "zero"!  It DOES handle the Gregorian 4 / 100 /
			'//  400 year rules, so Feb. 29, 2000 is a valid date, but Feb. 29, 2100 is not.
			'//
			'//  NOTE:  For algorithms, see http://alcor.concordia.ca/~gpkatch/gdate-algorithm.html
			'//
			'//  Version 1.0-00 Release
			'//	Initial Formal Release
			'//
			'
			'//  First, check the received date to see if it is valid
			'
			'T_Valid (Wrk_TValid, Ref_DT);
			'
			'//  If the Year, Month or Day is not valid, set the Sts_DateInvalid flag; if all OK, clear the flag
			'
			'IF (Wrk_TValid.Sts_YrInvalid OR Wrk_TValid.Sts_MoInvalid OR Wrk_TValid.Sts_DaInvalid) THEN
			'	Sts_InvDate := 1;
			'ELSE
			'	Sts_InvDate := 0;
			'END_IF;
			'
			'//  We've handled the validity check, now compute a "Day Number" whose remainder after division by 7 gives the day of the week.
			'
			'Wrk_F := (Ref_DT.Mo + 9) MOD 12;
			'Wrk_G := Ref_DT.Yr - Wrk_F/10;
			'
			'Wrk_D := 365*Wrk_G+Wrk_G/4-Wrk_G/100+Wrk_G/400+(Wrk_F*306+5)/10+Ref_DT.Da+2;
			'
			'//  If the day number is negative, the MOD won't work; add the biggest integer divisible by 7 to ensure it's positive!
			'
			'IF (Wrk_D < 0) THEN
			'	Wrk_D := Wrk_D + 2147483646;
			'END_IF;
			'
			'//  Finally, do the Modulo math to get the day of the week (0=Sun, 1=Mon, ..., 6=Sat)
			'
			'Out := Wrk_D MOD 7;
		END_ST_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION T_TtoS (Description := "Date/Time to String",
	                                      Revision := "1.0",
	                                      RevisionExtension := "00 Release",
	                                      RevisionNote := "Initial formal release",
	                                      Vendor := "Rockwell Automation",
	                                      ExecutePrescan := No,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := No,
	                                      CreatedDate := "2008-04-30T19:38:42.235Z",
	                                      CreatedBy := "Not Available",
	                                      EditedDate := "2021-01-23T04:38:12.186Z",
	                                      EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                      SoftwareRevision := "v32.03",
	                                      AdditionalHelpText := "This instruction takes the given date and formats it as a human-readable STRING.$N$NFor example, for the Date/Time:$N   2008  12  31  23  59  59  999999$Nthe return STRING will be (based on configuration):$N   Wednesady, December 31, 2008  11:59:59.999999 p.m.$N$NOptions are provided for:$N   * 24- or 12-hour time format (with a.m. or p.m. indicator on the 12-hour format)$N   * displaying or not displaying microseconds$N   * displaying or not displaying seconds$N   * displaying or not displaying the Day of the Week$N   * displaying day first (31 July) or month first (July 31)$N   * displaying date in an ISO-format (YYYY-MM-DD)$N$NThis instruction checks for a valid (Gregorian) Date and Time and returns $QInvalid Date$Q and/or $QInvalid Time$Q as appropriate in the output STRING.  Valid dates/times are:$N  *  0 <= Microseconds < 1,000,000$N  *  0 <= Seconds < 60$N  *  0 <= Minutes < 60$N  *  0 <= Hours < 24$N  *  0 <= Days <= 31 and a valid Gregorian Date (Feb = 28 or 29 days, etc.)$N  *  1 <= Month <= 12$N  *  year in the range +/- 5879600$N$NThe names of the days of the week and the months of the year, and the AM and PM indicator text can be changed by using the Local Tags Monitor for the instance.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Ref_DT : DateTime (Description := "Date/Time as DINTs to convert to STRING",
			                  Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			Ref_Out : STRING (Description := "Date/Time as STRING for display",
			                   Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			Cfg_ISODate : BOOL (Description := "1=use ISO date format YYYY-MM-DD; 0=use pretty date",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Cfg_DayFirst : BOOL (Description := "1=use $Q1 January$Q; 0=use $QJanuary 1$Q",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			Cfg_InclDoW : BOOL (Description := "Include name of the Day of the Week",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1);
			Cfg_12Hr : BOOL (Description := "1=12-hour with am/pm, 0=24-hour with leading zero",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			Cfg_InclSec : BOOL (Description := "1=include seconds in output string",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1);
			Cfg_InclMicrosec : BOOL (Description := "1=include microseconds in output string",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			Sts_InvDate : BOOL (Description := "0=OK, 1=Date supplied is not a valid Date",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Sts_InvTime : BOOL (Description := "0=OK, 1=Time supplied is not a valid Time",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Cfg_MonthNames : STRING_20[12] (Description := "Names of the Months of the Year",
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[[3,'JAN$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'FEB$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'MAR$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'APR$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'MAY$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'JUN$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'JUL$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'AUG$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'SEP$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'OCT$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'NOV$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'DEC$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			Cfg_DayNames : STRING_20[7] (Description := "Names of the Days of the Week",
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[[6,'Sunday$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'Monday$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'Tuesday$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'Wednesday$00$00$00$00$00$00$00$00$00$00$00'],[8,'Thursday$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'Friday$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[8,'Saturday$00$00$00$00$00$00$00$00$00$00$00$00']]");
			DoW : T_DoW (Description := "AOI to get Day of the Week for given Date",
			              ExternalAccess := Read/Write,
			              DefaultData := "[1,0,0,0,[1,0,0,0,0,0,0,0,0,0],0]");
			Cfg_AMString : STRING_8 (Description := "Morning time string",
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[2,'AM$00$00$00$00$00$00']");
			Cfg_PMString : STRING_8 (Description := "Afternoon time string",
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[2,'PM$00$00$00$00$00$00']");
			Cfg_BadDateString : STRING_20 (Description := "Invalid Date String",
			                            ExternalAccess := Read/Write,
			                            DefaultData := "[15,'<Invalid Date!>$00$00$00$00$00']");
			Cfg_BadTimeString : STRING_20 (Description := "Invalid Time String",
			                            ExternalAccess := Read/Write,
			                            DefaultData := "[15,'<Invalid Time!>$00$00$00$00$00']");
			Wrk_DateString : STRING (Description := "Date Building String",
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_TimeString : STRING (Description := "Time Building String",
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_NullString : STRING (Description := "Empty String for initialization",
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Space : STRING_8 (Description := "String containing one blank space",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[1,' $00$00$00$00$00$00$00']");
			Cfg_Colon : STRING_8 (Description := "String containing a colon ($Q:$Q) character",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[1,':$00$00$00$00$00$00$00']");
			Cfg_CommaSpace : STRING_8 (Description := "String containing a comma and following space",
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[2,', $00$00$00$00$00$00']");
			Cfg_Hyphen : STRING_8 (ExternalAccess := Read/Write,
			                     DefaultData := "[1,'-$00$00$00$00$00$00$00']");
			Wrk_Digit : STRING_8 (Description := "Small string for building a single digit only",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[1,'0$00$00$00$00$00$00$00']");
			Wrk_YearString : STRING_20 (Description := "Year as STRING for display",
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Period : STRING_8 (ExternalAccess := Read/Write,
			                     DefaultData := "[1,'.$00$00$00$00$00$00$00']");
			Wrk_Hour : DINT (Description := "Hour 1 to 12 for 12-hour time",
			                   RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
		END_LOCAL_TAGS

		ST_ROUTINE Logic (Description := "Convert given date and time to formatted text string")
			'// T_TtoS : TIME -- DATE/TIME TO A PRINTABLE STRING
			'// 
			'// This instruction takes the given date and formats it as a human-readable STRING.  For example,
			'// for the Date/Time:
			'//		2008  12  31  23  59  59  999999
			'// the return STRING will be:
			'//      Wednesady, December 31, 2008  11:59:59.999999 p.m.
			'//
			'// Options are provided for returning the time in 24- or 12-hour format (with a.m. or p.m. indicator on the 12-hour format)
			'// and for including the microseconds, seconds, Day of the Week, or just an ISO-date format.
			'//
			'// This instruction checks for a valid (Gregorian) Date and Time and returns "Invalid Date" and/or "Invalid Time" as appropriate.
			'//   *  0 <= Microseconds < 1,000,000
			'//   *  0 <= Seconds < 60
			'//   *  0 <= Minutes < 60
			'//   *  0 <= Hours < 24
			'//   *  0 <= Days <= 31 and a valid Gregorian Date (Feb = 28 or 29 days, etc.)
			'//   *  1 <= Month <= 12
			'//   *  year in the range +/- 5879600
			'//
			'//  NOTE:  For algorithms used for Gregorian Date validity checking, see http://alcor.concordia.ca/~gpkatch/gdate-algorithm.html
			'//
			'//  Version 1.0-00 Release
			'//	Initial Formal Release
			'//
			'
			'// INITIALIZE the working strings for building the date and time
			'COP (Wrk_NullString, Wrk_DateString, 1);
			'COP (Wrk_NullString, Wrk_TimeString, 1);
			'
			'// Get the Day of the Week for the given Date.  This also does a validity check on the date!
			'T_DoW (DoW, Ref_DT);
			'
			'// If the Date is invalid, copy the bad date string and flag it
			'If (DoW.Sts_InvDate) Then
			'	CONCAT (Wrk_DateString, Cfg_BadDateString, Wrk_DateString);
			'	Sts_InvDate := 1;
			'Else
			'
			'// Date is valid, do we want ISO-date (YYYY-MM-DD) or pretty date?
			'	Sts_InvDate := 0;
			'	If (Cfg_ISODate) Then
			'		DTOS (Ref_DT.Yr, Wrk_YearString);
			'		CONCAT (Wrk_YearString, Cfg_Hyphen, Wrk_DateString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.Mo / 10)+48;
			'		CONCAT (Wrk_DateString, Wrk_Digit, Wrk_DateString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.Mo MOD 10)+48;
			'		CONCAT (Wrk_DateString, Wrk_Digit, Wrk_DateString);
			'		CONCAT (Wrk_DateString, Cfg_Hyphen, Wrk_DateString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.Da / 10)+48;
			'		CONCAT (Wrk_DateString, Wrk_Digit, Wrk_DateString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.Da MOD 10)+48;
			'		CONCAT (Wrk_DateString, Wrk_Digit, Wrk_DateString);
			'	Else
			'
			'// Pretty date: first, do we include Day (of the week) name?
			'		If (Cfg_InclDoW) Then
			'			If (Cfg_DayFirst) Then
			'				CONCAT (Cfg_DayNames[DoW.Out],Cfg_Space,Wrk_DateString);
			'			Else
			'				CONCAT (Cfg_DayNames[DoW.Out],Cfg_CommaSpace,Wrk_DateString);
			'			End_If;
			'		End_If;
			'
			'// Next, is the day number first or the month name?
			'		If (Cfg_DayFirst) Then
			'			If (Ref_DT.Da > 9) Then
			'				Wrk_Digit.DATA[0] := (Ref_DT.Da / 10)+48;
			'				CONCAT (Wrk_DateString, Wrk_Digit, Wrk_DateString);
			'			End_If;
			'			Wrk_Digit.DATA[0] := (Ref_DT.Da MOD 10)+48;
			'			CONCAT (Wrk_DateString, Wrk_Digit, Wrk_DateString);
			'			CONCAT (Wrk_DateString, Cfg_Space, Wrk_DateString);
			'			CONCAT (Wrk_DateString, Cfg_MonthNames[Ref_DT.Mo-1], Wrk_DateString);
			'			CONCAT (Wrk_DateString, Cfg_Space, Wrk_DateString);
			'		Else
			'			CONCAT (Wrk_DateString, Cfg_MonthNames[Ref_DT.Mo-1], Wrk_DateString);
			'			CONCAT (Wrk_DateString, Cfg_Space, Wrk_DateString);
			'			If (Ref_DT.Da > 9) Then
			'				Wrk_Digit.DATA[0] := (Ref_DT.Da / 10)+48;
			'				CONCAT (Wrk_DateString, Wrk_Digit, Wrk_DateString);
			'			End_If;
			'			Wrk_Digit.DATA[0] := (Ref_DT.Da MOD 10)+48;
			'			CONCAT (Wrk_DateString, Wrk_Digit, Wrk_DateString);
			'			CONCAT (Wrk_DateString, Cfg_CommaSpace, Wrk_DateString);
			'		End_If;
			'
			'// Final part of the pretty date is the year, in whatever number of digits it needs
			'		DTOS (Ref_DT.Yr, Wrk_YearString);
			'		CONCAT (Wrk_DateString, Wrk_YearString, Wrk_DateString);
			'	End_If;
			'End_If;
			'
			'// Check if the time is invalid.  If so, copy the bad time string and flag it
			'If (((Ref_DT.Hr<0) OR (Ref_DT.Hr>23) OR (Ref_DT.Min<0) OR (Ref_DT.Min>59)) OR ((Ref_DT.Sec<0) OR (Ref_DT.Sec>59) OR (Ref_DT.uSec<0)) OR (Ref_DT.uSec>999999)) Then
			'	CONCAT (Wrk_TimeString, Cfg_BadTimeString, Wrk_TimeString);
			'	Sts_InvTime := 1;
			'Else
			'
			'// Time is valid, so generate the time string.  Do we want 12-hour time with no leading zero or 24-hour time with leading zero?
			'	Sts_InvTime := 0;
			'	If (Cfg_12Hr AND (NOT Cfg_ISODate)) Then
			'		Wrk_Hour := ((Ref_DT.Hr+11) MOD 12) +1;
			'		If (Wrk_Hour > 9) Then
			'			Wrk_Digit.DATA[0] := (Wrk_Hour / 10)+48;
			'			CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'		End_If;
			'		Wrk_Digit.DATA[0] := (Wrk_Hour MOD 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'	Else
			'		Wrk_Digit.DATA[0] := (Ref_DT.Hr / 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.Hr MOD 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'	End_If;
			'	CONCAT (Wrk_TimeString, Cfg_Colon, Wrk_TimeString);
			'
			'// Minutes: always two digits
			'	Wrk_Digit.DATA[0] := (Ref_DT.Min / 10)+48;
			'	CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'	Wrk_Digit.DATA[0] := (Ref_DT.Min MOD 10)+48;
			'	CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'
			'// Seconds, if selected
			'	If (Cfg_InclSec) Then
			'		CONCAT (Wrk_TimeString, Cfg_Colon, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.Sec / 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.Sec MOD 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'	End_If;
			'
			'// Microseconds, if seconds and microseconds selected
			'	If (Cfg_InclSec AND Cfg_InclMicrosec) Then
			'		CONCAT (Wrk_TimeString, Cfg_Period, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.uSec / 100000)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := ((Ref_DT.uSec / 10000) MOD 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := ((Ref_DT.uSec / 1000) MOD 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := ((Ref_DT.uSec / 100) MOD 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := ((Ref_DT.uSec / 10) MOD 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'		Wrk_Digit.DATA[0] := (Ref_DT.uSec MOD 10)+48;
			'		CONCAT (Wrk_TimeString, Wrk_Digit, Wrk_TimeString);
			'	End_If;
			'
			'// Finally, if 12-hour and not ISO, add AM/PM indicator
			'	If (Cfg_12Hr AND (NOT Cfg_ISODate)) Then
			'		CONCAT (Wrk_TimeString, Cfg_Space, Wrk_TimeString);
			'		If (Ref_DT.Hr >= 12) Then
			'			CONCAT (Wrk_TimeString, Cfg_PMString, Wrk_TimeString);
			'		Else
			'			CONCAT (Wrk_TimeString, Cfg_AMString, Wrk_TimeString);
			'		End_If;
			'	End_If;
			'End_If;
			'
			'// Last, Output = date <space> time
			'CONCAT (Wrk_DateString,Cfg_Space,Wrk_DateString);
			'CONCAT (Wrk_DateString,Wrk_TimeString,Ref_Out);
			'
		END_ST_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION WAGO_404 (Description := "For use with WAGO 750-404/000-003 Frequency Counter Module",
	                                        Revision := "1.0",
	                                        ExecutePrescan := No,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := No,
	                                        CreatedDate := "2009-08-05T16:34:19.287Z",
	                                        CreatedBy := "PC0802\Larry",
	                                        EditedDate := "2021-03-08T23:48:03.039Z",
	                                        EditedBy := "WIN-2669UBAKA7O\AESRockwell",
	                                        SoftwareRevision := "v32.03",
	                                        AdditionalHelpText := "The WAGO_404_3 instruction allows setup and processing of data of a WAGO 750-404/000-003 Frequency Counter Module.  When the $'Enable$' input is TRUE, the instruction allows frequency range selection and watchdog time adjustment, while providing the frequency calculated by the Frequency Counter Module.$N$NThis instruction is for use with the 750-404/000-003 module only.  This instruction is not intended for use with any other variants of the 750-404 module.$N$NThe 750-404/000-003 module allows four settings (0-3) for method of measuring, frequency range, and representation.  Change the input parameter $'Range$' to select one of the following settings:$N$N  0 : Measured data is integrated over 1 period.$N       Maximum frequency range is 0.1Hz to 8kHz$N       Frequency output displayed in 1/1000Hz$N       ( 0 is the default setting )$N$N  1 : Measured data is integrated over 4 periods.$N       Maximum frequency range is 0.25Hz to 32kHz$N       Frequency output displayed in 1/100Hz$N$N  2 : Measured data is integrated over 16 periods.$N       Maximum frequency range is 1Hz to 100kHz$N       Frequency output displayed in 1/10Hz$N$N  3 : Measured data is integrated over 16 periods.$N       Maximum frequency range is 1Hz to 100kHz$N       Frequency output displayed in Hz$N$NThe output parameter $'Range$' displays the current range (0-3) as reported by the module.$N$NInput parameters $'DO1Req$' and $'DO2Req$' can be set TRUE to turn on module Digital Outputs DO1 and DO2 respectively, and reset FALSE to turn these outputs off.  Output parameters $'DO1Status$' and $'DO2Status$' indicate the state of these outputs as reported by the module.$N$NThe $'GateStatus$' output parameter is set TRUE when the module$'s GATE input receives a 24V signal.  When $'GateStatus$' is TRUE, the $'Frequency$' output parameter maintains its last value.  When 24V is removed from the module$'s GATE input, the $'GateStatus$' output parameter is reset to FALSE, and the $'Frequency$' output parameter will display the current measured value.$N$NIf the CLOCK input of the 750-404/000-003 module does not detect a change of signal within a configurable time span, the module will stop reporting the last measured frequency, and instead report the value 0xFFFFFFFF.  This configured time span is called the Watchdog time, and can be set using the $'WatchdogTime$' and $'WatchdogSet$' input parameters.  To change the Watchdog time, set the $'WatchdogTime$' parameter to a value from 0 to 16383 milli-seconds, and set the $'WatchdogSet$' parameter TRUE.  When the Watchdog time is set, the $'WatchdogSet$' input parameter will be reset to FALSE.  The Watchdog time is not stored in retained memory of the 750-404/000-003 module - after a power cycle, the watchdog time defaults back to 10 seconds.  If the Watchdog has expired ($'Frequency$' set to 0xFFFFFFFF), and the 750-404/000-003 module begins detecting change of signal at the CLOCK input, the module will automatically begin calculating frequency, and the $'Frequency$' output will display the current measured value.$N$NThe $'ModuleInputs$' and $'ModuleOutputs$' arrays must be mapped to the 6-byte (SINT) input and output process images of the respective WAGO 750-404/000-003 Frequency Counter Module.$N$NUse the Copy (COP) instruction to copy the 750-404/000-003 module$'s 6-byte (SINT) input process image (see $'Controller Tags$') to a SINT[6] array for passing data to the $'ModuleInputs$' InOut array.  Perform this operation before calling the 750_404_3 Add-On Instruction.$N$NUse the Copy (COP) instruction to copy the 750-404/000-003 module$'s 6-byte (SINT) output process image (see $'Controller Tags$') from a SINT[6] array for passing data from the $'ModuleOutputs$' InOut array.  Perform this operation after calling the 750_404_3 Add-On Instruction.$N$NConsult the WAGO 750-404 Product Manual for further information about the 750-404/000-003 Frequency Counter Module.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			ModuleInputs : SINT[6] (Description := "Input process image of WAGO 750-404/000-003 module",
			                        Usage := InOut,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes);
			ModuleOutputs : SINT[6] (Description := "Output process image of WAGO 750-404/000-003 module",
			                         COMMENT[1].7 := "TC1 Sign Bit",
			                         COMMENT[3].7 := "TC2 Sign Bit",
			                         Usage := InOut,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes);
			RangeReq : DINT (Description := "Desired Frequency Measuring Range",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			DO1Req : BOOL (Description := "Set TRUE to turn on  module Digital Output 1",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			DO2Req : BOOL (Description := "Set TRUE to turn on  module Digital Output 2",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			WatchdogTime : DINT (Description := "Watchdog Time (ms)",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        DefaultData := 1000);
			WatchdogSet : BOOL (Description := "Set TRUE to change Watchdog",
			                       Usage := InOut,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes);
			Frequency : DINT (Description := "Frequency",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Range : DINT (Description := "Current range reported by module",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read Only,
			                 DefaultData := 0);
			DO1Status : BOOL (Description := "Indicates state of module Digital Output 1",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			DO2Status : BOOL (Description := "Indicates state of module Digital Output 2",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			GateStatus : BOOL (Description := "Indicates state of module input GATE",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			WD_Step : INT (RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: BTD(ModuleInputs[5],0,Frequency,24,8)BTD(ModuleInputs[4],0,Frequency,16,8)BTD(ModuleInputs[3],0,Frequency,8,8)BTD(ModuleInputs[2],0,Frequency,0,8);
				N: GEQ(RangeReq,0)LEQ(RangeReq,3)OTU(ModuleOutputs[0].7)BTD(RangeReq,0,ModuleOutputs[0],0,2);
				N: BTD(ModuleInputs[0],0,Range,0,2);
				N: XIC(DO1Req)OTE(ModuleOutputs[0].2);
				N: XIC(DO2Req)OTE(ModuleOutputs[0].3);
				N: XIC(ModuleInputs[0].2)OTE(DO1Status);
				N: XIC(ModuleInputs[0].3)OTE(DO2Status);
				N: XIC(ModuleInputs[0].5)OTE(GateStatus);
				N: EQU(WD_Step,0)GEQ(WatchdogTime,0)LEQ(WatchdogTime,16383)XIC(WatchdogSet)MOV(1,WD_Step);
				N: EQU(WD_Step,1)[BTD(WatchdogTime,8,ModuleOutputs[3],0,8) BTD(WatchdogTime,0,ModuleOutputs[2],0,8) ,OTL(ModuleOutputs[0].4) OTU(ModuleOutputs[0].7) ,MOV(2,WD_Step) ];
				N: EQU(WD_Step,2)XIC(ModuleInputs[0].4)[OTU(ModuleOutputs[0].4) ,MOV(3,WD_Step) ];
				N: EQU(WD_Step,3)XIO(ModuleOutputs[0].4)XIO(ModuleInputs[0].4)[OTU(WatchdogSet) ,MOV(0,WD_Step) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION WAGO_455 (Description := "Normalizes data received from a WAGO 750-455 4-Channel 4-20mA Analog Input Module.",
	                                        Revision := "1.1",
	                                        RevisionNote := "Changed condition for overcurrent detection.",
	                                        ExecutePrescan := No,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := No,
	                                        CreatedDate := "2009-08-05T16:34:19.287Z",
	                                        CreatedBy := "PC0802\Larry",
	                                        EditedDate := "2018-07-26T16:47:11.636Z",
	                                        EditedBy := "pc05303\LARRY",
	                                        SoftwareRevision := "v29.00",
	                                        AdditionalHelpText := "The WAGO_455 instruction normalizes data received from a WAGO 750-455 4-Channel 4-20mA Analog Input Module.  When it is enabled, the instruction provides the following information:$N$N    Channel 1 current expressed as numerical value from 0 to 32763$N    Channel 1 current in mA (x100)$N    Channel 1 under-current or broken wire detection$N    Channel 1 over-current detection$N$N    Channel 2 current expressed as numerical value from 0 to 32763$N    Channel 2 current in mA (x100)$N    Channel 2 under-current or broken wire detection$N    Channel 2 over-current detection$N$N    Channel 3 current expressed as numerical value from 0 to 32763$N    Channel 3 current in mA (x100)$N    Channel 3 under-current or broken wire detection$N    Channel 3 over-current detection$N$N    Channel 4 current expressed as numerical value from 0 to 32763$N    Channel 4 current in mA (x100)$N    Channel 4 under-current or broken wire detection$N    Channel 4 over-current detection$N$NThe $'ModuleInputs$' array must be mapped to the 8-byte (SINT) input process image of the respective WAGO 750-455 4-Channel 4-20mA Analog Input Module.$N$NUse the Copy (COP) instruction to copy the 750-455 module$'s 8-byte (SINT) input process image (see $'Controller Tags$') to a SINT[8] array for passing data to the $'ModuleInputs$' InOut array.  Perform this operation before calling the 750_455 Add-On Instruction.$N$NThe outputs Ch#_Undercurrent provide the following indication:$N$N    Off (FALSE) :  Current reading is greater than or equal to the threshold value of 4mA.$N    On (TRUE)  :  Current reading is less than the threshold value of 4mA.$N$NThe outputs Ch#_Overcurrent provide the following indication:$N$N    Off (FALSE) :  Current reading is less than or equal to the threshold value of 20mA.$N    On (TRUE)  :  Current reading is greater than the threshold value of 20mA.$N$NConsult the WAGO 750-455 Product Manual for further information about the 4-Channel 4-20mA Analog Input Module.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			ModuleInputs : SINT[8] (Description := "Input process image of WAGO 750-455 module.",
			                        COMMENT[1].7 := "TC1 Sign Bit",
			                        COMMENT[3].7 := "TC2 Sign Bit",
			                        Usage := InOut,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes);
			Ch1_Value : DINT (Description := "Channel 1 Current Expressed as Numerical Value from 0 to 32763",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Ch1_Current : DINT (Description := "Channel 1 Current in mA (x100)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Ch1_UnderCurrent : BOOL (Description := "Channel 1 Under-Current or Broken Wire Detected",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Ch1_OverCurrent : BOOL (Description := "Channel 1 Over-Current Detected",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Ch2_Value : DINT (Description := "Channel 2 Current Expressed as Numerical Value from 0 to 32763",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Ch2_Current : DINT (Description := "Channel 2 Current in mA (x100)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Ch2_UnderCurrent : BOOL (Description := "Channel 2 Under-Current or Broken Wire Detected",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Ch2_OverCurrent : BOOL (Description := "Channel 2 Over-Current Detected",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Ch3_Value : DINT (Description := "Channel 3 Current Expressed as Numerical Value from 0 to 32763",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Ch3_Current : DINT (Description := "Channel 3 Current in mA (x100)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Ch3_UnderCurrent : BOOL (Description := "Channel 3 Under-Current or Broken Wire Detected",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Ch3_OverCurrent : BOOL (Description := "Channel 3 Over-Current Detected",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			Ch4_Value : DINT (Description := "Channel 4 Current Expressed as Numerical Value from 0 to 32763",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Ch4_Current : DINT (Description := "Channel 4 Current in mA (x100)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Ch4_UnderCurrent : BOOL (Description := "Channel 4 Under-Current or Broken Wire Detected",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Ch4_OverCurrent : BOOL (Description := "Channel 4 Over-Current Detected",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			tmpREAL : REAL[8] (RADIX := Float,
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			tmpDINT : DINT[12] (RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: BTD(ModuleInputs[0],0,tmpDINT[0],0,8)BTD(ModuleInputs[1],0,tmpDINT[1],8,8)ADD(tmpDINT[1],tmpDINT[0],tmpDINT[2]);
				N: MOV(tmpDINT[2],Ch1_Value);
				N: MOV(Ch1_Value,tmpREAL[0])DIV(tmpREAL[0],20.48,tmpREAL[1])ADD(tmpREAL[1],400,Ch1_Current);
				N: EQU(Ch1_Value,16#0003)OTE(Ch1_UnderCurrent);
				N: EQU(Ch1_Value,16#7FFB)OTE(Ch1_OverCurrent);
				N: BTD(ModuleInputs[2],0,tmpDINT[3],0,8)BTD(ModuleInputs[3],0,tmpDINT[4],8,8)ADD(tmpDINT[4],tmpDINT[3],tmpDINT[5]);
				N: MOV(tmpDINT[5],Ch2_Value);
				N: MOV(Ch2_Value,tmpREAL[2])DIV(tmpREAL[2],20.48,tmpREAL[3])ADD(tmpREAL[3],400,Ch2_Current);
				N: EQU(Ch2_Value,16#0003)OTE(Ch2_UnderCurrent);
				N: EQU(Ch2_Value,16#7FFB)OTE(Ch2_OverCurrent);
				N: BTD(ModuleInputs[4],0,tmpDINT[6],0,8)BTD(ModuleInputs[5],0,tmpDINT[7],8,8)ADD(tmpDINT[7],tmpDINT[6],tmpDINT[8]);
				N: MOV(tmpDINT[8],Ch3_Value);
				N: MOV(Ch3_Value,tmpREAL[4])DIV(tmpREAL[4],20.48,tmpREAL[5])ADD(tmpREAL[5],400,Ch3_Current);
				N: EQU(Ch3_Value,16#0003)OTE(Ch3_UnderCurrent);
				N: EQU(Ch3_Value,16#7FFB)OTE(Ch3_OverCurrent);
				N: BTD(ModuleInputs[6],0,tmpDINT[9],0,8)BTD(ModuleInputs[7],0,tmpDINT[10],8,8)ADD(tmpDINT[10],tmpDINT[9],tmpDINT[11]);
				N: MOV(tmpDINT[11],Ch4_Value);
				N: MOV(Ch4_Value,tmpREAL[6])DIV(tmpREAL[6],20.48,tmpREAL[7])ADD(tmpREAL[7],400,Ch4_Current);
				N: EQU(Ch4_Value,16#0003)OTE(Ch4_UnderCurrent);
				N: EQU(Ch4_Value,16#7FFB)OTE(Ch4_OverCurrent);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION WAGO_461 (Description := "Normalizes data received from a WAGO 750-461 2-Channel RTD Analog Input Module.",
	                                        Revision := "1.2",
	                                        RevisionNote := "Changed handling of negative values.",
	                                        ExecutePrescan := No,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := No,
	                                        CreatedDate := "2009-08-05T16:34:19.287Z",
	                                        CreatedBy := "PC0802\Larry",
	                                        EditedDate := "2011-08-12T16:53:14.448Z",
	                                        EditedBy := "PC0802\Larry",
	                                        SoftwareRevision := "v16.03",
	                                        AdditionalHelpText := "The WAGO_461 instruction normalizes data received from a WAGO 750-461 2-Channel RTD Analog Input Module and its variants.  When it is enabled, the instruction provides the following information:$N$N    Channel 1 measurement expressed as numerical value (Hex)$N    Channel 1 temperature in degC x10 (for Pt and Ni RTD sensors only)$N    Channel 1 resistance in ohms (for resistance measuring only)$N    Channel 1 under-range detection$N    Channel 1 over-range detection (e.g. broken wire)$N$N    Channel 2 measurement expressed as numerical value (Hex)$N    Channel 2 temperature in degC x10 (for Pt and Ni RTD sensors only)$N    Channel 2 resistance in ohms (for resistance measuring only)$N    Channel 2 under-range detection$N    Channel 2 over-range detection (e.g. broken wire)$N$NThe $'ModuleInputs$' array must be mapped to the 4-byte (SINT) input process image of the respective WAGO 750-461 2-Channel RTD Analog Input Module.$N$NUse the Copy (COP) instruction to copy the 750-461 module$'s 4-byte (SINT) input process image (see $'Controller Tags$') to a SINT[4] array for passing data to the $'ModuleInputs$' InOut array.  Perform this operation before calling the 750_461 Add-On Instruction.$N$NNote: This instruction will only work with the standard 750-461 module and the following variants:  $N750-461/000-002$N750-461/000-003$N750-461/000-004$N750-461/000-005$N750-461/000-006$N750-461/000-007$N750-461/003-000 (configured as one of the variants listed here)$NOther variations of this module are not currently supported.$N$NThe Ch1_RTD_Type and Ch2_RTD_Type instruction inputs allow selection of the resistive type for the respective module input channel.  Enter the value 0-9 to define the resistive type for each channel:$N$N    0 : Pt100 (default)$N    1 : Reserved (not currently supported)$N    2 : Reserved (not currently supported)$N    3 : Pt1000$N    4 : Ni100$N    5 : Reserved (not currently supported)$N    6 : Ni1000$N    7 : 10 Ohm to 1.2 kOhm$N    8 : 10 Ohm to 5.0 kOhm$N    9 : Channel not in use$N$NConsult the WAGO 750-461 Product Manual for further information about the 2-Channel RTD Analog Input Module.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			ModuleInputs : SINT[4] (Description := "Input process image of WAGO 750-461 module.",
			                        COMMENT[1].7 := "TC1 Sign Bit",
			                        COMMENT[3].7 := "TC2 Sign Bit",
			                        Usage := InOut,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes);
			Ch1_Value : DINT (Description := "Ch 1 Resistance Value (Hex)",
			                     Usage := Output,
			                     RADIX := Hex,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Ch1_Temp_degCx10 : DINT (Description := "Channel 1 Temperature (degCx10)",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Ch1_Ohms : DINT (Description := "Channel 1 Resistance (ohms)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Ch1_RTD_Type : DINT (Description := "(See Add-On Help for RTD Types)",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        DefaultData := 0);
			Ch1_UnderRange : BOOL (Description := "Channel 1 Under-Range Detected",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Ch1_OverRange : BOOL (Description := "Channel 1 Over-Range Detected",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Ch2_Value : DINT (Description := "Ch 2 Resistance Value (Hex)",
			                     Usage := Output,
			                     RADIX := Hex,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Ch2_Temp_degCx10 : DINT (Description := "Channel 2 Temperature (degCx10)",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			Ch2_Ohms : DINT (Description := "Channel 2 Resistance (ohms)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			Ch2_RTD_Type : DINT (Description := "(See Add-On Help for RTD Types)",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        DefaultData := 0);
			Ch2_UnderRange : BOOL (Description := "Channel 2 Under-Range Detected",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			Ch2_OverRange : BOOL (Description := "Channel 2 Over-Range Detected",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			tmpDINT : DINT[10] (RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[0,0,0,0,0,0,0,0,0,0]");
			tmpINT : INT (RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "**** CHANNEL 1 ****";
				N: BTD(ModuleInputs[0],0,tmpDINT[0],0,8)BTD(ModuleInputs[1],0,tmpDINT[1],8,8)ADD(tmpDINT[1],tmpDINT[0],tmpDINT[2])MOV(tmpDINT[2],Ch1_Value);
				RC: "**** Pt100, Pt1000 ****";
				N: [EQU(Ch1_RTD_Type,0) ,EQU(Ch1_RTD_Type,3) ][NEQ(Ch1_Value,16#8001) MOV(Ch1_Value,tmpINT) MOV(tmpINT,Ch1_Temp_degCx10) ,MOV(0,Ch1_Ohms) ,[EQU(Ch1_Value,16#8001) MOV(-2000,Ch1_Temp_degCx10) OTL(Ch1_UnderRange) ,NEQ(Ch1_Value,16#8001) OTU(Ch1_UnderRange) ] ,[EQU(Ch1_Value,16#2134) OTL(Ch1_OverRange) ,NEQ(Ch1_Value,16#2134) OTU(Ch1_OverRange) ] ];
				RC: "**** Ni100, Ni1000 ****";
				N: [EQU(Ch1_RTD_Type,4) ,EQU(Ch1_RTD_Type,6) ][NEQ(Ch1_Value,16#8001) NEQ(Ch1_Value,16#2134) MOV(Ch1_Value,tmpINT) MOV(tmpINT,Ch1_Temp_degCx10) ,MOV(0,Ch1_Ohms) ,[EQU(Ch1_Value,16#8001) MOV(-600,Ch1_Temp_degCx10) OTL(Ch1_UnderRange) ,NEQ(Ch1_Value,16#8001) OTU(Ch1_UnderRange) ] ,[EQU(Ch1_Value,16#2134) MOV(2500,Ch1_Temp_degCx10) OTL(Ch1_OverRange) ,NEQ(Ch1_Value,16#2134) OTU(Ch1_OverRange) ] ];
				RC: "**** 10 0hm to 1.2 k-ohm ****";
				N: EQU(Ch1_RTD_Type,7)[NEQ(Ch1_Value,16#EC00) NEQ(Ch1_Value,16#2134) DIV(Ch1_Value,10,Ch1_Ohms) ,MOV(0,Ch1_Temp_degCx10) ,EQU(Ch1_Value,16#EC00) MOV(0,Ch1_Ohms) OTU(Ch1_UnderRange) ,[EQU(Ch1_Value,16#2134) MOV(1200,Ch1_Ohms) OTL(Ch1_OverRange) ,NEQ(Ch1_Value,16#2134) OTU(Ch1_OverRange) ] ];
				RC: "**** 10 0hm to 5.0 k-ohm ****";
				N: EQU(Ch1_RTD_Type,8)[NEQ(Ch1_Value,16#EC00) NEQ(Ch1_Value,16#2710) DIV(Ch1_Value,2,Ch1_Ohms) ,MOV(0,Ch1_Temp_degCx10) ,EQU(Ch1_Value,16#EC00) MOV(0,Ch1_Ohms) OTU(Ch1_UnderRange) ,[EQU(Ch1_Value,16#2710) MOV(5000,Ch1_Ohms) OTL(Ch1_OverRange) ,NEQ(Ch1_Value,16#2710) OTU(Ch1_OverRange) ] ];
				RC: "**** Unsupported RTD_Type Entered ****";
				N: [LES(Ch1_RTD_Type,0) ,GRT(Ch1_RTD_Type,8) ,EQU(Ch1_RTD_Type,1) ,EQU(Ch1_RTD_Type,2) ,EQU(Ch1_RTD_Type,5) ][MOV(0,Ch1_Temp_degCx10) ,MOV(0,Ch1_Ohms) ,OTU(Ch1_UnderRange) OTU(Ch1_OverRange) ];
				RC: "**** CHANNEL 2 ****";
				N: BTD(ModuleInputs[2],0,tmpDINT[5],0,8)BTD(ModuleInputs[3],0,tmpDINT[6],8,8)ADD(tmpDINT[6],tmpDINT[5],tmpDINT[7])MOV(tmpDINT[7],Ch2_Value);
				RC: "**** Pt100, Pt1000 ****";
				N: [EQU(Ch2_RTD_Type,0) ,EQU(Ch2_RTD_Type,3) ][NEQ(Ch2_Value,16#8001) MOV(Ch2_Value,tmpINT) MOV(tmpINT,Ch2_Temp_degCx10) ,MOV(0,Ch2_Ohms) ,[EQU(Ch2_Value,16#8001) MOV(-2000,Ch2_Temp_degCx10) OTL(Ch2_UnderRange) ,NEQ(Ch2_Value,16#8001) OTU(Ch2_UnderRange) ] ,[EQU(Ch2_Value,16#2134) OTL(Ch2_OverRange) ,NEQ(Ch2_Value,16#2134) OTU(Ch2_OverRange) ] ];
				RC: "**** Ni100, Ni1000 ****";
				N: [EQU(Ch2_RTD_Type,4) ,EQU(Ch2_RTD_Type,6) ][NEQ(Ch2_Value,16#8001) NEQ(Ch2_Value,16#2134) MOV(Ch2_Value,tmpINT) MOV(tmpINT,Ch2_Temp_degCx10) ,MOV(0,Ch2_Ohms) ,[EQU(Ch2_Value,16#8001) MOV(-600,Ch2_Temp_degCx10) OTL(Ch2_UnderRange) ,NEQ(Ch2_Value,16#8001) OTU(Ch2_UnderRange) ] ,[EQU(Ch2_Value,16#2134) MOV(2500,Ch2_Temp_degCx10) OTL(Ch2_OverRange) ,NEQ(Ch2_Value,16#2134) OTU(Ch2_OverRange) ] ];
				RC: "**** 10 0hm to 1.2 k-ohm ****";
				N: EQU(Ch2_RTD_Type,7)[NEQ(Ch2_Value,16#EC00) NEQ(Ch2_Value,16#2134) DIV(Ch2_Value,10,Ch2_Ohms) ,MOV(0,Ch2_Temp_degCx10) ,EQU(Ch2_Value,16#EC00) MOV(0,Ch2_Ohms) OTU(Ch2_UnderRange) ,[EQU(Ch2_Value,16#2134) MOV(1200,Ch2_Ohms) OTL(Ch2_OverRange) ,NEQ(Ch2_Value,16#2134) OTU(Ch2_OverRange) ] ];
				RC: "**** 10 0hm to 5.0 k-ohm ****";
				N: EQU(Ch2_RTD_Type,8)[NEQ(Ch2_Value,16#EC00) NEQ(Ch2_Value,16#2710) DIV(Ch2_Value,2,Ch2_Ohms) ,MOV(0,Ch2_Temp_degCx10) ,EQU(Ch2_Value,16#EC00) MOV(0,Ch2_Ohms) OTU(Ch2_UnderRange) ,[EQU(Ch2_Value,16#2710) MOV(5000,Ch2_Ohms) OTL(Ch2_OverRange) ,NEQ(Ch2_Value,16#2710) OTU(Ch2_OverRange) ] ];
				RC: "**** Unsupported RTD_Type Entered ****";
				N: [LES(Ch2_RTD_Type,0) ,GRT(Ch2_RTD_Type,8) ,EQU(Ch2_RTD_Type,1) ,EQU(Ch2_RTD_Type,2) ,EQU(Ch2_RTD_Type,5) ][MOV(0,Ch2_Temp_degCx10) ,MOV(0,Ch2_Ohms) ,OTU(Ch2_UnderRange) OTU(Ch2_OverRange) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION WAGO_550 (Description := "Prepares data for processing by a WAGO 750-550 2-Channel 0-10VDC Analog Output Module.",
	                                        Revision := "1.0",
	                                        ExecutePrescan := No,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := No,
	                                        CreatedDate := "2009-08-05T16:34:19.287Z",
	                                        CreatedBy := "PC0802\Larry",
	                                        EditedDate := "2010-05-10T21:37:29.707Z",
	                                        EditedBy := "PC0802\Larry",
	                                        SoftwareRevision := "v16.03",
	                                        AdditionalHelpText := "The WAGO_550 instruction prepares data for processing by a WAGO 750-550 2-Channel 0-10VDC Analog Output Module.  When the $'Enable$' input is TRUE, the instruction monitors the Value and Voltage input values for each channel and makes the following determination:$N$N    If Value >= 0 and Voltage = 0, then the channel output will be determined by the Value input.$N    If Voltage > 0 and Value = 0, then the channel output will be determined by the Voltage input.$N    If Value > 0 and Voltage > 0, then the input value is considered invalid, and the channel output will be 0V.$N    If Value = 0 and Voltage = 0, then the output will be 0V.$N$NIf using the Value input, a number from 0-32767 must be entered.  The instruction will use this number to produce a linear scaled output from 0-10VDC.$N $NIf using the Voltage input, a number from 0 to 10000 must be entered, representing the desired mV output of the module.$N$NThe $'ModuleOutputs$' array must be mapped to the 4-byte (SINT) output process image of the respective WAGO 750-550 2-Channel 0-10VDC Analog Output Module.$N$NUse the Copy (COP) instruction to copy the 750-550 module$'s 4-byte (SINT) output process image (see $'Controller Tags$') from a SINT[4] array for passing data from the $'ModuleOutputs$' InOut array.  Perform this operation after calling the 750_550 Add-On Instruction.$N$NThe outputs Ch1_InputErr & Ch2_InputErr provide the following indication:$N$N    Off (FALSE) :  Value and Voltage input parameters are within the permissible range.$N    On (TRUE)  :  Value or Voltage input parameters exceed the permissible range, or are both > 0.$N$NConsult the WAGO 750-550 Product Manual for further information about the 2-Channel 0-10VDC Analog Output Module.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			ModuleOutputs : SINT[4] (Description := "Output process image of WAGO 750-550 module.",
			                         COMMENT[1].7 := "TC1 Sign Bit",
			                         COMMENT[3].7 := "TC2 Sign Bit",
			                         Usage := InOut,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes);
			Ch1_Value : DINT (Description := "Channel 1 Voltage Expressed as Numerical Value from 0 to 32767",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Ch1_Voltage : DINT (Description := "Channel 1 Voltage in mV (0-10000)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Ch1_InputErr : BOOL (Description := "Channel 1 Value or Voltage Input Invalid",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Ch2_Value : DINT (Description := "Channel 2 Voltage Expressed as Numerical Value from 0 to 32767",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Ch2_Voltage : DINT (Description := "Channel 2 Voltage in mV (0-10000)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Ch2_InputErr : BOOL (Description := "Channel 2 Value or Voltage Input Invalid",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			diOutput1 : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			diOutput2 : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: [[LES(Ch1_Value,0) ,GRT(Ch1_Value,32767) ] ,[LES(Ch1_Voltage,0) ,GRT(Ch1_Voltage,10000) ] ,GRT(Ch1_Value,0) GRT(Ch1_Voltage,0) ][OTE(Ch1_InputErr) ,MOV(0,diOutput1) ];
				N: XIO(Ch1_InputErr)[GRT(Ch1_Voltage,0) [CPT(diOutput1,Ch1_Voltage * 32768 / 10000) ,GRT(diOutput1,32767) MOV(32767,diOutput1) ] ,EQU(Ch1_Voltage,0) MOV(Ch1_Value,diOutput1) ];
				N: BTD(diOutput1,0,ModuleOutputs[0],0,8)BTD(diOutput1,8,ModuleOutputs[1],0,8);
				N: [[LES(Ch2_Value,0) ,GRT(Ch2_Value,32767) ] ,[LES(Ch2_Voltage,0) ,GRT(Ch2_Voltage,10000) ] ,GRT(Ch2_Value,0) GRT(Ch2_Voltage,0) ][OTE(Ch2_InputErr) ,MOV(0,diOutput2) ];
				N: XIO(Ch2_InputErr)[GRT(Ch2_Voltage,0) [CPT(diOutput2,Ch2_Voltage * 32768 / 10000) ,GRT(diOutput2,32767) MOV(32767,diOutput2) ] ,EQU(Ch2_Voltage,0) MOV(Ch2_Value,diOutput2) ];
				N: BTD(diOutput2,0,ModuleOutputs[2],0,8)BTD(diOutput2,8,ModuleOutputs[3],0,8);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION WAGO_555 (Description := "Prepares data for processing by a WAGO 750-555 4-Channel 4-20mA Analog Output Module.",
	                                        Revision := "1.0",
	                                        ExecutePrescan := No,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := No,
	                                        CreatedDate := "2009-08-05T16:34:19.287Z",
	                                        CreatedBy := "PC0802\Larry",
	                                        EditedDate := "2011-06-16T15:13:20.092Z",
	                                        EditedBy := "PC0802\Larry",
	                                        SoftwareRevision := "v16.03",
	                                        AdditionalHelpText := "The WAGO_555 instruction prepares data for processing by a WAGO 750-555 4-Channel 4-20mA Analog Output Module.  When it is enabled, the instruction monitors the Value and Current input values for each channel and makes the following determination:$N$N    If Value >= 0 and Current = 0, then the channel output will be determined by the Value input.$N    If Current > 0 and Value = 0, then the channel output will be determined by the Current input.$N    If Value > 0 and Current > 0, then the input value is considered invalid, and the channel output will be 4mA.$N    If Value = 0 and Current = 0, then the output will be 4mA.$N$NIf using the Value input, a number from 0-32767 must be entered.  The instruction will use this number to produce a linear scaled output from 4-20mA.$N $NIf using the Current input, a number from 400 to 2000 must be entered, representing the desired mA output of the module (x100).$N$NThe $'ModuleOutputs$' array must be mapped to the 8-byte (SINT) output process image of the respective WAGO 750-555 4-Channel 4-20mA Analog Output Module.$N$NUse the Copy (COP) instruction to copy the 750-555 module$'s 8-byte (SINT) output process image (see $'Controller Tags$') from a SINT[8] array for passing data from the $'ModuleOutputs$' InOut array.  Perform this operation after calling the 750_555 Add-On Instruction.$N$NThe Ch#_InputErr outputs provide the following indication:$N$N    Off (FALSE) :  Value and Current input parameters are within the permissible range.$N    On (TRUE)  :  Value or Current input parameters exceed the permissible range, or are both > 0.$N$NConsult the WAGO 750-555 Product Manual for further information about the 4-Channel 4-20mA Analog Output Module.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			ModuleOutputs : SINT[8] (Description := "Output process image of WAGO 750-555 module.",
			                         COMMENT[1].7 := "TC1 Sign Bit",
			                         COMMENT[3].7 := "TC2 Sign Bit",
			                         Usage := InOut,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes);
			Ch1_Value : DINT (Description := "Channel 1 Current Expressed as Numerical Value from 0 to 32767",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Ch1_Current : DINT (Description := "Channel 1 Current in mA (x100)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Ch1_InputErr : BOOL (Description := "Channel 1 Value or Current Input Invalid",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Ch2_Value : DINT (Description := "Channel 2 Current Expressed as Numerical Value from 0 to 32767",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Ch2_Current : DINT (Description := "Channel 2 Current in mA (x100)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Ch2_InputErr : BOOL (Description := "Channel 2 Value or Current Input Invalid",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Ch3_Value : DINT (Description := "Channel 3 Current Expressed as Numerical Value from 0 to 32767",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Ch3_Current : DINT (Description := "Channel 3 Current in mA (x100)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Ch3_InputErr : BOOL (Description := "Channel 3 Value or Current Input Invalid",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			Ch4_Value : DINT (Description := "Channel 4 Current Expressed as Numerical Value from 0 to 32767",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Ch4_Current : DINT (Description := "Channel 4 Current in mA (x100)",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Ch4_InputErr : BOOL (Description := "Channel 4 Value or Current Input Invalid",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			diOutput1 : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			diOutput2 : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			diOutput4 : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			diOutput3 : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: [[LES(Ch1_Value,0) ,GRT(Ch1_Value,32767) ] ,NEQ(Ch1_Current,0) [LES(Ch1_Current,400) ,GRT(Ch1_Current,2000) ] ,GRT(Ch1_Value,0) GRT(Ch1_Current,0) ][OTE(Ch1_InputErr) ,MOV(0,diOutput1) ];
				N: XIO(Ch1_InputErr)[GRT(Ch1_Current,0) [CPT(diOutput1,(Ch1_Current - 400) * 2048 / 100) ,GRT(diOutput1,32767) MOV(32767,diOutput1) ] ,EQU(Ch1_Current,0) MOV(Ch1_Value,diOutput1) ];
				N: BTD(diOutput1,0,ModuleOutputs[0],0,8)BTD(diOutput1,8,ModuleOutputs[1],0,8);
				N: [[LES(Ch2_Value,0) ,GRT(Ch2_Value,32767) ] ,NEQ(Ch2_Current,0) [LES(Ch2_Current,400) ,GRT(Ch2_Current,2000) ] ,GRT(Ch2_Value,0) GRT(Ch2_Current,0) ][OTE(Ch2_InputErr) ,MOV(0,diOutput2) ];
				N: XIO(Ch2_InputErr)[GRT(Ch2_Current,0) [CPT(diOutput2,(Ch2_Current - 400) * 2048 / 100) ,GRT(diOutput2,32767) MOV(32767,diOutput2) ] ,EQU(Ch2_Current,0) MOV(Ch2_Value,diOutput2) ];
				N: BTD(diOutput2,0,ModuleOutputs[2],0,8)BTD(diOutput2,8,ModuleOutputs[3],0,8);
				N: [[LES(Ch3_Value,0) ,GRT(Ch3_Value,32767) ] ,NEQ(Ch3_Current,0) [LES(Ch3_Current,400) ,GRT(Ch3_Current,2000) ] ,GRT(Ch3_Value,0) GRT(Ch3_Current,0) ][OTE(Ch3_InputErr) ,MOV(0,diOutput3) ];
				N: XIO(Ch3_InputErr)[GRT(Ch3_Current,0) [CPT(diOutput3,(Ch3_Current - 400) * 2048 / 100) ,GRT(diOutput3,32767) MOV(32767,diOutput3) ] ,EQU(Ch3_Current,0) MOV(Ch3_Value,diOutput3) ];
				N: BTD(diOutput3,0,ModuleOutputs[4],0,8)BTD(diOutput3,8,ModuleOutputs[5],0,8);
				N: [[LES(Ch4_Value,0) ,GRT(Ch4_Value,32767) ] ,NEQ(Ch4_Current,0) [LES(Ch4_Current,400) ,GRT(Ch4_Current,2000) ] ,GRT(Ch4_Value,0) GRT(Ch4_Current,0) ][OTE(Ch4_InputErr) ,MOV(0,diOutput4) ];
				N: XIO(Ch4_InputErr)[GRT(Ch4_Current,0) [CPT(diOutput4,(Ch4_Current - 400) * 2048 / 100) ,GRT(diOutput4,32767) MOV(32767,diOutput4) ] ,EQU(Ch4_Current,0) MOV(Ch4_Value,diOutput4) ];
				N: BTD(diOutput4,0,ModuleOutputs[6],0,8)BTD(diOutput4,8,ModuleOutputs[7],0,8);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	TAG
		AIC0706 : PID_ENHANCED (Description := "Disolved Oxygen PID") := [1,40960,3.26333976e+000,2.00000000e+002,0.00000000e+000,9.00000000e+001,3.26333976e+000
				,0.00000000e+000,2.00000000e+002,0.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,1.00000000e+002,0.00000000e+000,1.00000000e+002,0.00000000e+000,2.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,1.00000000e+000,5.00000000e-001,0.00000000e+000,0.00000000e+000
				,3.40282347e+038,3.40282347e+038,-3.40282347e+038,-3.40282347e+038,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,5.00000000e+001,2.50000000e+001,2.50000000e+001,5.00000000e+001
				,0.00000000e+000,0,0.00000000e+000,1,0,0,1,37748800,0.00000000e+000,0.00000000e+000,3.26333976e+000
				,1.63166988e+000,1.63166988e+000,0.00000000e+000,0.00000000e+000,1.00000000e+000,1.00000000e+000
				,0,0,0,0.00000000e+000,1.59545031e+001,-1.63166988e+000,0.00000000e+000,0.00000000e+000,-1.63166988e+000
				,-1.63166988e+000,1.00000000e+000,8.33333377e-003,0.00000000e+000,1.00000000e+000,1.00000000e+000
				,5.00000000e-001,0.00000000e+000,0.00000000e+000,3.26333976e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,1.41060040e-037,0.00000000e+000,1.63166988e+000,1.63166988e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.40129846e-042,5.48368817e-009
				,0.00000000e+000,7.89211295e-042,1.00000000e+000,1.40129846e-042,5.48368817e-009,7.89211295e-042
				,1.00000000e+000];
		AIC0706_AT : PIDE_AUTOTUNE  := [0,-1,0.00000000e+000,5.00000000e+000,1.00000000e+000,0,8,1.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,[0,0,0,0,10,1115827979,0,0,0,0
				,1050608064,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1120403456,0,1128792064,0,1115827979,1115827979,1115827979
				,0,0,0,0,0,0,1084227584,1065353216,1114636288,8,1065353216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		AIC0706_Intlk : P_Intlk (Description := "DO Control Module Interlocks") := [14339,0,0,0,0,132,128,[[6,'E-Stop$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'HMI Abort$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Startup Active$00$00$00$00$00$00'],[17,'Safety Tapeswitch$00$00$00'],[17,'Safety Tapeswitch$00$00$00'
				],[20,'Analog Input Failure'],[9,'MFC Intlk$00$00$00$00$00$00$00$00$00$00$00'],[20,'Rocker Motor Stopped'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],132,132,132,128,132,132,1,132,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'],[18,'AIC0706 Interlocks$00$00'
				],[13,'AIC0706_Intlk$00$00$00$00$00$00$00'],[18,'AIC0706 Interlocks$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[20,'Rocker Motor Stopped']];
		AIC0706_Status : PIDE_Config  := [[1,'%$00$00$00$00$00$00$00'],[1,'%$00$00$00$00$00$00$00'],[13,'DO Controller$00$00$00$00$00$00$00'
				],6,2];
		AIC0707 : PID_ENHANCED (Description := "ph PID") := [1,40960,-9.99895996e+003,8.50000000e+000,5.50000000e+000,8.00000000e+000,5.50000000e+000
				,0.00000000e+000,8.50000000e+000,5.50000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000
				,1.00000000e+000,5.00000000e+001,5.00000000e+001,5.00000000e+001,5.00000000e+001,0.00000000e+000
				,1.00000000e+002,0.00000000e+000,1.00000000e+002,0.00000000e+000,2.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,2.00000000e+000,1.00000000e+000,0.00000000e+000,0.00000000e+000
				,3.40282347e+038,3.40282347e+038,-3.40282347e+038,-3.40282347e+038,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,5.00000000e-001,3.00000000e-001,3.00000000e-001,5.00000000e-001
				,0.00000000e+000,0,0.00000000e+000,1,0,0,1,40894816,5.00000000e+001,5.00000000e+001,5.50000000e+000
				,0.00000000e+000,-3.33482000e+005,1.00044600e+004,3.33482000e+005,1.00000000e+000,1.00000000e+000
				,0,0,0,0.00000000e+000,5.82605713e+003,3.33482000e+005,3.33482000e+005,3.33482000e+005,3.33482000e+005
				,3.33482000e+005,2.00000000e+000,1.66666675e-002,0.00000000e+000,1.00000000e+000,2.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,-9.99895996e+003,0.00000000e+000,5.00000000e+001
				,1.00044600e+004,0.00000000e+000,1.76328099e-037,1.00044600e+004,-3.33482000e+005,0.00000000e+000
				,5.00000000e+001,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.40129846e-042,5.48368861e-009
				,0.00000000e+000,7.89211295e-042,1.00000000e+000,1.40129846e-042,5.48368861e-009,7.89211295e-042
				,1.00000000e+000];
		AIC0707_AT : PIDE_AUTOTUNE  := [0,0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,8,1.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1065353216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		AIC0707_Intlk : P_Intlk (Description := "pH Controller Interlocks") := [14339,0,0,0,0,164,32,[[6,'E-Stop$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'HMI Abort$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Startup Active$00$00$00$00$00$00'],[17,'Safety Tapeswitch$00$00$00'],[17,'Safety Tapeswitch$00$00$00'
				],[20,'Analog Input Failure'],[15,'Base Pump Intlk$00$00$00$00$00'],[20,'Rocker Motor Stopped'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],164,164,164,32,164,164,1,164,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'
				],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[20,'Analog Input Failure']];
		AIC0707_Status : PIDE_Config  := [[0,'$00$00$00$00$00$00$00$00'],[1,'%$00$00$00$00$00$00$00'],[13,'pH Controller$00$00$00$00$00$00$00'
				],7,2];
		AirManualSP : REAL (RADIX := Float) := 0.00000000e+000;
		AirPercentOut : REAL (RADIX := Float) := 3.75000000e-001;
		AirProgOper : BOOL (RADIX := Decimal) := 0;
		Alarm_Cond_Exists : BOOL (Description := "Used for HMI Control",
		            RADIX := Decimal) := 0;
		AT0706 : P_AInAdv (Description := "Vessel Disolved Oxygen (DO) Indicator") := [65543,3.26334000e+000,0,0,2,0.00000000e+000,2.00000000e+002,0.00000000e+000,2.00000000e+002
				,0.00000000e+000,1.00000000e+000,0.00000000e+000,2.00000000e+002,0.00000000e+000,2.00000000e+002
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+002
				,0.00000000e+000,2.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,2.00000000e+002,0.00000000e+000,2.00000000e+002,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,2.03000000e+002,-2.08333325e+000,4.16666657e-001,3.26333976e+000,3.26333976e+000
				,3.26333976e+000,3.26333976e+000,0.00000000e+000,0.00000000e+000,3.26333976e+000,3.26334786e+000
				,0.00000000e+000,2.00000000e+002,34,34,32,0,0,2097156,[92275667,750,0,5,0,0,0,[1668427,5000,0],[3348753,5000
				,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13,'Low-Low Alarm$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[92275667,500,0,5,0,0
				,0,[1668427,5000,0],[3348753,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'Low Alarm$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[92275667,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[10,'High Alarm$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[92275667,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[15,'High-High Alarm$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[1,'%$00$00$00$00$00$00$00'],[6,'AT0706$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[8,'DO Probe$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'DO Sensor$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[967,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13
				,'Input Failure$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],0,1,32,34,0.00000000e+000,0.00000000e+000,0.00000000e+000,3.26333976e+000,1.00000000e-001
				,3.26333976e+000,0.00000000e+000,3.26333976e+000,[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'Low Deviation Alarm$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20
				,'High Deviation Alarm'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19
				,'High Rate of Change$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[-1069782063,2147483647,0],0.00000000e+000,1079040656,1079040655,[8,'P_AInAdv$00$00$00$00$00$00$00$00'
				],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606652975,0,0],[0,0,0],[-1606652975,0,0],[16,'PV Deviation Low$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606652975,0,0],[0,0,0],[-1606652975,0,0],[20,'PV Hi Rate of Change'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606652975,0,0],[0,0,0],[-1606652975,0,0],[17,'PV Deviation High$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606652975,0,0],[1668427,0,0],[-1606652975
				,0,0],[10,'PV Low-Low$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606652975
				,0,0],[1668427,0,0],[-1606652975,0,0],[6,'PV Low$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0],[43,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,[-1606652975,0,0],[3273218,0,0],[-1606652975,0,0],[12,'PV High-High$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606652975,0,0],[3273218,0,0],[-1606652975
				,0,0],[7,'PV High$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606652975
				,0,0],[1664327,0,0],[-1606652975,0,0],[13,'Input Failure$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'area01$00$00'],0,0,3.26334000e+000];
		AT0706_LPF : FILTER_LOW_PASS (Description := "MCV DO Low-Pass Filter") := [1,3.26334786e+000,1.00000000e-001,1,0,1.00000000e+001,1,0,1,3.26334000e+000,1.00000000e-001
				,0,0.00000000e+000,1.40129846e-043,5.48382184e-009,0.00000000e+000,7.89211295e-042,1.00000000e-001
				,1.00000000e-001,1.40129846e-045,1.00000000e-001,1.00000000e-001,1.40129846e-045,4.97516571e-003
				,2.00998322e+002,3.26334786e+000,3.26334000e+000,4.97516571e-003,-9.90049600e-001,3.26334786e+000
				,3.26334000e+000,0.00000000e+000,0.00000000e+000,3.26334786e+000,3.26334000e+000,0.00000000e+000
				,0.00000000e+000,3.26334786e+000,3.26334000e+000];
		AT0706_SpanValue : REAL (Description := "DO Probe Span Value",
		            RADIX := Float) := 1.00000000e+002;
		AT0706_Val_Filtered : REAL (RADIX := Float) := 3.26334000e+000;
		AT0707 : P_AInAdv (Description := "pH$Nsensor input") := [-1073676281,-9.99895996e+003,0,0,2,0.00000000e+000,1.40000000e+001,0.00000000e+000,1.40000000e+001
				,0.00000000e+000,1.00000000e+000,0.00000000e+000,1.40000000e+001,0.00000000e+000,1.40000000e+001
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.40000000e+001
				,0.00000000e+000,1.40000000e+001,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,1.40000000e+001,0.00000000e+000,1.40000000e+001,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,1.50000000e+001,-1.00000000e+000,5.00000000e-001,-9.99895996e+003,-9.99895996e+003
				,-9.99895996e+003,-9.99895996e+003,0.00000000e+000,0.00000000e+000,-9.99900000e+003,-9.99895996e+003
				,0.00000000e+000,1.40000000e+001,32,32,32,0,0,2098948,[967,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[13,'Low-Low Alarm$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[967,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9
				,'Low Alarm$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10
				,'High Alarm$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15
				,'High-High Alarm$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[2,'pH$00$00$00$00$00$00'],[6,'AT0707$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[8,'pH Probe$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'pH Sensor$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[967,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13
				,'Input Failure$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],0,1,32,32,0.00000000e+000,0.00000000e+000,0.00000000e+000,-9.99895996e+003,1.00000000e-001
				,-9.99895996e+003,0.00000000e+000,-9.99895996e+003,[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'Low Deviation Alarm$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20
				,'High Deviation Alarm'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19
				,'High Rate of Change$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[-1069782463,2147483647,0],0.00000000e+000,-971228201,-971228201,[8,'P_AInAdv$00$00$00$00$00$00$00$00'
				],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653375,0,0],[0,0,0],[-1606653375,0,0],[16,'PV Deviation Low$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653375,0,0],[0,0,0],[-1606653375,0,0],[20,'PV Hi Rate of Change'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653375,0,0],[0,0,0],[-1606653375,0,0],[17,'PV Deviation High$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[63,0.00000000e+000,0.00000000e+000,0.00000000e+000,[4118343,0,0],[-1606653375,0,0],[-1606653375
				,0,0],[10,'PV Low-Low$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],[63,0.00000000e+000,0.00000000e+000,0.00000000e+000,[4118343
				,0,0],[-1606653375,0,0],[-1606653375,0,0],[6,'PV Low$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0],[43,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,[-1606653375,0,0],[1535682,0,0],[-1606653375,0,0],[12,'PV High-High$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653375,0,0],[1535682,0,0],[-1606653375
				,0,0],[7,'PV High$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],[63,0.00000000e+000,0.00000000e+000,0.00000000e+000,[4118343
				,0,0],[-1606653375,0,0],[-1606653375,0,0],[13,'Input Failure$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'area01$00$00'],0,0,-9.99895996e+003];
		AT0707_LPF : FILTER_LOW_PASS (Description := "MCV pH Low-Pass Filter") := [1,-9.99900000e+003,1.00000000e-001,1,0,1.00000000e+001,1,0,1,-9.99895996e+003,1.00000000e-001
				,0,0.00000000e+000,1.40129846e-043,5.48355539e-009,0.00000000e+000,7.89211295e-042,1.00000000e-001
				,1.00000000e-001,1.40129846e-045,1.00000000e-001,1.00000000e-001,1.40129846e-045,4.97516571e-003
				,2.00998322e+002,-9.99900000e+003,-9.99895996e+003,4.97516571e-003,-9.90049600e-001,-9.99900000e+003
				,-9.99895996e+003,0.00000000e+000,0.00000000e+000,-9.99900000e+003,-9.99895996e+003,0.00000000e+000
				,0.00000000e+000,-9.99900000e+003,-9.99895996e+003];
		AT0707_SpanValue : REAL (Description := "pH Probe Span Value",
		            RADIX := Float) := 7.00000000e+000;
		AT0707_Val_Filtered : REAL (RADIX := Float) := -9.99895996e+003;
		C02Scaler : SCALE  := [3,1.00000000e+002,1.00000000e+002,0.00000000e+000,1.25000000e-001,0.00000000e+000,1,1.25000000e-001
				,0,0.00000000e+000,1.00000000e+002,9.99999978e-003,1.25000000e-001];
		CCAMaxCalc : REAL (RADIX := Float) := 1.00000000e+000;
		CCAmfcSP : REAL (RADIX := Float) := 2.00000000e+000;
		CM_FIC0111 : CM_MFC (Description := "Air Mass Flow Controller") := [55,0,1.00000000e-001,20,1.00000000e-001,-1.00000000e-001,0];
		CM_FIC0112 : CM_MFC (Description := "O2 Mass Flow Controller") := [55,0,1.00000000e-001,20,1.00000000e-001,-1.00000000e-001,0];
		CM_FIC0113 : CM_MFC (Description := "CO2 Mass Flow Controller") := [55,0,1.00000000e-001,20,1.00000000e-001,-1.00000000e-001,0];
		CM_SIC0101 : CM_Pump (Description := "Base Pump Control Module") := [567,0,6.20000000e+001,1.00000000e+000,1.00000000e+000,1.00000000e+002,6.20000000e+001,5.00000000e-001
				,0,0,20,0.00000000e+000,6,[0,8766,0],[0,3700000,0],5.00000000e-001,-5.00000000e-001,1,6.20000000e+001
				,[537467477,60000,60000],[0,0,0]];
		CM_SIC0102 : CM_Pump (Description := "Feed Pump Control Module") := [535,0,6.20000000e+001,0.00000000e+000,1.00000000e+000,1.00000000e+002,6.20000000e+001,5.00000000e-001
				,0,0,20,0.00000000e+000,6,[0,8766,0],[0,3700000,0],6.25000000e+001,6.15000000e+001,1,6.20000000e+001
				,[537955377,60000,60000],[0,0,0]];
		CO2CVMax : REAL (RADIX := Float) := 1.00000000e+002;
		CO2CVMin : REAL (RADIX := Float) := 0.00000000e+000;
		CO2EUMax : REAL (RADIX := Float) := 1.25000000e-001;
		CO2EUMin : REAL (RADIX := Float) := 0.00000000e+000;
		CO2ManualSP : REAL (RADIX := Float) := 5.00000000e-002;
		CO2MaxCalc : REAL (RADIX := Float) := 2.50000000e-001;
		CO2mfcSP : REAL (RADIX := Float) := 0.00000000e+000;
		CO2MinCalc : REAL (RADIX := Float) := 0.00000000e+000;
		CO2PercentOut : REAL (RADIX := Float) := 1.25000000e-001;
		CO2ProgOper : BOOL (RADIX := Decimal) := 0;
		DOpbs : PID_ENHANCED  := [1,1056768,2.50000000e+001,1.00000000e+002,0.00000000e+000,0.00000000e+000,3.00000000e+001
				,0.00000000e+000,1.00000000e+002,0.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e+002,0.00000000e+000,0.00000000e+000
				,1.00000000e+002,-1.00000000e+002,1.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,1.00000000e+000,5.00000000e+000,0.00000000e+000,0.00000000e+000
				,3.40282347e+038,3.40282347e+038,-3.40282347e+038,-3.40282347e+038,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,3.40282347e+038,3.40282347e+038,3.40282347e+038,3.40282347e+038
				,0.00000000e+000,0,0.00000000e+000,1,0,0,1,16777410,1.00000000e+002,1.00000000e+002,3.00000000e+001
				,3.00000019e+001,2.50000000e+001,5.00000000e+000,5.00000191e+000,1.00000000e+000,1.00000000e+000
				,0,0,0,0.00000000e+000,1.00374794e+002,-2.50000000e+001,5.00000191e+000,5.00000191e+000,-2.50000000e+001
				,-2.50000000e+001,1.00000000e+000,8.33333358e-002,0.00000000e+000,1.00000000e+000,1.00000000e+000
				,5.00000000e+000,0.00000000e+000,0.00000000e+000,2.50000000e+001,0.00000000e+000,1.00000000e+002
				,5.00000000e+000,0.00000000e+000,2.35104307e-038,5.00000000e+000,2.50000000e+001,3.00000019e+001
				,9.99581299e+001,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.40129846e-042,5.48368861e-009
				,0.00000000e+000,7.89211295e-042,1.00000000e+000,1.40129846e-042,5.48368861e-009,7.89211295e-042
				,1.00000000e+000];
		DOPID_INITIALIZE : BOOL (RADIX := Decimal) := 0;
		DOtestPV : REAL (RADIX := Float) := 2.50000000e+001;
		DO_ON : BOOL (RADIX := Decimal) := 1;
		DO_PID_AUTOREQ : BOOL (RADIX := Decimal) := 1;
		DO_PID_OPER_AUTOREQ : BOOL (RADIX := Decimal) := 0;
		EM_DOC : EM (Description := "DO Control Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-124,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0,0,9.00000000e+001,6.50000000e+001
				,0.00000000e+000,0,0,9999,0.00000000e+000,0.00000000e+000,0.00000000e+000,0];
		EM_MFC_Air : EM (Description := "Air Inlet Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-124,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,1007,0,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0,0,9999,0.00000000e+000,0.00000000e+000,0.00000000e+000,9999];
		EM_MFC_CO2 : EM (Description := "CO2 Inlet Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-124,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,1007,0,4.15999985e+000,0.00000000e+000
				,0.00000000e+000,0,0,9999,0.00000000e+000,0.00000000e+000,0.00000000e+000,3];
		EM_MFC_O2 : EM (Description := "O2 Inlet Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-124,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,1007,0,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0,0,9999,0.00000000e+000,0.00000000e+000,0.00000000e+000,9999];
		EM_PHC : EM (Description := "pH Control Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-124,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0,0,8.00000000e+000,7.00000000e+000
				,0.00000000e+000,0,0,9999,0.00000000e+000,0.00000000e+000,0.00000000e+000,2];
		EM_Pump_Base : EM (Description := "Base Pump Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-108,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,1007,0,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0,0,9999,0.00000000e+000,0.00000000e+000,0.00000000e+000,5];
		EM_Pump_Feed : EM (Description := "Feed Pump Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-124,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0,0,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0,0,9999,0.00000000e+000,0.00000000e+000,0.00000000e+000,0];
		EM_TIC : EM (Description := "Vessel Temperature Control Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-124,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,1003,0,2.07999992e+001,1.90000000e+001
				,0.00000000e+000,0,0,9999,0.00000000e+000,0.00000000e+000,0.00000000e+000,9999];
		EM_VentHTR : EM (Description := "Vent Heater Equipment Module") := [0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,-116,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0,0,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0,0,2,0.00000000e+000,0.00000000e+000,0.00000000e+000,0];
		FI0111 : P_AInAdv (Description := "Air MFC Flowrate") := [65543,1.00000000e+003,0,0,2,0.00000000e+000,3.27630000e+004,0.00000000e+000,1.00000000e+002
				,0.00000000e+000,1.00000000e+000,0.00000000e+000,1.50000000e+038,1.00000000e+000,1.50000000e+038
				,1.00000000e+000,-1.50000000e+038,1.00000000e+000,-1.50000000e+038,1.00000000e+000,1.50000000e+038
				,1.00000000e+000,1.50000000e+038,1.00000000e+000,-1.50000000e+038,1.00000000e+000,-1.50000000e+038
				,1.00000000e+000,1.50000000e+038,1.00000000e+000,1.50000000e+038,1.00000000e+000,-1.50000000e+038
				,1.00000000e+000,1.03958336e+002,-2.08333325e+000,4.16666657e-001,3.05222344e+000,3.05222344e+000
				,3.05222344e+000,3.05222344e+000,0.00000000e+000,0.00000000e+000,3.05222344e+000,3.05222344e+000
				,0.00000000e+000,1.00000000e+002,32,32,32,0,0,2097412,[963,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[13,'Low-Low Alarm$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9
				,'Low Alarm$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10
				,'High Alarm$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15
				,'High-High Alarm$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[1,'%$00$00$00$00$00$00$00'],[8,'P_AinAdv$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'FI-111$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[21,'Advanced Analog Input$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[967,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13
				,'Input Failure$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],0,0,32,32,0.00000000e+000,0.00000000e+000,0.00000000e+000,3.05222344e+000,1.00000000e-001
				,3.05222344e+000,0.00000000e+000,3.05222344e+000,[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'Low Deviation Alarm$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20
				,'High Deviation Alarm'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19
				,'High Rate of Change$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[-1072803695,2147483647,0],0.00000000e+000,1148846080,1078155169,[8,'P_AInAdv$00$00$00$00$00$00$00$00'
				],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674607,0,0],[0,0,0],[-1609674607,0,0],[16,'PV Deviation Low$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674607,0,0],[0,0,0],[-1609674607,0,0],[20,'PV Hi Rate of Change'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674607,0,0],[0,0,0],[-1609674607,0,0],[17,'PV Deviation High$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674607,0,0],[0,0,0],[-1609674607,0,0],[10,'PV Low-Low$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674607,0,0],[0,0,0],[-1609674607,0,0],[6,'PV Low$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674607,0,0],[0,0,0],[-1609674607,0,0],[12,'PV High-High$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674607,0,0],[0,0,0],[-1609674607,0,0],[7,'PV High$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[63,0.00000000e+000,0.00000000e+000,0.00000000e+000,[1157439,0,0],[-1609674607,0,0],[-1609674607
				,0,0],[13,'Input Failure$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],[6,'RA-BAS$00$00$00$00$00$00'],[6,'area01$00$00'],0,0,1.00000000e+003
				];
		FI0112 : P_AInAdv (Description := "CO2 MFC Flowrate") := [65543,0.00000000e+000,0,0,2,0.00000000e+000,3.27670000e+004,0.00000000e+000,1.00000000e+002
				,0.00000000e+000,1.00000000e+000,0.00000000e+000,1.50000000e+038,1.00000000e+000,1.50000000e+038
				,1.00000000e+000,-1.50000000e+038,1.00000000e+000,-1.50000000e+038,1.00000000e+000,1.50000000e+038
				,1.00000000e+000,1.50000000e+038,1.00000000e+000,-1.50000000e+038,1.00000000e+000,-1.50000000e+038
				,1.00000000e+000,1.50000000e+038,1.00000000e+000,1.50000000e+038,1.00000000e+000,-1.50000000e+038
				,1.00000000e+000,1.03958336e+002,-2.08333325e+000,4.16666657e-001,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,1.00000000e+002,34,34,32,0,0,2097156,[963,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[13,'Low-Low Alarm$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9
				,'Low Alarm$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10
				,'High Alarm$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15
				,'High-High Alarm$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[1,'%$00$00$00$00$00$00$00'],[8,'P_AinAdv$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'FI-112$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[21,'Advanced Analog Input$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[967,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13
				,'Input Failure$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],0,0,32,34,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e-001
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'Low Deviation Alarm$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20
				,'High Deviation Alarm'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19
				,'High Rate of Change$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[-1072803795,2147483647,0],0.00000000e+000,0,0,[8,'P_AInAdv$00$00$00$00$00$00$00$00'],[43,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,[-1609674707,0,0],[0,0,0],[-1609674707,0,0],[16,'PV Deviation Low$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674707,0,0],[0,0,0],[-1609674707,0,0],[20,'PV Hi Rate of Change'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674707,0,0],[0,0,0],[-1609674707,0,0],[17,'PV Deviation High$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674707,0,0],[0,0,0],[-1609674707,0,0],[10,'PV Low-Low$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674707,0,0],[0,0,0],[-1609674707,0,0],[6,'PV Low$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674707,0,0],[0,0,0],[-1609674707,0,0],[12,'PV High-High$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674707,0,0],[0,0,0],[-1609674707,0,0],[7,'PV High$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674707,0,0],[0,0,0],[-1609674707,0,0],[13,'Input Failure$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[6,'RA-BAS$00$00$00$00$00$00'],[6,'area01$00$00'],0,0,0.00000000e+000];
		FI0113 : P_AInAdv (Description := "O2 MFC Flowrate") := [65543,0.00000000e+000,0,0,2,0.00000000e+000,3.27670000e+004,0.00000000e+000,1.00000000e+002
				,0.00000000e+000,1.00000000e+000,0.00000000e+000,1.50000000e+038,1.00000000e+000,1.50000000e+038
				,1.00000000e+000,-1.50000000e+038,1.00000000e+000,-1.50000000e+038,1.00000000e+000,1.50000000e+038
				,1.00000000e+000,1.50000000e+038,1.00000000e+000,-1.50000000e+038,1.00000000e+000,-1.50000000e+038
				,1.00000000e+000,1.50000000e+038,1.00000000e+000,1.50000000e+038,1.00000000e+000,-1.50000000e+038
				,1.00000000e+000,1.03958336e+002,-2.08333325e+000,4.16666657e-001,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,1.00000000e+002,34,34,32,0,0,2097156,[963,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[13,'Low-Low Alarm$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9
				,'Low Alarm$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10
				,'High Alarm$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15
				,'High-High Alarm$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[1,'%$00$00$00$00$00$00$00'],[8,'P_AinAdv$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'FI-113$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[21,'Advanced Analog Input$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[967,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13
				,'Input Failure$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],0,0,32,34,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e-001
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'Low Deviation Alarm$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20
				,'High Deviation Alarm'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19
				,'High Rate of Change$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[-1072803895,2147483647,0],0.00000000e+000,0,0,[8,'P_AInAdv$00$00$00$00$00$00$00$00'],[43,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,[-1609674807,0,0],[0,0,0],[-1609674807,0,0],[16,'PV Deviation Low$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674807,0,0],[0,0,0],[-1609674807,0,0],[20,'PV Hi Rate of Change'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674807,0,0],[0,0,0],[-1609674807,0,0],[17,'PV Deviation High$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674807,0,0],[0,0,0],[-1609674807,0,0],[10,'PV Low-Low$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674807,0,0],[0,0,0],[-1609674807,0,0],[6,'PV Low$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674807,0,0],[0,0,0],[-1609674807,0,0],[12,'PV High-High$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674807,0,0],[0,0,0],[-1609674807,0,0],[7,'PV High$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1609674807,0,0],[0,0,0],[-1609674807,0,0],[13,'Input Failure$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[6,'RA-BAS$00$00$00$00$00$00'],[6,'area01$00$00'],0,0,0.00000000e+000];
		FIC0111 : P_ValveC (Description := "Air Mass Flow Controller") := [10571843,0.00000000e+000,0.00000000e+000,2,0.00000000e+000,2.00000000e+003,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+003,0.00000000e+000,3.27670000e+004
				,0.00000000e+000,3.27670000e+004,0.00000000e+000,2.00000000e+000,2.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+003
				,2,20,1,0,0,0,0,0,268445696,[8429027,-1976917504,34,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00'
				]],[963,1000,0,5,0,0,0,[0,5000,0],[469008,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[92275603,500,0,5,0,0,0,[242552,5000,0],[42475,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[7,'FIC0111$00$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'FIC0111$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[7,'Air MFC$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[4,'SCCM$00$00$00$00'],0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e-001,0.00000000e+000
				,[-1069782363,2147483647,0],1,0,0,20,[899,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Actuator Fault$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],0,[-1069782363,2147483647,0],1048836,0.00000000e+000,0,0,0.00000000e+000,0.00000000e+000,[8,'P_ValveC$00$00$00$00$00$00$00$00'
				],0.00000000e+000,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],0.00000000e+000,0,0,[0,0,0]];
		FIC0111_Intlk : P_Intlk (Description := "Air Mass Flow Controller Interlocks") := [14339,0,0,0,0,4,4,[[6,'E-Stop$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'HMI Abort$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Startup Active$00$00$00$00$00$00'],[17,'Safety Tapeswitch$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],4,4,4,4,4,4,1,4,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'
				],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[6,'RA-BAS$00$00$00$00$00$00'
				],0,[6,'area01$00$00'],[14,'Startup Active$00$00$00$00$00$00']];
		FIC0112 : P_ValveC (Description := "O2 Mass Flow Controller") := [10571843,0.00000000e+000,0.00000000e+000,2,0.00000000e+000,2.00000000e+003,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+003,0.00000000e+000,3.27670000e+004
				,0.00000000e+000,3.27670000e+004,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+003
				,2,20,1,0,0,0,0,0,268445696,[40419,-1976917504,34,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963
				,1000,0,5,0,0,0,[0,5000,0],[485895,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[92275603,500,0,5,0,0,0,[1150769,5000,0],[1150869,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[7,'FIC0112$00$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'FIC0112$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'O2 MFC$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[4,'SCCM$00$00$00$00'],0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e-001,0.00000000e+000
				,[-1069782163,2147483647,0],1,0,0,20,[899,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Actuator Fault$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],0,[-1069782163,2147483647,0],1048836,0.00000000e+000,0,0,0.00000000e+000,0.00000000e+000,[8,'P_ValveC$00$00$00$00$00$00$00$00'
				],0.00000000e+000,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],0.00000000e+000,0,0,[0,0,0]];
		FIC0112_Intlk : P_Intlk (Description := "O2 Mass Flow Controller Interlocks") := [14339,0,0,0,0,4,4,[[6,'E-Stop$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'HMI Abort$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Startup Active$00$00$00$00$00$00'],[17,'Safety Tapeswitch$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],4,4,4,4,4,4,1,4,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'
				],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[6,'RA-BAS$00$00$00$00$00$00'
				],0,[6,'area01$00$00'],[14,'Startup Active$00$00$00$00$00$00']];
		FIC0113 : P_ValveC (Description := "CO2 Mass Flow Controller") := [10571843,0.00000000e+000,0.00000000e+000,2,0.00000000e+000,2.00000000e+003,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+003,0.00000000e+000,3.27670000e+004
				,0.00000000e+000,3.27670000e+004,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+003
				,2,20,1,0,0,0,0,0,268445696,[8429027,-1976917504,34,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00'
				]],[963,1000,0,5,0,0,0,[0,5000,0],[485895,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[92275603,500,0,5,0,0,0,[1150769,5000,0],[1150869,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[7,'FIC0113$00$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'FIC0113$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[7,'CO2 MFC$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[4,'SCCM$00$00$00$00'],0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e-001,0.00000000e+000
				,[-1069782063,2147483647,0],1,0,0,20,[899,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Actuator Fault$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],0,[-1069782063,2147483647,0],1048836,0.00000000e+000,0,0,0.00000000e+000,0.00000000e+000,[8,'P_ValveC$00$00$00$00$00$00$00$00'
				],0.00000000e+000,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],0.00000000e+000,0,0,[0,0,0]];
		FIC0113_Intlk : P_Intlk (Description := "CO2 Mass Flow Controller Interlocks") := [14339,0,0,0,0,4,4,[[6,'E-Stop$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'HMI Abort$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Startup Active$00$00$00$00$00$00'],[17,'Safety Tapeswitch$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],4,4,4,4,4,4,1,4,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'
				],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[6,'RA-BAS$00$00$00$00$00$00'
				],0,[6,'area01$00$00'],[14,'Startup Active$00$00$00$00$00$00']];
		FIC110 : P_ValveC (Description := "PBS CCA") := [2101347,0.00000000e+000,0.00000000e+000,2,0.00000000e+000,2.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+000,0.00000000e+000,1.00000000e+002
				,0.00000000e+000,1.00000000e+002,1.00000000e+001,1.00000000e+000,1.00000000e+000,5.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,7.50000000e-001,0,0.00000000e+000
				,3.75000000e+001,0.00000000e+000,7.50000000e-001,7.50000000e-001,0.00000000e+000,2.00000000e+000
				,2,2,1,0,0,0,0,0,-2147483520,[7651,-2144705024,33,64,1011,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963
				,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[963
				,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[8
				,'P_ValveC$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'CCA MFC$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'FIC110$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[4,'SLPM$00$00$00$00'],7.50000000e-001,7.50000000e-001,7.50000000e-001,1.00000000e-001,0.00000000e+000
				,[-1069782063,2147483647,0],0,0,0,2,[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Actuator Fault$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],1061158912,[-1069782062,2147483647,0],1114116,0.00000000e+000,10000,0,0.00000000e+000,0.00000000e+000
				,[8,'P_ValveC$00$00$00$00$00$00$00$00'],0.00000000e+000,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],2.00000000e+000,0,0,[3117761,0,0]];
		FIC120 : P_ValveC (Description := "O2 pbs") := [2101347,0.00000000e+000,0.00000000e+000,2,0.00000000e+000,1.00000000e+002,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+000,0.00000000e+000,1.00000000e+002
				,0.00000000e+000,1.00000000e+002,1.00000000e+001,1.00000000e+000,1.00000000e+000,5.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e+000,0,0.00000000e+000
				,5.00000000e+001,9.99999881e-001,1.00000000e+000,1.00000000e+000,0.00000000e+000,2.00000000e+000
				,2,2,2,0,0,0,0,0,-2147483456,[7651,-2144705024,33,64,1011,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963
				,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[963
				,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[8
				,'P_ValveC$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'O2 MFC$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'FIC120$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[4,'SLPM$00$00$00$00'],1.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e-001,0.00000000e+000
				,[-1069782062,2147483647,0],0,0,0,2,[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Actuator Fault$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],1065353216,[-1069782062,2147483647,0],1114114,0.00000000e+000,10000,0,0.00000000e+000,0.00000000e+000
				,[8,'P_ValveC$00$00$00$00$00$00$00$00'],0.00000000e+000,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],0.00000000e+000,0,0,[3105761,0,0]];
		FIC130 : P_ValveC (Description := "CO2 pbs") := [2101347,0.00000000e+000,0.00000000e+000,2,0.00000000e+000,1.00000000e+002,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,5.00000000e-001,0.00000000e+000,1.00000000e+002
				,0.00000000e+000,1.00000000e+002,1.00000000e+001,1.00000000e+000,1.00000000e+000,5.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.50000000e-001,0,0.00000000e+000
				,5.00000000e+001,5.00000000e-001,2.50000000e-001,2.50000000e-001,0.00000000e+000,5.00000000e-001
				,2,2,2,0,0,0,0,0,192,[7651,-2144705024,33,64,1011,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963,1000,0,5
				,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[963
				,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[8
				,'P_ValveC$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'CO2 MFC$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'FIC130$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[4,'SLPM$00$00$00$00'],2.50000000e-001,2.50000000e-001,2.50000000e-001,9.89999995e-002,0.00000000e+000
				,[-1069782563,2147483647,0],0,0,0,2,[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Actuator Fault$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],1048576000,[-1069782563,2147483647,0],9502723,0.00000000e+000,10000,0,0.00000000e+000,0.00000000e+000
				,[8,'P_ValveC$00$00$00$00$00$00$00$00'],0.00000000e+000,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],3.00000000e-001,0,0,[934167,0,0]];
		FIC140 : P_ValveC (Description := "pbs N2 mfc") := [2101347,0.00000000e+000,0.00000000e+000,3,0.00000000e+000,2.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+000,0.00000000e+000,1.00000000e+002
				,0.00000000e+000,1.00000000e+002,1.00000000e+001,1.00000000e+000,1.00000000e+000,5.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,6.89999998e-001
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.00000000e+000
				,2,2,1,0,0,0,0,0,128,[7651,-2144705024,33,64,1011,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963,1000,0,5
				,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[963
				,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[8
				,'P_ValveC$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'N2 MFC$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'FIC140$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[4,'SLPM$00$00$00$00'],0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e-001,0.00000000e+000
				,[-1069782362,2147483647,0],0,0,0,2,[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Actuator Fault$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],0,[-1069782362,2147483647,0],1114116,0.00000000e+000,10000,0,0.00000000e+000,0.00000000e+000
				,[8,'P_ValveC$00$00$00$00$00$00$00$00'],0.00000000e+000,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],5.50000012e-001,0,0,[2971762,0,0]];
		FIQ0101 : CM_Totalizer2 (Description := "Base Pump Totalizer") := [19,0.00000000e+000,0.00000000e+000,1,7.66341352e+000,-7.66341352e+000,0.00000000e+000,[0,'$00$00$00$00$00$00$00$00'
				],[7,'FIQ0xxx$00$00$00$00$00'],[3,0.00000000e+000,7.66341352e+000,-7.66341352e+000],[33,0.00000000e+000
				,1,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0,0.00000000e+000,1,0,243,7.66341352e+000,0.00000000e+000,1.00000000e-001,0,1.40129846e-043
				,5.48373300e-009,0.00000000e+000,7.89211295e-042,1.00000000e-001,0.00000000e+000,1.43773222e-042
				,8.33333377e-003,0.00000000e+000,2.47896314e+000,-4.80548013e+025],[3,3,5.60519386e-045],[1,3,5.60519386e-045
				],[1,1,0.00000000e+000]];
		FIQ0102 : CM_Totalizer2 (Description := "Feed Pump Totalizer") := [19,0.00000000e+000,0.00000000e+000,1,3.87500048e+000,-3.87500048e+000,0.00000000e+000,[0,'$00$00$00$00$00$00$00$00'
				],[7,'FIQ0xxx$00$00$00$00$00'],[3,0.00000000e+000,3.87500048e+000,-3.87500048e+000],[33,0.00000000e+000
				,1,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0,0.00000000e+000,1,0,243,3.87500048e+000,0.00000000e+000,1.00000000e-001,0,1.40129846e-043
				,5.48368861e-009,0.00000000e+000,7.89211295e-042,1.00000000e-001,0.00000000e+000,1.43773222e-042
				,8.33333377e-003,0.00000000e+000,2.23437500e+000,6.40000000e+001],[3,3,5.60519386e-045],[1,3,5.60519386e-045
				],[1,1,0.00000000e+000]];
		FIQ0111 : CM_Totalizer2 (Description := "Air MFC Totalizer") := [19,0.00000000e+000,0.00000000e+000,1,2.59963623e+003,-2.59963623e+003,3.86827905e+003,[0,'$00$00$00$00$00$00$00$00'
				],[7,'FIQ0xxx$00$00$00$00$00'],[3,0.00000000e+000,2.59963623e+003,-2.59963623e+003],[33,0.00000000e+000
				,1,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0,0.00000000e+000,1,0,243,2.59963623e+003,3.86827905e+003,1.00000000e-001,0,1.40129846e-043
				,5.48355539e-009,0.00000000e+000,7.89211295e-042,1.00000000e-001,0.00000000e+000,1.43773222e-042
				,8.33333377e-003,0.00000000e+000,5.13467646e+000,-3.08694221e+009],[3,3,5.60519386e-045],[1,3,5.60519386e-045
				],[1,1,0.00000000e+000]];
		FIQ0112 : CM_Totalizer2 (Description := "O2 MFC Totalizer") := [19,0.00000000e+000,0.00000000e+000,1,1.02081250e+003,-1.02081250e+003,0.00000000e+000,[0,'$00$00$00$00$00$00$00$00'
				],[7,'FIQ0xxx$00$00$00$00$00'],[3,0.00000000e+000,1.02081250e+003,-1.02081250e+003],[33,0.00000000e+000
				,1,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0,0.00000000e+000,1,0,243,1.02081250e+003,0.00000000e+000,1.00000000e-001,0,1.40129846e-043
				,5.48364421e-009,0.00000000e+000,7.89211295e-042,1.00000000e-001,0.00000000e+000,1.43773222e-042
				,8.33333377e-003,0.00000000e+000,4.49688721e+000,7.50993953e-036],[3,3,5.60519386e-045],[1,3,5.60519386e-045
				],[1,1,0.00000000e+000]];
		FIQ0113 : CM_Totalizer2 (Description := "CO2 MFC Totalizer") := [19,0.00000000e+000,0.00000000e+000,1,3.39075757e+003,-3.39075757e+003,0.00000000e+000,[0,'$00$00$00$00$00$00$00$00'
				],[7,'FIQ0xxx$00$00$00$00$00'],[3,0.00000000e+000,3.39075757e+003,-3.39075757e+003],[33,0.00000000e+000
				,1,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0,0.00000000e+000,1,0,243,3.39075757e+003,0.00000000e+000,1.00000000e-001,0,1.40129846e-043
				,5.48377743e-009,0.00000000e+000,7.89211295e-042,1.00000000e-001,0.00000000e+000,1.43773222e-042
				,8.33333377e-003,0.00000000e+000,5.32782125e+000,-7.60402485e+013],[3,3,5.60519386e-045],[1,3,5.60519386e-045
				],[1,1,0.00000000e+000]];
		FV0111 : P_ValveSO (Description := "Air MFC Shutoff Valve") := [1543766195,0,2.00000000e+000,5.00000000e+000,1.00000000e+001,0.00000000e+000,0,147488,2,2,0
				,1,1,0,0,0,0,[7651,-1440079360,32,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],1,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[963,500,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[451,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19,'Valve Transit Stall$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[451,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[16,'Valve Full Stall$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[6,'FV0111$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'FV0111$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17,'Air Shutoff Valve$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,2000,0],[-1606653375,2000,2000],0,132125,[2876641,10000,0],[0,5000,0],1,0,1,0,[9,'P_ValveSO$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],2,0,[6,'Area01$00$00'],0,[2163329,0,0]];
		FV0111_Intlk : P_Intlk  := [14339,0,0,0,0,4,4,[[20,'Enter Description #0'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],4,4,4,4,4,4,0,4,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'
				],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]];
		FV0112 : P_ValveSO (Description := "O2 MFC Shutoff Valve") := [1543766195,0,2.00000000e+000,5.00000000e+000,1.00000000e+001,0.00000000e+000,0,147488,2,2,0
				,1,1,0,0,0,0,[7651,-1440079360,32,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[963,500,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[451,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19,'Valve Transit Stall$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[451,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[16,'Valve Full Stall$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[6,'FV0112$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'FV0112$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[16,'O2 Shutoff Valve$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,2000,0],[-1606653175,2000,2000],0,132125,[2876641,10000,0],[0,5000,0],1,0,1,0,[9,'P_ValveSO$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],2,0,[6,'Area01$00$00'],0,[3994331,0,0]];
		FV0112_Intlk : P_Intlk  := [14339,0,0,0,0,4,4,[[20,'Enter Description #0'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],4,4,4,4,4,4,0,4,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'
				],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]];
		FV0113 : P_ValveSO (Description := "CO2 MFC Shutoff Valve") := [1543766195,0,2.00000000e+000,5.00000000e+000,1.00000000e+001,0.00000000e+000,0,147488,2,2,0
				,1,1,0,0,0,0,[7651,-1440079360,32,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[963,500,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[451,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19,'Valve Transit Stall$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[451,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[16,'Valve Full Stall$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[6,'FV0113$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'FV0113$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17,'CO2 Shutoff Valve$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,2000,0],[-1606653375,2000,2000],0,132125,[2876641,10000,0],[0,5000,0],1,0,1,0,[9,'P_ValveSO$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],2,0,[6,'Area01$00$00'],0,[930530,0,0]];
		FV0113_Intlk : P_Intlk  := [14339,0,0,0,0,4,4,[[20,'Enter Description #0'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],4,4,4,4,4,4,0,4,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'
				],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]];
		GasControl_ON : BOOL (RADIX := Decimal) := 1;
		GasOffOns : BOOL (RADIX := Decimal) := 0;
		GasOnOns : BOOL (RADIX := Decimal) := 1;
		GlobalCmdSrc : P_CmdSrc  := [40419,740952064,64,512,992,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']];
		GlobalReset : P_Reset (Description := "Global Reset") := [4619,1.00000000e+000,[3959562,1000,1000],[7,'P_Reset$00$00$00$00$00$00$00$00$00'],[7,'P_Reset$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[5,'Reset$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[21,'Multiple-Device Reset$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],[6,'RA-BAS$00$00$00$00$00$00']];
		Global_HICritTemp : BOOL (Description := "Global Critical HighTemperature ",
		            RADIX := Decimal) := 0;
		Harvest_Mode : BOOL (Description := "Rocker Harvest Mode Command from HMI$N1 = Active",
		            RADIX := Decimal) := 0;
		HMI_Abort_PB : BOOL (RADIX := Decimal) := 0;
		HMI_TempCntl : BOOL (Description := "1=Temperature Control Active from the HMI",
		            RADIX := Decimal) := 1;
		HMI_VPN_Accept_Val_PB : BOOL (Description := "HMI VPN Setup Popup Duration Value Accept Button",
		            RADIX := Decimal) := 0;
		HMI_VPN_Activate : BOOL (Description := "HMI VPN Initiate Activation",
		            RADIX := Decimal) := 0;
		HMI_VPN_Disable_PB : BOOL (RADIX := Decimal) := 0;
		HMI_VPN_Enable_TON : TIMER (Description := "Timer That Determines How Long HMI VPN Is Activated") := [0,604800000,0];
		HMI_VPN_Enable_TON_User_Input : DINT (RADIX := Decimal) := 0;
		Load_Mode : BOOL (Description := "Rocker Load Mode Command from HMI$N1 = Active",
		            RADIX := Decimal) := 0;
		LocalDateTimeRef : DateTime  := [1998,9,5,23,39,33,444307];
		LocalDateTimeString : STRING  := [22,'5 SEP 1998 11:39:33 PMMM1:41:56 PM$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				];
		LocalDateTimeTtoS : T_TtoS  := [107,[[3,'JAN$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'FEB$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[3,'MAR$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'APR$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[3,'MAY$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'JUN$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[3,'JUL$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'AUG$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[3,'SEP$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'OCT$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[3,'NOV$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[3,'DEC$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[[6,'Sunday$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'Monday$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[7,'Tuesday$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'Wednesday$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Thursday$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'Friday$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Saturday$00$00$00$00$00$00$00$00$00$00$00$00']],[3,6,1998,6,[7,6,1998,729942,1998,188,6,1998,9,5],729945
				],[2,'AM$00$00$00$00$00$00'],[2,'PM$00$00$00$00$00$00'],[15,'<Invalid Date!>$00$00$00$00$00'],[15
				,'<Invalid Time!>$00$00$00$00$00'],[11,'5 SEP 1998 $00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[11,'11:39:32 PM$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,' $00$00$00$00$00$00$00'],[1,':$00$00$00$00$00$00$00'],[2,', $00$00$00$00$00$00'],[1,'-$00$00$00$00$00$00$00'
				],[1,'2$00$00$00$00$00$00$00'],[4,'1998$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[1
				,'.$00$00$00$00$00$00$00'],11];
		ManualDO_CV : REAL (RADIX := Float) := 5.00000000e+001;
		ManualpH_CV : REAL (RADIX := Float) := 0.00000000e+000;
		N2CVMax : REAL (RADIX := Float) := -1.00000000e+000;
		N2CVMin : REAL (RADIX := Float) := -1.00000000e+002;
		N2EUMax : REAL (RADIX := Float) := 0.00000000e+000;
		N2EUMin : REAL (RADIX := Float) := 5.00000000e-001;
		N2ManualSP : REAL (RADIX := Float) := 1.00000000e+000;
		N2MaxCalc : REAL (RADIX := Float) := 1.00000000e+000;
		N2mfcSP : REAL (RADIX := Float) := 0.00000000e+000;
		N2MinCalc : REAL (RADIX := Float) := 0.00000000e+000;
		N2PercentOut : REAL (RADIX := Float) := 0.00000000e+000;
		N2ProgOper : BOOL (RADIX := Decimal) := 0;
		N2Scaler : SCALE  := [3,1.00000000e+002,-1.00000000e+000,-1.00000000e+002,0.00000000e+000,5.00000000e-001,3,0.00000000e+000
				,0,0.00000000e+000,9.90000000e+001,1.01010100e-002,0.00000000e+000];
		O2CVMax : REAL (RADIX := Float) := 1.00000000e+002;
		O2CVMin : REAL (RADIX := Float) := 1.00000000e+000;
		O2EUMax : REAL (RADIX := Float) := 5.00000000e-001;
		O2EUMin : REAL (RADIX := Float) := 0.00000000e+000;
		O2ManualSP : REAL (RADIX := Float) := 7.50000000e-001;
		O2MaxCalc : REAL (RADIX := Float) := 1.00000000e+000;
		O2mfcSP : REAL (RADIX := Float) := 2.00000000e+000;
		O2MinCalc : REAL (RADIX := Float) := 0.00000000e+000;
		O2PercentOut : REAL (RADIX := Float) := 5.00000000e-001;
		O2ProgOper : BOOL (RADIX := Decimal) := 0;
		O2Scaler : SCALE  := [3,1.00000000e+002,1.00000000e+002,1.00000000e+000,5.00000000e-001,0.00000000e+000,1,5.00000000e-001
				,0,0.00000000e+000,9.90000000e+001,1.01010100e-002,5.00000000e-001];
		O2Scaler1 : SCALE  := [1,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000
				,0,5.60519386e-045,0.00000000e+000,0.00000000e+000,0.00000000e+000];
		O2Scaler2 : SCALE  := [1,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000
				,0,5.60519386e-045,0.00000000e+000,0.00000000e+000,0.00000000e+000];
		ONS : DINT (RADIX := Decimal) := 256;
		PHpbs : PID_ENHANCED  := [1,1056768,0.00000000e+000,1.40000000e+001,0.00000000e+000,7.00000000e+000,7.00000000e+000
				,0.00000000e+000,1.40000000e+001,0.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e+002,0.00000000e+000,0.00000000e+000
				,1.00000000e+002,0.00000000e+000,1.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,1.00000000e+000,5.00000000e+000,0.00000000e+000,0.00000000e+000
				,3.40282347e+038,3.40282347e+038,-3.40282347e+038,-3.40282347e+038,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,3.40282347e+038,3.40282347e+038,3.40282347e+038,3.40282347e+038
				,0.00000000e+000,0,0.00000000e+000,1,0,0,1,16777410,1.00000000e+002,1.00000000e+002,7.00000000e+000
				,5.00000000e+001,0.00000000e+000,7.00000000e+000,5.00000000e+001,1.00000000e+000,1.00000000e+000
				,0,0,0,0.00000000e+000,1.04166664e+002,0.00000000e+000,5.00000000e+001,5.00000000e+001,0.00000000e+000
				,0.00000000e+000,1.00000000e+000,8.33333358e-002,0.00000000e+000,1.00000000e+000,1.00000000e+000
				,5.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e+002
				,7.00000000e+000,0.00000000e+000,2.35104307e-038,7.00000000e+000,0.00000000e+000,5.00000000e+001
				,1.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.40129846e-042,5.48368861e-009
				,0.00000000e+000,7.89211295e-042,1.00000000e+000,1.40129846e-042,5.48368861e-009,7.89211295e-042
				,1.00000000e+000];
		pHtestPV : REAL (RADIX := Float) := 0.00000000e+000;
		pH_Initialize : BOOL (RADIX := Decimal) := 0;
		PH_On : BOOL (RADIX := Decimal) := 1;
		pH_PID_AUTOREQ : BOOL (RADIX := Decimal) := 1;
		PlaceHolderBOOL : BOOL (Description := "Replace Me!",
		            RADIX := Decimal) := 0;
		PlaceHolderDINT : DINT (Description := "Replace Me!",
		            RADIX := Decimal) := 0;
		PlaceHolderFeedback : DINT[3] (RADIX := Decimal) := [0,0,0];
		PlaceHolderFeedback1 : REAL (RADIX := Float) := 0.00000000e+000;
		PlaceHolderFeedback2 : REAL (RADIX := Float) := 0.00000000e+000;
		PlaceHolderFeedback3 : REAL (RADIX := Float) := 0.00000000e+000;
		PlaceHolderFeedback4 : REAL (RADIX := Float) := 0.00000000e+000;
		PlaceHolderIOFault : DINT[3] (RADIX := Decimal) := [0,0,0];
		PlaceHolderOutput1 : REAL (RADIX := Float) := 3.75000000e+001;
		PlaceHolderOutput2 : REAL (RADIX := Float) := 5.00000000e+001;
		PlaceHolderOutput3 : REAL (RADIX := Float) := 5.00000000e+001;
		PlaceHolderOutput4 : REAL (RADIX := Float) := 0.00000000e+000;
		PLCStatus : ProcData  := [[1998,9,5,23,39,33,444307],12384,0,0,0,33,0,0,0,[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]];
		PV_DataStore_Plus_Trigger : BOOL (Description := "Used toTrigger the Data Store Plus Object",
		            RADIX := Decimal) := 1;
		ResetTimer : TIMER (Description := "Reset Timer for Rocker Alarm") := [1326569,3000,0];
		SIC0101 : P_VSD (Description := "Base Pump Control Module") := [4291647,0.00000000e+000,0,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,-2147483598,2
				,0,0,0.00000000e+000,6.20000000e+001,0.00000000e+000,5.00000000e+003,0.00000000e+000,6.20000000e+001
				,0.00000000e+000,5.00000000e+003,0.00000000e+000,6.20000000e+001,0.00000000e+000,4.09500000e+003
				,0.00000000e+000,4.09500000e+002,0.00000000e+000,1.00000000e+002,0.00000000e+000,4.09500000e+003
				,0.00000000e+000,1.00000000e+002,0.00000000e+000,1.00000000e+001,1.50000000e+001,1.50000000e+001
				,2.00000000e+000,0.00000000e+000,0,0,0,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,142880772,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,6.20000000e+001,0.00000000e+000,6.20000000e+001,0,2,2,0,0,1
				,0,0,0,0,0,[40419,-1976917504,34,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[963
				,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[451
				,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Failed to Stop$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[451
				,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Failed to Start$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[7
				,'SIC0101$00$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'SIC0101$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[2616729,2000,0],[-1606653075,2000,2000],0,[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[11,'Drive Fault$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[6,'mL/min$00$00'],0.00000000e+000,[3959661,2000,2000],[6,'mL/min$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],0.00000000e+000,[7,'Reverse$00$00$00$00$00$00$00$00$00'],[7,'Forward$00$00$00$00$00$00$00$00$00'
				],[-1606653075,15000,15000],[2616729,15000,0],1,0,1,0,0.00000000e+000,1.00000000e-001,[-1069782163,2147483647
				,0],0.00000000e+000,[5,'P_VSD$00$00$00$00$00$00$00$00$00$00$00'],[1361908,0,0],[0,1,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],268435864,2,0,[2615229,15000,0],[2876741,15000,0],[6,'Area01$00$00'],0,[2613229
				,0,0],0.00000000e+000,0.00000000e+000,56];
		SIC0101Cal_Seq : P_Seq (Description := "Base Pump Calibration Sequencer") := [2295,1,0,15,15,0,-1,-1,0,8,30,0,8,30,0,0,0,0,100,100,0,0,100,100,0,100,1.00000000e+002,9,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0
				,0,-1,552603648,0,1,0,0,0,1,0,0,1,100,[0,30000,0],0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],1,9,9,3,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,[7651,204113920
				,66,512,992,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[12,'Acquire pump$00$00$00$00$00$00$00$00'
				],[10,'Start pump$00$00$00$00$00$00$00$00$00$00'],[12,'Run pump fwd$00$00$00$00$00$00$00$00'
				],[9,'Stop pump$00$00$00$00$00$00$00$00$00$00$00'],[16,'Run at max speed$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[[16,'Pump is acquired$00$00$00$00'],[20,'Pump is at max speed'],[12,'Pump stopped$00$00$00$00$00$00$00$00'
				],[20,'Collection type mass'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,[0,0,0],1.00000000e+000
				,-1,0,15,1,0,[0,0,1,2,0,0,0,0,0,0,0],[0,0,1,2,4,0,0,0,0,0,0],0,0,0,1,8,511,255,8,0,0,0,482,0,0,[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],1,[5,'P_Seq$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'SIC0101Cal-Seq$00$00$00$00$00$00'],[11,'SIC0101 Cal$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[835,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[18
				,'Sequence Timed Out$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[835,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14
				,'Step Timed Out$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[835,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17
				,'Interlock Tripped$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],0,[0,0,0],[910386,86400000,0],[0,86400000,0],1,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[6,'RA-Seq$00$00$00$00$00$00$00$00$00$00'
				],[19,'Calibration sett'],0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,[14,'SIC0101Cal_Seq$00$00$00$00$00$00'
				],0,660736,[0,'$00$00$00$00$00$00$00$00'],[6,'area01$00$00'],0,0,0,100,0,0,0,0,[0,0,0,0,0,0],[[[4,'Idle$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0],[[8,'Starting$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[7,'Running$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],7,1,7],[[8,'Complete$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[7,'Stopped$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0],[[4,'Held$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[8,'Stopping$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0],[[7,'Aborted$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[7,'Holding$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0],[[10,'Restarting$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[9,'Resetting$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0]],0,10,11,7,0,0,0,1,0,-1,0,0,0,0];
		SIC0101Cal_Seq_Prompt : P_Prompt (Description := "Base Pump Operator Prompts") := [8195,0,1.00000000e+002,0,9,4,9,0,0,7,0,[[42,'Select calibration type and enter settings$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'cal settings$00$00$00$00$00$00$00$00'],[[7,'Density$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Duration$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'Pump speed$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[4,'Mass$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'Volume$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[6,'g / mL$00$00'],[3,'min$00$00$00$00$00'],[1,'%$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,0.00000000e+000
				],[2,1,0,0],0,0,0,0,3,2,7,0,0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,3.00000000e+001],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'30.0000000$00$00$00$00$00$00'
				],[6.00000000e+001,0.00000000e+000,0.00000000e+000,0.00000000e+000],6.00000000e+001,[6.00000000e+001
				,0.00000000e+000,0.00000000e+000,0.00000000e+000],[1.00000000e+000,5.00000000e-001,1.00000000e+002
				,3.00000000e+001],[6,'<None>$00$00'],-2147483648,[8,'P_Prompt$00$00$00$00$00$00$00$00'],[5,'RA-UI$00$00$00$00$00$00$00'
				],-2147483648,0,0,[6,'area01$00$00']];
		SIC0101Cal_Seq_Prompts : P_PromptCfg[10] (Description := "Base Pump Prompt Instance Configuration Data") := [[[42,'Select calibration type and enter settings$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'cal settings$00$00$00$00$00$00$00$00'],[[7,'Density$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Duration$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'Pump speed$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[4,'Mass$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'Volume$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[6,'g / mL$00$00'],[3,'min$00$00$00$00$00'],[1,'%$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,0.00000000e+000
				],[2,1,0,0],0,0,0,0,3,2,7,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[7,'Density$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Duration$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[7,'mg / mL$00'],[3,'min$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,9.99990000e+004
				],[2,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[23,'Enter measured quantity$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[13,'op enter amnt$00$00$00$00$00$00$00'],[[6,'Volume$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Quantity$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[2,'mL$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[7,'mL or g$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,9.99990000e+004
				],[0,0,0,1],0,0,0,0,0,0,8,0,0,0,0,0],[[32,'Acknowledge to begin calibration$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[10,'op confirm$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[4,'Mass$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Mass$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[1,'g$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[1,'g$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,0.00000000e+000
				],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[27,'Confirm calculated flowrate$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'op confirm flowrate$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[8,'Flowrate$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[8,'mL / min'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,9.99990000e+004
				],[0,0,0,0],1,1,0,1,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0]];
		SIC0101Cal_Seq_Prompt_Response : P_PromptResp (Description := "Base Pump Operator Entered Prompt Response Data (String)") := [[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]]];
		SIC0101Cal_Seq_Steps : P_SeqStep[10] (Description := "Base Pump Sequencer Steps") := [[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,[0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[[19,'Calibration setting$00'],0,0,0,0,15,0,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],0,0,0,0,0,8,0,0,0,2,1,1,0,0,0,0],[[16,'Confirm to Start$00$00$00$00'],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],0,0,0,0,0,8,0,0,3,2,2,1,0,0,0,0],[[20,'Acquire pump control'],0,0,1,1,15,1,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0
				,0,0,0,2,3,1,0,0,0,0],[[17,'Run pump at speed$00$00$00'],0,30000,2,2,14,6,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],0,0,0,0,0,0,0,0,0,2,4,1,0,0,0,0],[[9,'Stop pump$00$00$00$00$00$00$00$00$00$00$00'],0,0,4,0,14,8,0,[0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000],0,0,0,0,0,0,0,0,0,2,5,1,0,0,0,0],[[20,'Enter collected amnt'],0,0,0,0,15,0,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],8,0,0,0,0,8,0,0,2,2,6,7,0,0,0,0],[[16,'Confirm flowrate$00$00$00$00'],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],0,0,0,0,0,8,0,0,5,2,7,1,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0
				,0,0,0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		SIC0101_Intlk : P_Intlk (Description := "Base Pump Interlocks") := [14339,0,0,0,0,4,4,[[20,'Enter Description #0'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],4,4,4,4,4,4,1,4,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'
				],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]];
		SIC0102 : P_VSD (Description := "Feed Pump Control Module") := [4291639,0.00000000e+000,0,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,-2147483614,2
				,2,2,0.00000000e+000,6.20000000e+001,0.00000000e+000,5.00000000e+003,0.00000000e+000,6.20000000e+001
				,0.00000000e+000,5.00000000e+003,0.00000000e+000,6.20000000e+001,0.00000000e+000,4.09500000e+003
				,0.00000000e+000,1.00000000e+002,0.00000000e+000,1.00000000e+002,0.00000000e+000,4.09500000e+003
				,0.00000000e+000,1.00000000e+002,0.00000000e+000,1.00000000e+001,1.50000000e+001,1.50000000e+001
				,2.00000000e+000,0.00000000e+000,0,0,0,6.20000000e+001,0.00000000e+000,0,6.20000000e+001,0.00000000e+000
				,5.00000000e+003,0.00000000e+000,142880772,6.20000000e+001,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,6.20000000e+001,0.00000000e+000,6.20000000e+001,0,2,2,0,0,1
				,0,0,0,0,0,[40419,-1976917504,34,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000
				,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[963
				,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Interlock Trip$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[451
				,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'Failed to Stop$00$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[451
				,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Failed to Start$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0],[7
				,'SIC0102$00$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'SIC0102$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'Feed Pump$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[356929,2000,0],[-1606653375,2000,2000],0,[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[11,'Drive Fault$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[6,'mL/min$00$00'],6.20000000e+001,[3959361,2000,2000],[6,'mL/min$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],0.00000000e+000,[7,'Reverse$00$00$00$00$00$00$00$00$00'],[7,'Forward$00$00$00$00$00$00$00$00$00'
				],[-1606653375,15000,15000],[356929,15000,0],1,0,1,0,0.00000000e+000,1.00000000e-001,[-1069782463,2147483647
				,0],0.00000000e+000,[5,'P_VSD$00$00$00$00$00$00$00$00$00$00$00'],[1053966,0,0],[0,1,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],268435864,2,0,[355129,15000,0],[2876741,15000,0],[6,'area01$00$00'],0,[353129
				,0,0],0.00000000e+000,6.20000000e+001,56];
		SIC0102Cal_Seq : P_Seq (Description := "Feed Pump Calibration Sequencer") := [2295,1,0,15,15,0,-1,-1,0,8,30,0,8,30,0,0,0,0,100,100,0,0,100,100,0,100,1.00000000e+002,9,0,0,0,0,0,0,0,0,0,4,8,0,0,0,0,0,0,0,0,0
				,0,-1,552603648,0,1,0,0,0,1,0,0,1,100,[0,30000,0],0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],8,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],1,9,9,3,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,[7651,204113920
				,66,512,992,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[12,'Acquire pump$00$00$00$00$00$00$00$00'
				],[10,'Start pump$00$00$00$00$00$00$00$00$00$00'],[12,'Run pump fwd$00$00$00$00$00$00$00$00'
				],[9,'Stop pump$00$00$00$00$00$00$00$00$00$00$00'],[16,'Run at max speed$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[[16,'Pump is acquired$00$00$00$00'],[20,'Pump is at max speed'],[12,'Pump stopped$00$00$00$00$00$00$00$00'
				],[20,'Collection type mass'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,[0,0,0],1.00000000e+000
				,-1,0,15,1,0,[0,0,1,2,0,0,0,0,0,0,0],[0,0,1,2,4,0,0,0,0,0,0],0,0,0,1,8,511,255,8,0,0,0,482,0,0,[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],1,[5,'P_Seq$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'PP00101Cal-Seq$00$00$00$00$00$00'],[19,'PP00101 Calibration$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[835,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[18
				,'Sequence Timed Out$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[835,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14
				,'Step Timed Out$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[835,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17
				,'Interlock Tripped$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],0,[0,0,0],[373277,86400000,0],[0,86400000,0],1,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[6,'RA-Seq$00$00$00$00$00$00$00$00$00$00'
				],[19,'Calibration sett'],0,0,8,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,[14,'PP00101Cal_Seq$00$00$00$00$00$00'
				],0,660736,[0,'$00$00$00$00$00$00$00$00'],[6,'area01$00$00'],0,0,0,100,0,0,0,0,[0,0,0,0,0,0],[[[4,'Idle$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0],[[8,'Starting$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[7,'Running$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],7,1,7],[[8,'Complete$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[7,'Stopped$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0],[[4,'Held$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[8,'Stopping$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0],[[7,'Aborted$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[7,'Holding$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0],[[10,'Restarting$00$00$00$00$00$00$00$00$00$00'],0,0,0],[[9,'Resetting$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0]],0,10,11,7,0,0,0,1,0,-1,0,0,0,0];
		SIC0102Cal_Seq_Prompt : P_Prompt (Description := "Feed Pump Operator Prompts") := [8195,0,1.00000000e+002,0,9,4,9,0,0,7,0,[[42,'Select calibration type and enter settings$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'cal settings$00$00$00$00$00$00$00$00'],[[7,'Density$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Duration$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'Pump speed$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[4,'Mass$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'Volume$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[7,'mg / mL$00'],[3,'min$00$00$00$00$00'],[1,'%$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[1.00000000e+004,1.00000000e+002,1.00000000e+002,0.00000000e+000
				],[2,1,0,0],0,0,0,0,3,2,7,0,0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,6.00000000e+001],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'60.0000000$00$00$00$00$00$00'
				],[6.00000000e+001,0.00000000e+000,0.00000000e+000,0.00000000e+000],6.00000000e+001,[6.00000000e+001
				,0.00000000e+000,0.00000000e+000,0.00000000e+000],[1.00000000e+000,1.00000000e+000,1.00000000e+002
				,6.00000000e+001],[6,'<None>$00$00'],-2147483648,[8,'P_Prompt$00$00$00$00$00$00$00$00'],[5,'RA-UI$00$00$00$00$00$00$00'
				],-2147483648,0,0,[6,'area01$00$00']];
		SIC0102Cal_Seq_Prompts : P_PromptCfg[10] (Description := "Feed Pump Prompt Instance Configuration Data") := [[[42,'Select calibration type and enter settings$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'cal settings$00$00$00$00$00$00$00$00'],[[7,'Density$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Duration$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'Pump speed$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[4,'Mass$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'Volume$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[6,'g / mL$00$00'],[3,'min$00$00$00$00$00'],[1,'%$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,9.99990000e+004
				],[2,1,0,0],0,0,0,0,3,2,7,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[7,'Density$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Duration$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[7,'mg / mL$00'],[3,'min$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,9.99990000e+004
				],[2,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[23,'Enter measured quantity$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[13,'op enter amnt$00$00$00$00$00$00$00'],[[6,'Volume$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Quantity$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[2,'mL$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[7,'mL or g$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,9.99990000e+004
				],[0,0,0,1],0,0,0,0,0,0,8,0,0,0,0,0],[[32,'Acknowledge to begin calibration$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[10,'op confirm$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004
				,9.99990000e+004,9.99990000e+004],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[4,'Mass$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Mass$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[1,'g$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[1,'g$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,9.99990000e+004
				],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[27,'Confirm calculated flowrate$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'op confirm flowrate$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[8,'Flowrate$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[8,'mL / min'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0,0,0,0],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[9.99990000e+004,9.99990000e+004,9.99990000e+004,9.99990000e+004
				],[0,0,0,0],1,1,0,1,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00']],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],[0,0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],[0,0,0,0],0,0,0,0,0,0,0,0,0,0,0,0]];
		SIC0102Cal_Seq_Prompt_Response : P_PromptResp (Description := "Feed Pump Operator Entered Prompt Response Data (String)") := [[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]]];
		SIC0102Cal_Seq_Steps : P_SeqStep[10] (Description := "Feed Pump Sequencer Steps") := [[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,8,0,[0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[[19,'Calibration setting$00'],0,0,0,0,15,0,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],0,0,0,0,0,8,0,0,0,2,1,1,0,0,0,0],[[16,'Confirm to Start$00$00$00$00'],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],0,0,0,0,0,8,0,0,3,2,2,1,0,0,0,0],[[20,'Acquire pump control'],0,0,1,1,15,1,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0
				,0,0,0,2,3,1,0,0,0,0],[[17,'Run pump at speed$00$00$00'],0,60000,2,2,14,6,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],0,0,0,0,0,0,0,0,0,2,4,1,0,0,0,0],[[9,'Stop pump$00$00$00$00$00$00$00$00$00$00$00'],0,0,4,0,14,8,0,[0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000],0,0,0,0,0,0,0,0,0,2,5,1,0,0,0,0],[[20,'Enter collected amnt'],0,0,0,0,15,0,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],8,0,0,0,0,8,0,0,2,2,6,7,0,0,0,0],[[16,'Confirm flowrate$00$00$00$00'],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				],0,0,0,0,0,8,0,0,5,2,7,1,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0
				,0,0,0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,0,0,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		SIC0102_Intlk : P_Intlk (Description := "Feed Pump Interlocks") := [14339,0,0,0,0,4,4,[[20,'Enter Description #0'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],4,4,4,4,4,4,0,4,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'
				],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]];
		SIC0401_Angle : P_AOut (Description := "Rocker Angle") := [12583951,0.00000000e+000,0.00000000e+000,2,2.00000000e+000,1.20000000e+001,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,2.00000000e+000,1.20000000e+001,2.00000000e+000,1.20000000e+001
				,0.00000000e+000,5.00000000e+000,0,5.00000000e+000,5.00000000e+000,5.00000000e+000,5.00000000e+000
				,2.00000000e+000,1.20000000e+001,0,0,0,0,0,0,0,65536,[7651,-1440079360,32,128,994,[8,'P_CmdSrc$00$00$00$00'
				],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17
				,'Interlock Tripped$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[12,'Rocker_Angle$00$00$00$00$00$00$00$00'],[12,'Rocker_Angle$00$00$00$00$00$00$00$00'
				],[12,'Rocker Angle$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[5,'Angle$00$00$00'],5.00000000e+000,5.00000000e+000,5.00000000e+000,1.00000000e-001,0.00000000e+000
				,[-1069782363,2147483647,0],1084227584,1,0,0,0,0,[6,'P_AOut$00$00$00$00$00$00$00$00$00$00'],0.00000000e+000
				,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],0,5.00000000e+000];
		SIC0401_Intlk : P_Intlk (Description := "Rocker Interlocks") := [14339,0,0,0,0,4,4,[[20,'Enter Description #0'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],4,4,4,4,4,4,0,4,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'
				],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]];
		SIC0401_Motor : P_Motor (Description := "Rocker Control Module") := [402653307,0,0,0.00000000e+000,2.00000000e+000,1.00000000e+001,1.00000000e+001,0.00000000e+000
				,0,16896,2,2,0,0,1,0,0,0,0,16908416,[7651,-1440079360,32,128,994,[8,'P_CmdSrc$00$00$00$00'],[6,'RA-BAS$00$00'
				]],[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9
				,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14
				,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Failed to Stop$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[15,'Failed to Start$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[7,'SIC0401$00$00$00$00$00$00$00$00$00$00$00$00$00'],[7,'SIC0401$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'Rocker Motor$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1968728,2000,0],[-1606653475,10000,10000],[1968728,10000,0],[-1606653475,2000,2000],0,1,0,1,0,[7,'P_Motor$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],2,0,[1970828,10000,0],[1548028,10000,0],[6,'area01$00$00'],0,[1546028,0,0],[0
				,0,0]];
		SIC0401_MsgDINTs : DINT[8] (Description := "Rocker Motor Messaged Tags to Redlion",
		            COMMENT[0] := "Rocker Mode$N0 = Stop/Load$N1 = Harvest$N2 = Run",
		            COMMENT[1] := "Rocker Angle$NRange: 2 - 12",
		            COMMENT[2] := "Rocker Speed $NRange: 2 - 40",
		            RADIX := Decimal) := [0,5,5,0,0,0,0,0];
		SIC0401_Speed : P_AOut (Description := "Rocker Speed") := [12583951,0.00000000e+000,0.00000000e+000,2,2.00000000e+000,4.00000000e+001,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,2.00000000e+000,4.00000000e+001,2.00000000e+000,4.00000000e+001
				,0.00000000e+000,5.00000000e+000,0,5.00000000e+000,5.00000000e+000,5.00000000e+000,5.00000000e+000
				,2.00000000e+000,4.00000000e+001,0,0,0,0,0,0,0,65536,[7651,-1440079360,32,128,994,[8,'P_CmdSrc$00$00$00$00'
				],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17
				,'Interlock Tripped$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[12,'Rocker_Speed$00$00$00$00$00$00$00$00'],[12,'Rocker_Speed$00$00$00$00$00$00$00$00'
				],[12,'Rocker Speed$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,[5,'Speed$00$00$00'],5.00000000e+000,5.00000000e+000,5.00000000e+000,1.00000000e-001,0.00000000e+000
				,[-1069782463,2147483647,0],1084227584,1,0,0,0,0,[6,'P_AOut$00$00$00$00$00$00$00$00$00$00'],0.00000000e+000
				,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[6,'area01$00$00'],0,5.00000000e+000];
		SIM : DINT[10] (RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		Slot1_AI_WAGO455 : WAGO_455  := [259,0,400,0,400,0,400,3,400,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,3.00000000e+000,1.46484375e-001],[0,0,0,0,0,0,0,0,0,3,0,3]];
		Slot1_AI_WAGO455_Inputs : SINT[8] (RADIX := Decimal) := [0,0,0,0,0,0,3,0];
		Slot2_RTD_WAGO461 : WAGO_461  := [35,1081,1081,0,0,8500,8500,0,0,[57,1024,1081,0,0,52,8448,8500,0,0],8500];
		Slot2_RTD_WAGO461_Inputs : SINT[4] (RADIX := Decimal) := [57,4,52,33];
		Slot3_AO_WAGO550 : WAGO_550  := [3,0,0,0,5000,0,16384];
		Slot3_AO_WAGO550_Outputs : SINT[4] (RADIX := Decimal) := [0,0,0,64];
		Slot5_AO_WAGO555 : WAGO_555  := [3,0,0,0,0,0,0,0,0,0,0,0,0];
		Slot5_AO_WAGO555_Outputs : SINT[8] (RADIX := Decimal) := [0,0,0,0,0,0,0,0];
		StartupTON : TIMER  := [1652407,60000,0];
		Startup_Active : BOOL (Description := "Startup Bit for Power Loss",
		            RADIX := Decimal) := 1;
		Startup_Auto_Resume_PB : BOOL (RADIX := Decimal) := 0;
		Startup_Shutdown_PB : BOOL (RADIX := Decimal) := 0;
		Start_Rocker : BOOL (Description := "HMI command to start the rocker",
		            RADIX := Decimal) := 0;
		Stop_Rocker : BOOL (Description := "HMI comand to stop the rocker",
		            RADIX := Decimal) := 0;
		TC0702_FAIL : BOOL (Description := "Temp Control Active and PV did not Change",
		            RADIX := Decimal) := 0;
		TC0702_FailTime : TIMER  := [0,300000,0];
		TC0705 : P_DOut (Description := "System Heater Output") := [1610612915,0,0.00000000e+000,2.00000000e+000,0.00000000e+000,0.00000000e+000,5.00000000e-001
				,5.00000000e-001,1.00000000e+001,1.00000000e+001,0,37814272,0,0,0,1,0,0,0,0,0,0,536874752,[-1606653175
				,10000,10000],[3700628,10000,0],[-1606653175,2000,2000],[3700628,2000,0],0,[7651,204113920,66,512,992,[8,'P_CmdSrc$00$00$00$00'
				],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14
				,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[18,'Failed to Turn Off$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[17,'Failed to Turn On$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[6,'TC0705$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'TC0705$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[15,'Rocker Heat Pad$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,500,0],[0,500,0],[3700628,0,0],[3696228,0,0],1,0,0,0,[2,'On$00$00$00$00$00$00'],[3,'Off$00$00$00$00$00'],[6,'P_DOut$00$00$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'area01$00$00'],0,0,0,[3696228,0,0]];
		TIC0705 : PID_ENHANCED (Description := "Tray Temp PID") := [1,1089544,2.21945133e+001,1.00000000e+002,0.00000000e+000,3.80000000e+001,2.21945133e+001
				,0.00000000e+000,1.00000000e+002,0.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000
				,1.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,1.00000000e+002,0.00000000e+000,1.00000000e+002,0.00000000e+000,2.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,3.00000000e+001,3.00000000e+000,0.00000000e+000,0.00000000e+000
				,7.00000000e+001,7.00000000e+001,-3.40282347e+038,-3.40282347e+038,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,5.00000000e+000,3.00000000e+000,5.00000000e+000,1.00000000e+001
				,0.00000000e+000,0,0.00000000e+000,1,0,0,1,33554497,0.00000000e+000,0.00000000e+000,2.21945133e+001
				,2.21945133e+001,2.21945133e+001,0.00000000e+000,0.00000000e+000,1.00000000e+000,2.50000000e-001
				,0,0,0,0.00000000e+000,7.79293180e-002,-2.21945133e+001,0.00000000e+000,0.00000000e+000,-2.21945133e+001
				,-2.21945133e+001,3.00000000e+001,1.25000011e-002,0.00000000e+000,2.50000000e-001,3.00000000e+001
				,3.00000000e+000,0.00000000e+000,0.00000000e+000,2.21945133e+001,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,9.40402767e-038,0.00000000e+000,2.21945133e+001,2.21945133e+001
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,3.50324616e-043,5.48368906e-009
				,0.00000000e+000,7.89211295e-042,2.50000000e-001,3.51725915e-043,5.48368906e-009,7.89211295e-042
				,2.51000017e-001];
		TIC0705_AT : PIDE_AUTOTUNE  := [0,1,0.00000000e+000,0.00000000e+000,2.00000000e+000,0,8,1.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,1065353216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		TIC0705_Intlk : P_Intlk (Description := "Vessel Temperature Control Module Interlocks") := [14339,0,0,0,0,48,16,[[6,'E-Stop$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'HMI Abort$00$00$00$00$00$00$00$00$00$00$00'
				],[17,'Safety Tapeswitch$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[20,'Rocker Motor Stopped'],[14,'Startup Active$00$00$00$00$00$00'],[8,'IO Fault$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Global Hi Temp$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],48,48,48,16,48,48,1,48,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'
				],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[6,'RA-BAS$00$00$00$00$00$00'
				],0,[6,'area01$00$00'],[20,'Rocker Motor Stopped']];
		TIC0705_PV_HLimit : REAL (RADIX := Float) := 0.00000000e+000;
		TIC0705_PV_LLimit : REAL (RADIX := Float) := 0.00000000e+000;
		TIC0705_PV_Snapshot : REAL (RADIX := Float) := 0.00000000e+000;
		TIC0705_Status : PIDE_Config  := [[1,'C$00$00$00$00$00$00$00'],[1,'%$00$00$00$00$00$00$00'],[15,'Temp Controller$00$00$00$00$00'
				],6,2];
		TotalFlowSP : REAL (RADIX := Float) := 2.00000000e+000;
		TT0705 : P_AInAdv (Description := "Temp Input") := [3,1.08100000e+003,0,0,2,9.92000000e+002,1.39300000e+003,0.00000000e+000,1.00000000e+002,0.00000000e+000
				,1.00000000e+000,0.00000000e+000,1.00000000e+002,1.00000000e+000,1.00000000e+002,1.00000000e+000
				,0.00000000e+000,1.00000000e+000,0.00000000e+000,1.00000000e+000,6.50000000e+001,0.00000000e+000
				,6.00000000e+001,0.00000000e+000,2.00000000e+001,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,1.00000000e+002,0.00000000e+000,1.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000
				,1.40000000e+003,9.80000000e+002,4.16666657e-001,2.21945133e+001,2.21945133e+001,2.21945133e+001
				,2.21945133e+001,0.00000000e+000,0.00000000e+000,2.21945133e+001,2.21945133e+001,0.00000000e+000
				,1.00000000e+002,1,1,0,0,0,2097156,[92275667,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[13,'Low-Low Alarm$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[92275667,500,0,5,0,0,0,[1478543,5000,0],[1468043,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'Low Alarm$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[92275667,500,0,5,0,0,0,[494239,5000,0],[504839,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[10,'High Alarm$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[92275667,750,0,5,0,0,0,[494239,5000,0],[504839,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[15,'High-High Alarm$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[1,'C$00$00$00$00$00$00$00'],[6,'TT0705$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[9,'Tray Temp$00$00$00$00$00$00$00$00$00$00$00'
				],[16,'Rocker Tray Temp$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[13
				,'Input Failure$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],0,1,0,1,0.00000000e+000,0.00000000e+000,0.00000000e+000,2.21945133e+001,1.01000000e-001,2.21945133e+001
				,0.00000000e+000,2.21945133e+001,[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'Low Deviation Alarm$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20
				,'High Deviation Alarm'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[451,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19
				,'High Rate of Change$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[-1069782263,2147483647,0],0.00000000e+000,1149706240,1102155357,[8,'P_AInAdv$00$00$00$00$00$00$00$00'
				],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653175,0,0],[0,0,0],[-1606653175,0,0],[16,'PV Deviation Low$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653175,0,0],[0,0,0],[-1606653175,0,0],[20,'PV Hi Rate of Change'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653175,0,0],[0,0,0],[-1606653175,0,0],[17,'PV Deviation High$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653175,0,0],[207528,0,0],[-1606653175,0
				,0],[10,'PV Low-Low$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653175
				,0,0],[1478543,0,0],[-1606653175,0,0],[6,'PV Low$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0],[43,0.00000000e+000
				,0.00000000e+000,0.00000000e+000,[-1606653175,0,0],[494239,0,0],[-1606653175,0,0],[12,'PV High-High$00$00$00$00$00$00$00$00'
				],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'
				],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653175,0,0],[494239,0,0],[-1606653175,0
				,0],[7,'PV High$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653175
				,0,0],[2065943,0,0],[-1606653175,0,0],[13,'Input Failure$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'],[16,'Gating Condition$00$00$00$00'],0],[6,'RA-BAS$00$00$00$00$00$00'
				],[6,'area01$00$00'],0,0,1.08100000e+003];
		TT0705_Val_Filtered : REAL (RADIX := Float) := 2.59423809e+001;
		TY0705 : SPLIT_RANGE (Description := "System Temp Convert$NAO to DO") := [1,0.00000000e+000,3.00000000e+001,1.00000000e+002,0.00000000e+000,0.00000000e+000,5.00000000e+001
				,3.00000000e+001,1.00000000e+000,0.00000000e+000,0.00000000e+000,1,0.00000000e+000,0.00000000e+000
				,0,0.00000000e+000,1.05000000e+001,3.48923318e-043,5.48357759e-009,7.89211295e-042,2.49000013e-001
				,3.33333325e+000,3.00000000e-001,-6.00000000e-001,3.00000000e+001,1.00000000e+002,-5.00000000e+001
				];
		XA0202A : P_DIn (Description := "Rocker Tray Safety TapeSwitch A") := [16823575,0,0.00000000e+000,1,1,0,0,0,0,[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Discrete Input$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Discrete Input$00$00$00$00$00$00'],[92275635,750,0,5,0,0,0,[576827,5000,0],[457227,5000,0],[0,0,0],0,290
				,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Target Disagree$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[574227,0,0],[-1606653475
				,0,0],[2,'On$00$00$00$00$00$00'],[3,'Off$00$00$00$00$00'],0,0,0,1,[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00'
				],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653475,0,0],[574227,0,0],[-1606653475,0,0
				],[15,'Target Disagree$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],0,0,[6,'area01$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],0,[963
				,1000,480,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15
				,'Alarm Condition$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],6];
		XA0202B : P_DIn (Description := "Rocker Tray Safety TapeSwitch B") := [16823575,0,0.00000000e+000,1,1,0,0,0,0,[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Discrete Input$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Discrete Input$00$00$00$00$00$00'],[963,750,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[15,'Target Disagree$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],[574227,0,0],[-1606653175,0,0],[2,'On$00$00$00$00$00$00'],[3,'Off$00$00$00$00$00'],0,0,0,1,[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00'
				],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653175,0,0],[574227,0,0],[-1606653175,0,0
				],[15,'Target Disagree$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],0,0,[6,'area01$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],0,[963
				,1000,480,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15
				,'Alarm Condition$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],6];
		XC0702 : P_DOut (Description := "Vent Heater Output") := [1616912563,0,0.00000000e+000,2.00000000e+000,0.00000000e+000,0.00000000e+000,3.00000000e+000
				,7.00000000e+000,1.00000000e+001,1.00000000e+001,0,37814272,0,0,0,1,0,0,0,0,0,0,536874752,[-1606653275
				,10000,10000],[3456534,10000,0],[-1606653275,2000,2000],[3456534,2000,0],0,[40419,740952064,64,512,992,[8,'P_CmdSrc$00$00$00$00'
				],[6,'RA-BAS$00$00']],[963,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[9,'I/O Fault$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[963,500,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14
				,'Interlock Trip$00$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[451,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[18,'Failed to Turn Off$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[451,1000,0,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[17,'Failed to Turn On$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0],[6,'XC0702$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'XC0702$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[11,'Vent Heater$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[3389512,3000,0],[3390012,7000,0],[3456534,0,0],[3252134,0,0],1,0,0,0,[2,'On$00$00$00$00$00$00'],[3,'Off$00$00$00$00$00'
				],[6,'P_DOut$00$00$00$00$00$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'area01$00$00'
				],0,0,0,[3252134,0,0]];
		YZ0901 : P_DIn (Description := "E-Stop") := [16823575,0,0.00000000e+000,1,1,0,0,0,0,[7,'YZ00901$00$00$00$00$00$00$00$00$00$00$00$00$00'],[6,'E-Stop$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[7,'YZ00901$00$00$00$00$00$00$00$00$00$00$00$00$00'],[963,1000,0,5,0,0,0,[0,5000,0],[2091483,5000,0],[0,0
				,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Target Disagree$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[2595810,0,0],[-1606653275
				,0,0],[2,'On$00$00$00$00$00$00'],[3,'Off$00$00$00$00$00'],0,0,0,1,[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00'
				],[43,0.00000000e+000,1.00000000e+000,1.00000000e+000,[-1606653275,1000,1000],[2595810,1000,0],[-1606653275
				,0,0],[15,'Target Disagree$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],0,0,[6,'area01$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],0,[963
				,1000,480,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15
				,'Alarm Condition$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],6];
		YZ0902 : P_DIn (Description := "HMI Abort") := [33027,0,0.00000000e+000,1,1,0,0,0,0,[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14
				,'Discrete Input$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'Discrete Input$00$00$00$00$00$00'],[92275699,750,0,5,0,0,0,[2672731,5000,0],[2672831,5000,0],[0,0,0],0,290
				,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15,'Target Disagree$00$00$00$00$00'
				],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'],0],[-1606653475,0,0],[3842012
				,0,0],[2,'On$00$00$00$00$00$00'],[3,'Off$00$00$00$00$00'],0,0,0,1,[5,'P_DIn$00$00$00$00$00$00$00$00$00$00$00'
				],[43,0.00000000e+000,0.00000000e+000,0.00000000e+000,[-1606653475,0,0],[3842012,0,0],[-1606653475,0
				,0],[15,'Target Disagree$00$00$00$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],[6,'P_Gate$00$00$00$00$00$00$00$00$00$00'
				],[16,'Gating Condition$00$00$00$00'],0],0,0,[6,'area01$00$00'],[6,'RA-BAS$00$00$00$00$00$00'],0,[899
				,1000,480,5,0,0,0,[0,5000,0],[0,5000,0],[0,0,0],0,290,[7,'P_Alarm$00$00$00$00$00$00$00$00$00$00$00$00$00'],[15
				,'Alarm Condition$00$00$00$00$00'],0,[6,'RA-BAS$00$00$00$00$00$00'],[7,'P_Alarm$00$00$00$00$00$00$00$00$00'
				],0],2];
	END_TAG

	PROGRAM CM_Cntl (MAIN := "Main",
	                 MODE := 0,
	                 DisableFlag := 0,
	                 UseAsFolder := 0)
		TAG
			AIC0707_Acid_DGain : REAL (RADIX := Float,
			            Usage := Input) := 0.00000000e+000;
			AIC0707_Acid_IGain : REAL (RADIX := Float,
			            Usage := Input) := 1.00000000e+000;
			AIC0707_Acid_PGain : REAL (RADIX := Float,
			            Usage := Input) := 2.00000000e+000;
			AIC0707_Base_DGain : REAL (RADIX := Float,
			            Usage := Input) := 0.00000000e+000;
			AIC0707_Base_IGain : REAL (RADIX := Float,
			            Usage := Input) := 5.00000000e-001;
			AIC0707_Base_PGain : REAL (RADIX := Float,
			            Usage := Input) := 1.00000000e+000;
		END_TAG

		ROUTINE DO_Control 
				RC: "==============================================================$N"
				    "Dissolved Oxygen (DO) Control Module$N"
				    "==============================================================";
				N: NOP();
				RC: "Interlocks";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(AIC0706_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(AIC0706_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(AIC0706_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(AIC0706_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(AIC0706_Intlk.Inp_Intlk04) ,XIC(AT0706.Alm_Fail) OTE(AIC0706_Intlk.Inp_Intlk05) ,[XIC(FIC0111.Sts_IntlkTrip) ,XIC(FIC0112.Sts_IntlkTrip) ] OTE(AIC0706_Intlk.Inp_Intlk06) ,XIO(SIC0401_Motor.Sts_Running) OTE(AIC0706_Intlk.Inp_Intlk07) ,P_Intlk(AIC0706_Intlk) ];
				N: XIO(AIC0706_Intlk.Sts_IntlkOK)OTL(AIC0706.ProgProgReq)OTL(AIC0706.ProgManualReq);
				N: XIC(AIC0706_Intlk.Sts_IntlkOK)ONS(ONS.3)OTL(AIC0706.ProgAutoReq);
				RC: "Alarm Handling for HMI";
				N: [[XIC(AIC0706.DevHHAlarm) ,XIC(AIC0706.DevHAlarm) ,XIC(AIC0706.DevLAlarm) ,XIC(AIC0706.DevLLAlarm) ] OTE(AIC0706_Status.Alm) ,XIO(AIC0706_Intlk.Sts_IntlkOK) OTE(AIC0706_Status.Intlk) ];
				RC: "$N"
				    "Mode Handling for HMI";
				N: [XIC(AIC0706.ProgOper) OTE(AIC0706_Status.Cntl_Mode) OTU(AIC0706.ProgProgReq) OTU(AIC0706.OperProgReq) ,XIO(AIC0706.ProgOper) OTU(AIC0706.ProgOperReq) OTU(AIC0706.OperOperReq) ];
				N: [XIC(AIC0706.CasRat) MOV(0,AIC0706_Status.Loop_Mode) OTU(AIC0706.ProgCasRatReq) OTU(AIC0706.OperCasRatReq) ,XIC(AIC0706.Auto) MOV(1,AIC0706_Status.Loop_Mode) OTU(AIC0706.ProgAutoReq) OTU(AIC0706.OperAutoReq) ,XIC(AIC0706.Manual) MOV(2,AIC0706_Status.Loop_Mode) OTU(AIC0706.ProgManualReq) OTU(AIC0706.OperManualReq) ];
		END_ROUTINE

		ROUTINE Main 
				N: JSR(DO_Control,0);
				N: JSR(PH_Control,0);
		END_ROUTINE

		ROUTINE PH_Control 
				RC: "==============================================================$N"
				    "AIC0707 - pH Control Module$N"
				    "==============================================================";
				N: NOP();
				RC: "Interlocks";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(AIC0707_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(AIC0707_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(AIC0707_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(AIC0707_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(AIC0707_Intlk.Inp_Intlk04) ,XIC(AT0707.Sts_PVBad) OTE(AIC0707_Intlk.Inp_Intlk05) ,[XIC(SIC0101.Sts_IntlkTrip) ,XIC(FIC0113.Sts_IntlkTrip) ] OTE(AIC0707_Intlk.Inp_Intlk06) ,XIO(SIC0401_Motor.Sts_Running) OTE(AIC0707_Intlk.Inp_Intlk07) ,P_Intlk(AIC0707_Intlk) ];
				N: XIO(AIC0707_Intlk.Sts_IntlkOK)OTL(AIC0707.ProgProgReq)OTL(AIC0707.ProgManualReq)MOV(50,AIC0707.CVProg);
				N: XIC(AIC0707_Intlk.Sts_IntlkOK)ONS(ONS.4)OTL(AIC0707.ProgAutoReq);
				RC: "Alarm Handling for HMI";
				N: [[XIC(AIC0707.DevHHAlarm) ,XIC(AIC0707.DevHAlarm) ,XIC(AIC0707.DevLAlarm) ,XIC(AIC0707.DevLLAlarm) ] OTE(AIC0707_Status.Alm) ,XIO(AIC0707_Intlk.Sts_IntlkOK) OTE(AIC0707_Status.Intlk) ];
				RC: "$N"
				    "Mode Handling for HMI";
				N: [XIC(AIC0707.ProgOper) OTE(AIC0707_Status.Cntl_Mode) OTU(AIC0707.ProgProgReq) OTU(AIC0707.OperProgReq) ,XIO(AIC0707.ProgOper) OTU(AIC0707.ProgOperReq) OTU(AIC0707.OperOperReq) ];
				N: [XIC(AIC0707.CasRat) MOV(0,AIC0707_Status.Loop_Mode) OTU(AIC0707.ProgCasRatReq) OTU(AIC0707.OperCasRatReq) ,XIC(AIC0707.Auto) MOV(1,AIC0707_Status.Loop_Mode) OTU(AIC0707.ProgAutoReq) OTU(AIC0707.OperAutoReq) ,XIC(AIC0707.Manual) MOV(2,AIC0707_Status.Loop_Mode) OTU(AIC0707.ProgManualReq) OTU(AIC0707.OperManualReq) ];
				RC: "Gain Scheduling";
				N: LES(AIC0707.CVEU,50)[MOV(AIC0707_Base_PGain,AIC0707.PGain) ,MOV(AIC0707_Base_IGain,AIC0707.IGain) ,MOV(AIC0707_Base_DGain,AIC0707.DGain) ];
				N: GRT(AIC0707.CVEU,50)[MOV(AIC0707_Acid_PGain,AIC0707.PGain) ,MOV(AIC0707_Acid_IGain,AIC0707.IGain) ,MOV(AIC0707_Acid_DGain,AIC0707.DGain) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM CM_IO (MAIN := "Main",
	               MODE := 0,
	               DisableFlag := 0,
	               UseAsFolder := 0)
		TAG
			AT0706Cal_Accept : BOOL (Description := "Probe Calibration Set by HMI",
			            RADIX := Decimal,
			            Usage := Input) := 0;
			AT0706Cal_Complete : BOOL (RADIX := Decimal) := 0;
			AT0706Cal_Reset : BOOL (Description := "Probe Calibration Reset by HMI",
			            RADIX := Decimal,
			            Usage := Input) := 0;
			AT0706_SpanDifference : REAL (RADIX := Float,
			            Usage := Input) := 1.00000000e+000;
			AT0707Cal_Accept : BOOL (RADIX := Decimal,
			            Usage := Input) := 0;
			AT0707Cal_Complete : BOOL (RADIX := Decimal) := 0;
			AT0707Cal_Reset : BOOL (RADIX := Decimal,
			            Usage := Input) := 0;
			AT0707_SpanDifference : REAL (RADIX := Float,
			            Usage := Input) := 0.00000000e+000;
		END_TAG

		ROUTINE AnalogIns (Description := "Analog Inputs")
				RC: "============================================================$N"
				    "Control Module - Analog Input$N"
				    "============================================================$N"
				    "";
				N: NOP();
				RC: "=====================================================================$N"
				    "TT0705$N"
				    "Vessel Temperature Indicator$N"
				    "=====================================================================";
				N: NOP();
				N: [MOV(Slot2_RTD_WAGO461.Ch1_Temp_degCx10,TT0705.Inp_PV) ,P_AInAdv(TT0705) ,GEQ(TT0705.Val,65) OTE(Global_HICritTemp) ];
				RC: "=====================================================================$N"
				    "AIT0706$N"
				    "DO$N"
				    "=====================================================================$N"
				    "The $Q.Inp_PV$Q logic is located in the Probe Calibration Routine under the CM_Cntl Program";
				N: NOP();
				N: [[XIO(Local:1:I00.RunMode) ,XIC(Local:1:I00.ConnectionFaulted) ] OTE(AT0706.Inp_PVBad) ,P_AInAdv(AT0706) ];
				RC: "=====================================================================$N"
				    "AIT0707$N"
				    "pH$N"
				    "=====================================================================$N"
				    "The $Q.Inp_PV$Q logic is located in the Probe Calibration Routine under the CM_Cntl Program";
				N: NOP();
				N: [[XIO(Local:1:I00.RunMode) ,XIC(Local:1:I00.ConnectionFaulted) ] OTE(AT0707.Inp_PVBad) ,P_AInAdv(AT0707) ];
		END_ROUTINE

		ROUTINE DigitalIns (Description := "Discrete Inputs")
				RC: "============================================================$N"
				    " Control Module - Discrete Input$N"
				    "============================================================$N"
				    "";
				N: NOP();
				N: [OTE(YZ0901.Inp_PV) ,P_DIn(YZ0901) ];
				N: [XIC(HMI_Abort_PB) OTE(YZ0902.Inp_PV) ,P_DIn(YZ0902) ];
				RC: "--------$N"
				    "On Rungs 3 and 4 Added [AFI] Due To WAGO Hardware Does Not Provide Same Inp_IOFault$N"
				    "Functionality As Rockwell Hardware For This Item$N"
				    "BYUNK - AES - 02FEB2022$N"
				    "-------";
				N: [XIC(Wago_RIO:I.Data[12].0) OTE(XA0202A.Inp_IOFault) ,XIO(Wago_RIO:I.Data[12].0) OTE(XA0202A.Inp_PV) ,P_DIn(XA0202A) ];
				N: [XIC(Wago_RIO:I.Data[12].0) OTE(XA0202B.Inp_IOFault) ,XIO(Wago_RIO:I.Data[12].0) OTE(XA0202B.Inp_PV) ,P_DIn(XA0202B) ];
		END_ROUTINE

		ROUTINE DigitalOuts (Description := "Discrete Outputs")
				RC: "============================================================$N"
				    "Control Module - Discrete Output$N"
				    "============================================================$N"
				    "";
				N: NOP();
				RC: "=====================================================================$N"
				    "System Heater Output$N"
				    "Split Range Control resides in Temperature PID routine$N"
				    "=====================================================================";
				N: [XIO(YZ0901.Alm_TgtDisagree) XIO(YZ0902.Alm_TgtDisagree) XIO(Startup_Active) XIO(XA0202A.Alm_TgtDisagree) XIO(XA0202B.Alm_TgtDisagree) XIC(SIC0401_Motor.Sts_Running) OTE(TC0705.Inp_IntlkOK) ,P_DOut(TC0705) ,XIC(TC0705.Out) OTE(Wago_RIO:O.Data[12].3) ];
				RC: "=====================================================================$N"
				    "Vent Heater$N"
				    "=====================================================================";
				N: [XIO(YZ0901.Alm_TgtDisagree) XIO(YZ0902.Alm_TgtDisagree) XIO(Startup_Active) XIO(XA0202A.Alm_TgtDisagree) XIO(XA0202B.Alm_TgtDisagree) XIC(SIC0401_Motor.Sts_Running) OTE(XC0702.Inp_IntlkOK) ,P_DOut(XC0702) ,XIC(XC0702.Out) OTE(Wago_RIO:O.Data[14].4) ];
		END_ROUTINE

		FBD_ROUTINE LPF (Description := "Low-Pass Filters for DO, pH, and Temp",
		                 SheetSize := "B - 11 x 17 in",
		                 SheetOrientation := Landscape)
			SHEET  (Name := "")
				IREF  (ID := 0,
				       X := 240,
				       Y := 100,
				       Operand := "Local:1:I00.Command00.Data402091",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 1,
				       X := 240,
				       Y := 200,
				       Operand := "Local:1:I00.Command15.Data402091",
				       HideDescription := No)
				END_IREF

				OREF  (ID := 2,
				       X := 610,
				       Y := 100,
				       Operand := "AT0706_Val_Filtered",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 3,
				       X := 610,
				       Y := 200,
				       Operand := "AT0707_Val_Filtered",
				       HideDescription := No)
				END_OREF

				LPF_BLOCK  (ID := 4,
				            X := 400,
				            Y := 40,
				            Operand := "AT0706_LPF",
				            VisiblePins := "In, Out",
				            HideDescription := No)
				END_LPF_BLOCK

				LPF_BLOCK  (ID := 5,
				            X := 400,
				            Y := 140,
				            Operand := "AT0707_LPF",
				            VisiblePins := "In, Out",
				            HideDescription := No)
				END_LPF_BLOCK

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 4,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 1,
				       FromParameter := "",
				       ToElementID := 5,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 4,
				       FromParameter := "Out",
				       ToElementID := 2,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 5,
				       FromParameter := "Out",
				       ToElementID := 3,
				       ToParameter := "")
				END_WIRE

			END_SHEET

		END_FBD_ROUTINE

		ROUTINE Main 
				N: JSR(AnalogIns,0);
				N: JSR(DigitalIns,0);
				N: JSR(DigitalOuts,0);
				N: JSR(LPF,0);
				N: JSR(Probe_Calibration,0);
		END_ROUTINE

		ROUTINE Probe_Calibration 
				RC: "Presens$N"
				    "DO and pH Probe Calibration Logic$N"
				    "Temperature Probe Offset Logic";
				N: NOP();
				N: [XIC(AT0706Cal_Accept) ONS(ONS.6) DIV(AT0706_SpanValue,AT0706_Val_Filtered,AT0706_SpanDifference) OTL(AT0706Cal_Complete) ,XIC(AT0707Cal_Accept) ONS(ONS.7) SUB(AT0707_SpanValue,AT0707_Val_Filtered,AT0707_SpanDifference) OTL(AT0707Cal_Complete) ];
				N: [XIC(AT0706Cal_Reset) MOV(1,AT0706_SpanDifference) OTU(AT0706Cal_Reset) OTU(AT0706Cal_Complete) ,XIC(AT0707Cal_Reset) MOV(0,AT0707_SpanDifference) OTU(AT0707Cal_Reset) OTU(AT0707Cal_Complete) ];
				N: [MUL(AT0706_SpanDifference,AT0706_Val_Filtered,AT0706.Inp_PV) ,ADD(AT0707_SpanDifference,AT0707_Val_Filtered,AT0707.Inp_PV) ];
				N: MOV(100,Local:1:O00.Command09.Data405527);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM CM_Motors (MAIN := "Main",
	                   MODE := 0,
	                   DisableFlag := 0,
	                   UseAsFolder := 0)
		TAG
			SIC0101_FaultCode : P_DescList[1]  := [[0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					]]];
			SIC0102_FaultCode : P_DescList[1]  := [[0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					]]];
		END_TAG

		ROUTINE Main 
				N: JSR(Pumps,0);
				N: JSR(Rocker,0);
		END_ROUTINE

		ROUTINE Pumps (Description := "Pump Control Module")
				RC: "==============================================================$N"
				    "Pump Control$N"
				    "==============================================================";
				N: NOP();
				RC: "==============================================================$N"
				    "SIC-0101 - Base Pump$N"
				    "==============================================================";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(SIC0101_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(SIC0101_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(SIC0101_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(SIC0101_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(SIC0101_Intlk.Inp_Intlk04) ,P_Intlk(SIC0101_Intlk) ];
				N: CM_Pump(CM_SIC0101,SIC0101,SIC0101_Intlk);
				N: P_VSD(SIC0101,SIC0101_FaultCode);
				RC: "Outputs";
				N: [MOV(SIC0101.Out_SpeedRef,Slot3_AO_WAGO550.Ch1_Voltage) ,XIC(SIC0101.Out_Start) OTL(Wago_RIO:O.Data[14].0) ,XIC(SIC0101.Out_Stop) OTU(Wago_RIO:O.Data[14].0) ,XIC(SIC0101.Out_Fwd) OTU(Wago_RIO:O.Data[14].1) ,XIC(SIC0101.Out_Rev) OTL(Wago_RIO:O.Data[14].1) ];
				RC: "Base Pump Flow Totalizer";
				N: [[XIC(SIC0101.Sts_RunningFwd) ,XIC(SIC0101.Sts_JoggingFwd) ] MOV(SIC0101.Val_SpeedFdbk,FIQ0101.Inp_Flowrate) OTL(FIQ0101.CMD) ,[XIC(SIC0101.Sts_RunningRev) ,XIC(SIC0101.Sts_JoggingRev) ] MUL(SIC0101.Val_SpeedFdbk,-1,FIQ0101.Inp_Flowrate) OTL(FIQ0101.CMD) ,XIC(SIC0101.Sts_Stopped) MOV(0,FIQ0101.Inp_Flowrate) OTU(FIQ0101.CMD) ,MOV(1,FIQ0101.Inp_TimeBase) ,CM_Totalizer2(FIQ0101) ,XIC(FIQ0101.Cmd_Reset) OTU(FIQ0101.CMD) ,XIC(FIQ0101.Cmd_Reset) EQU(FIQ0101.Display_Totalized_Count,0) OTU(FIQ0101.Cmd_Reset) ];
				RC: "==============================================================$N"
				    "SIC-0102 - Feed Pump$N"
				    "==============================================================";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(SIC0102_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(SIC0102_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(SIC0102_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(SIC0102_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(SIC0102_Intlk.Inp_Intlk04) ,P_Intlk(SIC0102_Intlk) ];
				N: CM_Pump(CM_SIC0102,SIC0102,SIC0102_Intlk);
				N: P_VSD(SIC0102,SIC0102_FaultCode);
				RC: "Outputs";
				N: [MOV(SIC0102.Out_SpeedRef,Slot3_AO_WAGO550.Ch2_Voltage) ,XIC(SIC0102.Out_Start) OTL(Wago_RIO:O.Data[14].2) ,XIC(SIC0102.Out_Stop) OTU(Wago_RIO:O.Data[14].2) ,XIC(SIC0102.Out_Fwd) OTU(Wago_RIO:O.Data[14].3) ,XIC(SIC0102.Out_Rev) OTL(Wago_RIO:O.Data[14].3) ];
				RC: "Feed Pump Totalizer";
				N: [[XIC(SIC0102.Sts_RunningFwd) ,XIC(SIC0102.Sts_JoggingFwd) ] MOV(SIC0102.Val_SpeedFdbk,FIQ0102.Inp_Flowrate) OTL(FIQ0102.CMD) ,[XIC(SIC0102.Sts_RunningRev) ,XIC(SIC0102.Sts_JoggingRev) ] MUL(SIC0102.Val_SpeedFdbk,-1,FIQ0102.Inp_Flowrate) OTL(FIQ0102.CMD) ,XIC(SIC0102.Sts_Stopped) MOV(0,FIQ0102.Inp_Flowrate) OTU(FIQ0102.CMD) ,MOV(1,FIQ0102.Inp_TimeBase) ,CM_Totalizer2(FIQ0102) ,XIC(FIQ0102.Cmd_Reset) OTU(FIQ0102.CMD) ,XIC(FIQ0102.Cmd_Reset) EQU(FIQ0102.Display_Totalized_Count,0) OTU(FIQ0102.Cmd_Reset) ];
		END_ROUTINE

		ROUTINE Rocker 
				RC: "==============================================================$N"
				    "Rocker Control$N"
				    "==============================================================";
				N: NOP();
				RC: "==============================================================$N"
				    "SIC-0401 - Rocker$N"
				    "==============================================================";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(SIC0401_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(SIC0401_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(SIC0401_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(SIC0401_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(SIC0401_Intlk.Inp_Intlk04) ,XIC(Global_HICritTemp) OTE(SIC0401_Intlk.Inp_Intlk05) ,P_Intlk(SIC0401_Intlk) ];
				RC: "Rocker Motor Control";
				N: [XIC(Start_Rocker) XIC(SIC0401_Intlk.Sts_IntlkOK) OTU(Harvest_Mode) OTL(SIC0401_Motor.PCmd_Start) ,[XIC(Stop_Rocker) ,XIO(SIC0401_Intlk.Sts_IntlkOK) ] OTU(Harvest_Mode) OTU(Start_Rocker) OTL(SIC0401_Motor.PCmd_Stop) ,XIC(Harvest_Mode) ONS(ONS.5) OTL(SIC0401_Motor.PCmd_Stop) ];
				N: [EQU(SIC0401_MsgDINTs[4],1) OTE(SIC0401_Motor.Inp_IOFault) ,OTL(SIC0401_Motor.PCmd_Prog) ,P_Motor(SIC0401_Motor) ,XIC(SIC0401_Motor.Out_Run) XIO(Harvest_Mode) MOV(2,SIC0401_MsgDINTs[0]) OTU(Start_Rocker) ,[XIC(SIC0401_Motor.Out_Stop) ,XIC(Stop_Rocker) ] XIO(Harvest_Mode) MOV(0,SIC0401_MsgDINTs[0]) OTU(Stop_Rocker) ,XIC(Harvest_Mode) XIC(SIC0401_Intlk.Sts_IntlkOK) MOV(1,SIC0401_MsgDINTs[0]) ];
				RC: "Rocker Speed Control";
				N: [OTL(SIC0401_Speed.PCmd_Prog) ,P_AOut(SIC0401_Speed) ,MOV(SIC0401_Speed.Out_CV,SIC0401_MsgDINTs[2]) ];
				RC: "Rocker Angle Control";
				N: [OTL(SIC0401_Angle.PCmd_Prog) ,P_AOut(SIC0401_Angle) ,MOV(SIC0401_Angle.Out_CV,SIC0401_MsgDINTs[1]) ];
				N: [EQU(SIC0401_MsgDINTs[4],1) XIC(GlobalReset.Out_Reset) MOV(1,SIC0401_MsgDINTs[3]) ,EQU(SIC0401_MsgDINTs[3],1) TON(ResetTimer,?,?) ,XIC(ResetTimer.DN) MOV(0,SIC0401_MsgDINTs[3]) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM CM_PBS (MAIN := "Main",
	                MODE := 0,
	                DisableFlag := 0,
	                UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE Main 
				N: JSR(PBS_MFCs,0);
		END_ROUTINE

		ROUTINE PBS_MFCs 
				N: [XIC(PlaceHolderIOFault[0].0) OTE(FIC110.Inp_IOFault) ,MOV(PlaceHolderFeedback1,FIC110.Inp_PosFdbk) ,P_ValveC(FIC110) ,MOV(FIC110.Out_CV,PlaceHolderOutput1) ];
				N: [XIC(PlaceHolderIOFault[0].1) OTE(FIC120.Inp_IOFault) ,MOV(PlaceHolderFeedback2,FIC110.Inp_PosFdbk) ,P_ValveC(FIC120) ,MOV(FIC120.Out_CV,PlaceHolderOutput2) ];
				N: [XIC(PlaceHolderIOFault[0].2) OTE(FIC130.Inp_IOFault) ,MOV(PlaceHolderFeedback3,FIC130.Inp_PosFdbk) ,P_ValveC(FIC130) ,MOV(FIC130.Out_CV,PlaceHolderOutput3) ];
				N: [XIC(PlaceHolderIOFault[0].3) OTE(FIC140.Inp_IOFault) ,MOV(PlaceHolderFeedback4,FIC140.Inp_PosFdbk) ,P_ValveC(FIC140) ,MOV(FIC140.Out_CV,PlaceHolderOutput4) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM CM_Valves (MAIN := "Main",
	                   MODE := 0,
	                   DisableFlag := 0,
	                   UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE Main 
				N: JSR(MFCs,0);
				N: JSR(Solenoid_Valves,0);
		END_ROUTINE

		ROUTINE MFCs 
				RC: "==============================================================$N"
				    "MFC Valve Control$N"
				    "==============================================================";
				N: NOP();
				RC: "==============================================================$N"
				    "Air MFC FIC-0111$N"
				    "==============================================================";
				N: NOP();
				RC: "Interlocks";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(FIC0111_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(FIC0111_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(FIC0111_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(FIC0111_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(FIC0111_Intlk.Inp_Intlk04) ,P_Intlk(FIC0111_Intlk) ];
				RC: "Control Module and Control Valve";
				N: [CM_MFC(CM_FIC0111,FIC0111,FIC0111_Intlk) ,XIC(Slot5_AO_WAGO555.Ch1_InputErr) OTE(FIC0111.Inp_IOFault) ,MOV(Slot1_AI_WAGO455.Ch1_Value,FIC0111.Inp_PosFdbk) ,P_ValveC(FIC0111) ,MOV(FIC0111.Out_CV,Slot5_AO_WAGO555.Ch1_Value) ];
				RC: "MFC Totalizer";
				N: [MOV(FIC0111.Val_Pos,FIQ0111.Inp_Flowrate) ,GRT(FIC0111.Val_Pos,1) XIO(FIQ0111.Cmd_Reset) OTE(FIQ0111.CMD) ,MOV(1,FIQ0111.Inp_TimeBase) ,CM_Totalizer2(FIQ0111) ,XIC(FIQ0111.Cmd_Reset) EQU(FIQ0111.Display_Totalized_Count,0) OTU(FIQ0111.Cmd_Reset) ];
				RC: "==============================================================$N"
				    "O2 MFC FIC-0112$N"
				    "==============================================================";
				N: NOP();
				RC: "Interlocks";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(FIC0112_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(FIC0112_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(FIC0112_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(FIC0112_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(FIC0112_Intlk.Inp_Intlk04) ,P_Intlk(FIC0112_Intlk) ];
				RC: "Control Module and Control Valve";
				N: [CM_MFC(CM_FIC0112,FIC0112,FIC0112_Intlk) ,XIC(Slot5_AO_WAGO555.Ch2_InputErr) OTE(FIC0112.Inp_IOFault) ,MOV(Slot1_AI_WAGO455.Ch2_Value,FIC0112.Inp_PosFdbk) ,P_ValveC(FIC0112) ,MOV(FIC0112.Out_CV,Slot5_AO_WAGO555.Ch2_Value) ];
				RC: "MFC Totalizer";
				N: [MOV(FIC0112.Val_Pos,FIQ0112.Inp_Flowrate) ,GRT(FIC0112.Val_Pos,1) XIO(FIQ0112.Cmd_Reset) OTE(FIQ0112.CMD) ,MOV(1,FIQ0112.Inp_TimeBase) ,CM_Totalizer2(FIQ0112) ,XIC(FIQ0112.Cmd_Reset) EQU(FIQ0112.Display_Totalized_Count,0) OTU(FIQ0112.Cmd_Reset) ];
				RC: "==============================================================$N"
				    "CO2 MFC FIC-0113$N"
				    "==============================================================";
				N: NOP();
				RC: "Interlocks";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(FIC0113_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(FIC0113_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(FIC0113_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(FIC0113_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(FIC0113_Intlk.Inp_Intlk04) ,P_Intlk(FIC0113_Intlk) ];
				RC: "Control Module and Control Valve";
				N: [CM_MFC(CM_FIC0113,FIC0113,FIC0113_Intlk) ,XIC(Slot5_AO_WAGO555.Ch3_InputErr) OTE(FIC0113.Inp_IOFault) ,MOV(Slot1_AI_WAGO455.Ch3_Value,FIC0113.Inp_PosFdbk) ,P_ValveC(FIC0113) ,MOV(FIC0113.Out_CV,Slot5_AO_WAGO555.Ch3_Value) ];
				RC: "MFC Totalizer";
				N: [MOV(FIC0113.Val_Pos,FIQ0113.Inp_Flowrate) ,GRT(FIC0113.Val_Pos,1) XIO(FIQ0113.Cmd_Reset) OTE(FIQ0113.CMD) ,CM_Totalizer2(FIQ0113) ];
		END_ROUTINE

		ROUTINE Solenoid_Valves 
				RC: "==============================================================$N"
				    "Discrete Valve Control$N"
				    "==============================================================";
				N: NOP();
				RC: "==============================================================$N"
				    "FV0111 - Air MFC Shutoff Valve$N"
				    "==============================================================";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(FV0111_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(FV0111_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(FV0111_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(FV0111_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(FV0111_Intlk.Inp_Intlk04) ,P_Intlk(FV0111_Intlk) ];
				N: [XIC(FV0111_Intlk.Sts_IntlkOK) OTE(FV0111.Inp_IntlkOK) ,P_ValveSO(FV0111) ,XIC(FV0111.Out) OTE(Wago_RIO:O.Data[12].0) ];
				N: [GRT(FIC0111.Val_Pos,1) [ONS(ONS.0) OTL(FV0111.PCmd_Prog) ,OTE(FV0111.PCmd_Open) ] ,LEQ(FIC0111.Val_Pos,1) OTE(FV0111.PCmd_Close) ];
				RC: "==============================================================$N"
				    "FV0112 - O2 MFC Shutoff Valve$N"
				    "==============================================================";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(FV0112_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(FV0112_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(FV0112_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(FV0112_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(FV0112_Intlk.Inp_Intlk04) ,P_Intlk(FV0112_Intlk) ];
				N: [XIC(FV0112_Intlk.Sts_IntlkOK) OTE(FV0112.Inp_IntlkOK) ,P_ValveSO(FV0112) ,XIC(FV0112.Out) OTE(Wago_RIO:O.Data[12].1) ];
				N: [GRT(FIC0112.Val_Pos,1) [ONS(ONS.1) OTL(FV0112.PCmd_Prog) ,OTE(FV0112.PCmd_Open) ] ,LEQ(FIC0112.Val_Pos,1) OTE(FV0112.PCmd_Close) ];
				RC: "==============================================================$N"
				    "FV0113 - CO2 MFC Shutoff Valve$N"
				    "==============================================================";
				N: [XIC(YZ0901.Alm_TgtDisagree) OTE(FV0113_Intlk.Inp_Intlk00) ,XIC(YZ0902.Alm_TgtDisagree) OTE(FV0113_Intlk.Inp_Intlk01) ,XIC(Startup_Active) OTE(FV0113_Intlk.Inp_Intlk02) ,XIC(XA0202A.Alm_TgtDisagree) OTE(FV0113_Intlk.Inp_Intlk03) ,XIC(XA0202B.Alm_TgtDisagree) OTE(FV0113_Intlk.Inp_Intlk04) ,P_Intlk(FV0113_Intlk) ];
				N: [XIC(FV0113_Intlk.Sts_IntlkOK) OTE(FV0113.Inp_IntlkOK) ,P_ValveSO(FV0113) ,XIC(FV0113.Out) OTE(Wago_RIO:O.Data[12].2) ];
				N: [GRT(FIC0113.Val_Pos,1) [ONS(ONS.2) OTL(FV0113.PCmd_Prog) ,OTE(FV0113.PCmd_Open) ] ,LEQ(FIC0113.Val_Pos,1) OTE(FV0113.PCmd_Close) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM EM_DOC (Description := "Disolved Oxygen Control Module",
	                MAIN := "Main",
	                MODE := 0,
	                DisableFlag := 0,
	                UseAsFolder := 0)
		TAG
			AirMFC_EU_HighLimit : REAL (Description := "Air MFC EU High Limit",
			            RADIX := Float,
			            Usage := Input) := 2.00000000e+003;
			AirMFC_EU_LowLimit : REAL (Description := "Air MFC EU Low Limit",
			            RADIX := Float,
			            Usage := Input) := 2.00000000e+002;
			AirMFC_PIDCV_HighLimit : REAL (Description := "Air MFC High PID CV Limit",
			            RADIX := Float,
			            Usage := Input) := 8.00000000e+001;
			AirMFC_PIDCV_LowLimit : REAL (Description := "Air MFC Low PID CV Limit",
			            RADIX := Float,
			            Usage := Input) := 0.00000000e+000;
			AirMFC_Scaler : SCALE  := [3,0.00000000e+000,8.00000000e+001,0.00000000e+000,2.00000000e+003,2.00000000e+002,1,2.00000000e+002
					,0,0.00000000e+000,8.00000000e+001,1.25000000e-002,2.00000000e+002];
			AirMFC_SP : REAL (Description := "Air MFC DO Control Setpoint",
			            RADIX := Float) := 2.00000000e+002;
			Delay : TIMER  := [0,3000,0];
			EM OF EM_DOC (COMMENT.PSET_SP1 := "Agitator Speed Command");
			Enable_AirMFCCntl : BOOL (Description := "Enable Air MFC Control from the HMI",
			            RADIX := Decimal,
			            Usage := Input) := 1;
			Enable_O2MFCCntl : BOOL (Description := "Enable O2 MFC Control from the HMI",
			            RADIX := Decimal,
			            Usage := Input) := 1;
			HMI_OperEnable : BOOL (Description := "Operator EM Enable from HMI",
			            RADIX := Decimal) := 1;
			HMI_OperStart : BOOL (Description := "Start Command From HMI in Operator Mode",
			            RADIX := Decimal,
			            Usage := Public) := 0;
			HMI_OperStop : BOOL (Description := "Stop Command From HMI in Operator Mode",
			            RADIX := Decimal,
			            Usage := Public) := 0;
			LowerCntlLimit : REAL (RADIX := Float) := 8.95000000e+001;
			O2MFC_EU_HighLimit : REAL (Description := "O2 MFC EU High Limit",
			            RADIX := Float,
			            Usage := Input) := 2.00000000e+003;
			O2MFC_EU_LowLimit : REAL (Description := "O2 MFC EU Low Limit",
			            RADIX := Float,
			            Usage := Input) := 0.00000000e+000;
			O2MFC_PIDCV_HighLimit : REAL (Description := "O2 MFC High PID CV Limit",
			            RADIX := Float,
			            Usage := Input) := 1.00000000e+002;
			O2MFC_PIDCV_LowLimit : REAL (Description := "O2 MFC Low PID CV Limit",
			            RADIX := Float,
			            Usage := Input) := 7.00000000e+001;
			O2MFC_Scaler : SCALE  := [3,0.00000000e+000,1.00000000e+002,7.00000000e+001,2.00000000e+003,0.00000000e+000,5,0.00000000e+000
					,0,0.00000000e+000,3.00000000e+001,3.33333351e-002,0.00000000e+000];
			O2MFC_SP : REAL (Description := "O2 MFC DO Control Setpoint",
			            RADIX := Float) := 0.00000000e+000;
			ONS : DINT (RADIX := Decimal) := 0;
			PIDCntl_MadeSetpoint : BOOL (Description := "PID Controller Made Setpoint",
			            RADIX := Decimal,
			            Usage := Output,
			            ExternalAccess := Read/Write) := 0;
			SP_Dev : REAL (Description := "Setpoint Deviation for PID to reach Setpoint",
			            RADIX := Float,
			            Usage := Input) := 5.00000000e-001;
			UpperCntlLimit : REAL (RADIX := Float) := 9.05000000e+001;
		END_TAG

		ROUTINE Main (Description := "DO Control")
				RC: "If the EM is being requested for ownership and the EM is not owned, move the resquested phase owner ID into the EM Owner ID value.$N"
				    "Once EM is Owned, Send the EM to Program Mode";
				N: XIC(EM.Cmd_Aquire)XIO(EM.Sts_EmOwned)GRT(EM.PSet_OwnerSel,0)MOV(EM.PSet_OwnerSel,EM.Val_Owner);
				N: GRT(EM.Val_Owner,0)[OTL(EM.Sts_EmOwned) OTU(EM.Cmd_Aquire) ,ONS(ONS.0) OTL(EM.PCmd_Prog) ];
				RC: "If the EM is being released fro ownership, move a 0 into the EM Owner ID value.";
				N: XIC(EM.Cmd_Release)MOV(0,EM.Val_Owner)OTU(EM.Sts_EmOwned)OTU(EM.Cmd_Release);
				RC: "If the requested state is equal to the current state, then the EM is in state";
				N: [EQU(EM.Val_State,EM.PSet_State) ,EQU(EM.PSet_State,0) ]OTE(EM.Sts_InState);
				N: XIO(EM.Sts_EmOwned)EQU(EM.PSet_State,1)[TON(Delay,?,?) ,XIC(Delay.DN) MOV(0,EM.PSet_State) RES(Delay) ];
				RC: "Mode Control - Lock the CMs associated with the EMwhen an EM Mode Lock is requested";
				N: [XIC(EM.PCmd_Lock) OTL(EM.Sts_Locked) ,XIO(EM.PCmd_Lock) OTU(EM.Sts_Locked) ];
				N: [[[XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ] ONS(ONS.1) ,XIC(EM.Sts_Locked) ] OTL(EM.Sts_ProgOper) ,[XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ] XIO(EM.Sts_Locked) ONS(ONS.2) OTU(EM.Sts_ProgOper) ];
				RC: "If the EM is in Program Mode, ONS Command the Owned CMs to Program Mode";
				N: [XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ,XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ][OTL(AIC0706.ProgProgReq) ,OTL(EM_MFC_Air.PCmd_Prog) ,OTL(EM_MFC_O2.PCmd_Prog) ][OTU(EM.PCmd_Prog) ,OTU(EM.OCmd_Prog) ,OTU(EM.OCmd_Oper) ,OTU(EM.PCmd_Oper) ];
				RC: "If all owned CM interlocks are okay, then EM Interlock Okay is true$N"
				    "If all owned CM permissives are okay, then EM Permissive Okay is true";
				N: XIC(AIC0706_Intlk.Sts_IntlkOK)XIC(FIC0111_Intlk.Sts_IntlkOK)XIC(FIC0112_Intlk.Sts_IntlkOK)OTE(EM.Sts_CMInlksOK);
				RC: "Control Deviation Logic used to tell when the controller has reached setpoint +/- the deviation setpoint";
				N: [ADD(EM.PSet_SP1,SP_Dev,UpperCntlLimit) ,SUB(EM.PSet_SP1,SP_Dev,LowerCntlLimit) ];
				N: LIM(LowerCntlLimit,AT0706.Val,UpperCntlLimit)OTE(PIDCntl_MadeSetpoint);
				RC: "HMI Logic";
				N: [XIC(HMI_OperStop) MOV(1,EM.PSet_State) OTU(HMI_OperStop) ,XIC(HMI_OperStart) MOV(2,EM.PSet_State) OTU(HMI_OperStart) ];
				N: JSR(Operation,0);
				N: JSR(OutputScaling,0);
		END_ROUTINE

		ROUTINE Operation 
				RC: "This routine controls the state of all CMs.$N"
				    "When an EM is commanded to a state, the CMs are commanded to their state.$N"
				    "When the CMs are all confirmed to be in their commanded state, then the EM in state bit is set to true";
				N: NOP();
				RC: "Set the state value at beginning of scan to 9999";
				N: MOV(9999,EM.Val_State);
				RC: "State 0 is the default, Null state";
				N: EQU(EM.PSet_State,0)NOP();
				RC: "State 1 - The Idle State";
				N: EQU(EM.PSet_State,1)[[XIC(Enable_AirMFCCntl) MOV(1,EM_MFC_Air.PSet_State) ,MOV(0,EM_MFC_Air.PSet_SP2) ] ,[XIC(Enable_O2MFCCntl) MOV(1,EM_MFC_O2.PSet_State) ,MOV(0,EM_MFC_O2.PSet_SP2) ] ];
				RC: "Feedback logic for State 1 - Idle. $N"
				    "";
				N: EQU(EM.PSet_State,1)MOV(1,EM.Val_State);
				RC: "State 2 - DO Control Active";
				N: EQU(EM.PSet_State,2)[ONS(ONS.3) OTL(AIC0706.ProgProgReq) OTL(AIC0706.ProgAutoReq) ,MOV(EM.PSet_SP1,AIC0706.SPProg) ,XIC(Enable_AirMFCCntl) [MOV(3,EM_MFC_Air.PSet_State) ,MOV(AirMFC_SP,EM_MFC_Air.PSet_SP2) ] ,XIC(Enable_O2MFCCntl) [MOV(3,EM_MFC_O2.PSet_State) ,MOV(O2MFC_SP,EM_MFC_O2.PSet_SP2) ] ];
				RC: "Feedback logic for State 2";
				N: EQU(EM.PSet_State,2)MOV(2,EM.Val_State);
		END_ROUTINE

		FBD_ROUTINE OutputScaling (Description := "Where the PID CV is scaled for each Slave Output",
		                           SheetSize := "Letter - 8.5 x 11 in",
		                           SheetOrientation := Landscape)
			SHEET  (Name := "Scale Slave Outputs")
				IREF  (ID := 0,
				       X := 260,
				       Y := 100,
				       Operand := "AIC0706.CVEU",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 1,
				       X := 260,
				       Y := 320,
				       Operand := "AIC0706.CVEU",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 2,
				       X := 260,
				       Y := 160,
				       Operand := "AirMFC_EU_HighLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 3,
				       X := 260,
				       Y := 180,
				       Operand := "AirMFC_EU_LowLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 4,
				       X := 260,
				       Y := 120,
				       Operand := "AirMFC_PIDCV_HighLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 5,
				       X := 260,
				       Y := 140,
				       Operand := "AirMFC_PIDCV_LowLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 6,
				       X := 260,
				       Y := 80,
				       Operand := "Enable_AirMFCCntl",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 7,
				       X := 260,
				       Y := 300,
				       Operand := "Enable_O2MFCCntl",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 8,
				       X := 260,
				       Y := 380,
				       Operand := "O2MFC_EU_HighLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 9,
				       X := 260,
				       Y := 400,
				       Operand := "O2MFC_EU_LowLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 10,
				       X := 260,
				       Y := 340,
				       Operand := "O2MFC_PIDCV_HighLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 11,
				       X := 260,
				       Y := 360,
				       Operand := "O2MFC_PIDCV_LowLimit",
				       HideDescription := No)
				END_IREF

				OREF  (ID := 12,
				       X := 640,
				       Y := 80,
				       Operand := "AirMFC_SP",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 13,
				       X := 640,
				       Y := 300,
				       Operand := "O2MFC_SP",
				       HideDescription := No)
				END_OREF

				SCL_BLOCK  (ID := 14,
				            X := 400,
				            Y := 20,
				            Operand := "AirMFC_Scaler",
				            VisiblePins := "EnableIn, In, InRawMax, InRawMin, InEUMax, InEUMin, Out",
				            HideDescription := No)
				END_SCL_BLOCK

				SCL_BLOCK  (ID := 15,
				            X := 400,
				            Y := 240,
				            Operand := "O2MFC_Scaler",
				            VisiblePins := "EnableIn, In, InRawMax, InRawMin, InEUMax, InEUMin, Out",
				            HideDescription := No)
				END_SCL_BLOCK

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 1,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "InEUMax")
				END_WIRE

				WIRE  (FromElementID := 3,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "InEUMin")
				END_WIRE

				WIRE  (FromElementID := 4,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "InRawMax")
				END_WIRE

				WIRE  (FromElementID := 5,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "InRawMin")
				END_WIRE

				WIRE  (FromElementID := 6,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "EnableIn")
				END_WIRE

				WIRE  (FromElementID := 7,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "EnableIn")
				END_WIRE

				WIRE  (FromElementID := 8,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "InEUMax")
				END_WIRE

				WIRE  (FromElementID := 9,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "InEUMin")
				END_WIRE

				WIRE  (FromElementID := 10,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "InRawMax")
				END_WIRE

				WIRE  (FromElementID := 11,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "InRawMin")
				END_WIRE

				WIRE  (FromElementID := 14,
				       FromParameter := "Out",
				       ToElementID := 12,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 15,
				       FromParameter := "Out",
				       ToElementID := 13,
				       ToParameter := "")
				END_WIRE

			END_SHEET

		END_FBD_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM EM_MFC_Air (Description := "Air MFC Equipment Module",
	                    MAIN := "Main",
	                    MODE := 0,
	                    DisableFlag := 0,
	                    UseAsFolder := 0)
		TAG
			Delay : TIMER (Description := "EM State Reset Delay") := [0,3000,0];
			EM OF EM_MFC_Air ;
			ONS : DINT (RADIX := Decimal) := 8;
		END_TAG

		ROUTINE Main 
				RC: "===============================================================$N"
				    "Air MFC Equipment Module Main Control$N"
				    "===============================================================";
				N: NOP();
				RC: "If the EM is being requested for ownership and the EM is not owned, move the resquested phase owner ID into the EM Owner ID value.$N"
				    "Once EM is Owned, Send the EM to Program Mode";
				N: XIC(EM.Cmd_Aquire)XIO(EM.Sts_EmOwned)GRT(EM.PSet_OwnerSel,0)MOV(EM.PSet_OwnerSel,EM.Val_Owner)MOV(EM.Val_Owner,CM_FIC0111.OwnerID);
				N: EQU(EM.Val_Owner,CM_FIC0111.OwnerID)GRT(EM.Val_Owner,0)[OTL(EM.Sts_EmOwned) OTU(EM.Cmd_Aquire) ,ONS(ONS.0) OTL(EM.PCmd_Prog) ];
				RC: "If the EM is being released fro ownership, move a 0 into the EM Owner ID value.";
				N: XIC(EM.Cmd_Release)MOV(0,EM.Val_Owner)MOV(EM.Val_Owner,CM_FIC0111.OwnerID)OTU(EM.Sts_EmOwned)OTU(EM.Cmd_Release);
				RC: "If the requested state is equal to the current state, then the EM is in state";
				N: [EQU(EM.Val_State,EM.PSet_State) ,EQU(EM.PSet_State,0) ]OTE(EM.Sts_InState);
				N: XIO(EM.Sts_EmOwned)EQU(EM.PSet_State,1)[TON(Delay,?,?) ,XIC(Delay.DN) MOV(0,EM.PSet_State) RES(Delay) ];
				RC: "Mode Control - Lock the CMs associated with the EMwhen an EM Mode Lock is requested";
				N: [XIC(EM.PCmd_Lock) OTL(EM.Sts_Locked) ,XIO(EM.PCmd_Lock) OTU(EM.Sts_Locked) ];
				N: [[[XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ] ONS(ONS.1) ,XIC(EM.Sts_Locked) ] OTL(EM.Sts_ProgOper) ,[XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ] XIO(EM.Sts_Locked) ONS(ONS.2) OTU(EM.Sts_ProgOper) ];
				RC: "If the EM is in Program Mode, ONS Command the Owned CMs to Program Mode";
				N: [XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ,XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ]OTL(FIC0111.PCmd_Prog)[OTU(EM.PCmd_Prog) ,OTU(EM.OCmd_Prog) ,OTU(EM.OCmd_Oper) ,OTU(EM.PCmd_Oper) ];
				N: [XIC(EM.Sts_Locked) OTE(FIC0111.PCmd_Lock) ,XIO(EM.Sts_Locked) OTE(FIC0111.PCmd_Unlock) ];
				RC: "If all owned CM interlocks are okay, then EM Interlock Okay is true$N"
				    "If all owned CM permissives are okay, then EM Permissive Okay is true";
				N: XIC(FIC0111_Intlk.Sts_IntlkOK)OTE(EM.Sts_CMInlksOK);
				N: JSR(Operation,0);
		END_ROUTINE

		ROUTINE Operation 
				RC: "This routine controls the state of all CMs.$N"
				    "When an EM is commanded to a state, the CMs are commanded to their state.$N"
				    "When the CMs are all confirmed to be in their commanded state, then the EM in state bit is set to true";
				N: NOP();
				RC: "Set the state value at beginning of scan to 9999";
				N: MOV(9999,EM.Val_State);
				RC: "State 0 is the default, Null state";
				N: EQU(EM.PSet_State,0)NOP();
				RC: "State 1 - The Idle State";
				N: EQU(EM.PSet_State,1)MOV(0,FIC0111.PSet_CV);
				RC: "Feedback logic for State 1 - Idle. $N"
				    "";
				N: EQU(EM.PSet_State,1)XIC(CM_FIC0111.Sts_Closed)MOV(1,EM.Val_State);
				RC: "State 2 - Command MFC to Setpoint";
				N: EQU(EM.PSet_State,2)MOV(EM.PSet_SP1,FIC0111.PSet_CV);
				RC: "Feedback logic for State 2";
				N: EQU(EM.PSet_State,2)XIC(CM_FIC0111.Sts_InPosition)MOV(2,EM.Val_State);
				RC: "State 3 - Command MFC to a Setpoint in DO Control";
				N: EQU(EM.PSet_State,3)MOV(EM.PSet_SP2,FIC0111.PSet_CV);
				RC: "Feedback logic for State 3";
				N: EQU(EM.PSet_State,3)XIC(CM_FIC0111.Sts_InPosition)MOV(3,EM.Val_State);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM EM_MFC_CO2 (Description := "CO2 MFC Equipment Module",
	                    MAIN := "Main",
	                    MODE := 0,
	                    DisableFlag := 0,
	                    UseAsFolder := 0)
		TAG
			Delay : TIMER (Description := "EM State Reset Delay") := [0,3000,0];
			EM OF EM_MFC_CO2 ;
			ONS : DINT (RADIX := Decimal) := 8;
		END_TAG

		ROUTINE Main 
				RC: "===============================================================$N"
				    "Air MFC Equipment Module Main Control$N"
				    "===============================================================";
				N: NOP();
				RC: "If the EM is being requested for ownership and the EM is not owned, move the resquested phase owner ID into the EM Owner ID value.$N"
				    "Once EM is Owned, Send the EM to Program Mode";
				N: XIC(EM.Cmd_Aquire)XIO(EM.Sts_EmOwned)GRT(EM.PSet_OwnerSel,0)MOV(EM.PSet_OwnerSel,EM.Val_Owner)MOV(EM.Val_Owner,CM_FIC0113.OwnerID);
				N: EQU(EM.Val_Owner,CM_FIC0113.OwnerID)GRT(EM.Val_Owner,0)[OTL(EM.Sts_EmOwned) OTU(EM.Cmd_Aquire) ,ONS(ONS.0) OTL(EM.PCmd_Prog) ];
				RC: "If the EM is being released fro ownership, move a 0 into the EM Owner ID value.";
				N: XIC(EM.Cmd_Release)MOV(0,EM.Val_Owner)MOV(EM.Val_Owner,CM_FIC0113.OwnerID)OTU(EM.Sts_EmOwned)OTU(EM.Cmd_Release);
				RC: "If the requested state is equal to the current state, then the EM is in state";
				N: [EQU(EM.Val_State,EM.PSet_State) ,EQU(EM.PSet_State,0) ]OTE(EM.Sts_InState);
				N: XIO(EM.Sts_EmOwned)EQU(EM.PSet_State,1)[TON(Delay,?,?) ,XIC(Delay.DN) MOV(0,EM.PSet_State) RES(Delay) ];
				RC: "Mode Control - Lock the CMs associated with the EMwhen an EM Mode Lock is requested";
				N: [XIC(EM.PCmd_Lock) OTL(EM.Sts_Locked) ,XIO(EM.PCmd_Lock) OTU(EM.Sts_Locked) ];
				N: [[[XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ] ONS(ONS.1) ,XIC(EM.Sts_Locked) ] OTL(EM.Sts_ProgOper) ,[XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ] XIO(EM.Sts_Locked) ONS(ONS.2) OTU(EM.Sts_ProgOper) ];
				RC: "If the EM is in Program Mode, ONS Command the Owned CMs to Program Mode";
				N: [XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ,XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ]OTL(FIC0113.PCmd_Prog)[OTU(EM.PCmd_Prog) ,OTU(EM.OCmd_Prog) ,OTU(EM.OCmd_Oper) ,OTU(EM.PCmd_Oper) ];
				N: [XIC(EM.Sts_Locked) OTE(FIC0113.PCmd_Lock) ,XIO(EM.Sts_Locked) OTE(FIC0113.PCmd_Unlock) ];
				RC: "If all owned CM interlocks are okay, then EM Interlock Okay is true$N"
				    "If all owned CM permissives are okay, then EM Permissive Okay is true";
				N: XIC(FIC0113_Intlk.Sts_IntlkOK)OTE(EM.Sts_CMInlksOK);
				N: JSR(Operation,0);
		END_ROUTINE

		ROUTINE Operation 
				RC: "This routine controls the state of all CMs.$N"
				    "When an EM is commanded to a state, the CMs are commanded to their state.$N"
				    "When the CMs are all confirmed to be in their commanded state, then the EM in state bit is set to true";
				N: NOP();
				RC: "Set the state value at beginning of scan to 9999";
				N: MOV(9999,EM.Val_State);
				RC: "State 0 is the default, Null state";
				N: EQU(EM.PSet_State,0)NOP();
				RC: "State 1 - The Idle State";
				N: EQU(EM.PSet_State,1)MOV(0,FIC0113.PSet_CV);
				RC: "Feedback logic for State 1 - Idle. $N"
				    "";
				N: EQU(EM.PSet_State,1)XIC(CM_FIC0113.Sts_Closed)MOV(1,EM.Val_State);
				RC: "State 2 - Command MFC to Setpoint";
				N: EQU(EM.PSet_State,2)MOV(EM.PSet_SP1,FIC0113.PSet_CV);
				RC: "Feedback logic for State 2";
				N: EQU(EM.PSet_State,2)XIC(CM_FIC0113.Sts_InPosition)MOV(2,EM.Val_State);
				RC: "State 3 - Command MFC to a Setpoint in pH Control";
				N: EQU(EM.PSet_State,3)MOV(EM.PSet_SP2,FIC0113.PSet_CV);
				RC: "Feedback logic for State 3";
				N: EQU(EM.PSet_State,3)XIC(CM_FIC0113.Sts_InPosition)MOV(3,EM.Val_State);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM EM_MFC_O2 (Description := "O2 MFC Equipment Module",
	                   MAIN := "Main",
	                   MODE := 0,
	                   DisableFlag := 0,
	                   UseAsFolder := 0)
		TAG
			Delay : TIMER (Description := "EM State Reset Delay") := [0,3000,0];
			EM OF EM_MFC_O2 ;
			ONS : DINT (RADIX := Decimal) := 8;
		END_TAG

		ROUTINE Main 
				RC: "===============================================================$N"
				    "Air MFC Equipment Module Main Control$N"
				    "===============================================================";
				N: NOP();
				RC: "If the EM is being requested for ownership and the EM is not owned, move the resquested phase owner ID into the EM Owner ID value.$N"
				    "Once EM is Owned, Send the EM to Program Mode";
				N: XIC(EM.Cmd_Aquire)XIO(EM.Sts_EmOwned)GRT(EM.PSet_OwnerSel,0)MOV(EM.PSet_OwnerSel,EM.Val_Owner)MOV(EM.Val_Owner,CM_FIC0112.OwnerID);
				N: EQU(EM.Val_Owner,CM_FIC0112.OwnerID)GRT(EM.Val_Owner,0)[OTL(EM.Sts_EmOwned) OTU(EM.Cmd_Aquire) ,ONS(ONS.0) OTL(EM.PCmd_Prog) ];
				RC: "If the EM is being released fro ownership, move a 0 into the EM Owner ID value.";
				N: XIC(EM.Cmd_Release)MOV(0,EM.Val_Owner)MOV(EM.Val_Owner,CM_FIC0112.OwnerID)OTU(EM.Sts_EmOwned)OTU(EM.Cmd_Release);
				RC: "If the requested state is equal to the current state, then the EM is in state";
				N: [EQU(EM.Val_State,EM.PSet_State) ,EQU(EM.PSet_State,0) ]OTE(EM.Sts_InState);
				N: XIO(EM.Sts_EmOwned)EQU(EM.PSet_State,1)[TON(Delay,?,?) ,XIC(Delay.DN) MOV(0,EM.PSet_State) RES(Delay) ];
				RC: "Mode Control - Lock the CMs associated with the EMwhen an EM Mode Lock is requested";
				N: [XIC(EM.PCmd_Lock) OTL(EM.Sts_Locked) ,XIO(EM.PCmd_Lock) OTU(EM.Sts_Locked) ];
				N: [[[XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ] ONS(ONS.1) ,XIC(EM.Sts_Locked) ] OTL(EM.Sts_ProgOper) ,[XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ] XIO(EM.Sts_Locked) ONS(ONS.2) OTU(EM.Sts_ProgOper) ];
				RC: "If the EM is in Program Mode, ONS Command the Owned CMs to Program Mode";
				N: [XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ,XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ]OTL(FIC0112.PCmd_Prog)[OTU(EM.PCmd_Prog) ,OTU(EM.OCmd_Prog) ,OTU(EM.OCmd_Oper) ,OTU(EM.PCmd_Oper) ];
				N: [XIC(EM.Sts_Locked) OTE(FIC0112.PCmd_Lock) ,XIO(EM.Sts_Locked) OTE(FIC0112.PCmd_Unlock) ];
				RC: "If all owned CM interlocks are okay, then EM Interlock Okay is true$N"
				    "If all owned CM permissives are okay, then EM Permissive Okay is true";
				N: XIC(FIC0112_Intlk.Sts_IntlkOK)OTE(EM.Sts_CMInlksOK);
				N: JSR(Operation,0);
		END_ROUTINE

		ROUTINE Operation 
				RC: "This routine controls the state of all CMs.$N"
				    "When an EM is commanded to a state, the CMs are commanded to their state.$N"
				    "When the CMs are all confirmed to be in their commanded state, then the EM in state bit is set to true";
				N: NOP();
				RC: "Set the state value at beginning of scan to 9999";
				N: MOV(9999,EM.Val_State);
				RC: "State 0 is the default, Null state";
				N: EQU(EM.PSet_State,0)NOP();
				RC: "State 1 - The Idle State";
				N: EQU(EM.PSet_State,1)MOV(0,FIC0112.PSet_CV);
				RC: "Feedback logic for State 1 - Idle. $N"
				    "";
				N: EQU(EM.PSet_State,1)XIC(CM_FIC0112.Sts_Closed)MOV(1,EM.Val_State);
				RC: "State 2 - Command MFC to Setpoint";
				N: EQU(EM.PSet_State,2)MOV(EM.PSet_SP1,FIC0112.PSet_CV);
				RC: "Feedback logic for State 2";
				N: EQU(EM.PSet_State,2)XIC(CM_FIC0112.Sts_InPosition)MOV(2,EM.Val_State);
				RC: "State 3 - Command MFC to a Setpoint in DO Control";
				N: EQU(EM.PSet_State,3)MOV(EM.PSet_SP2,FIC0112.PSet_CV);
				RC: "Feedback logic for State 3";
				N: EQU(EM.PSet_State,3)XIC(CM_FIC0112.Sts_InPosition)MOV(3,EM.Val_State);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM EM_PHC (Description := "pH Equipment Module",
	                MAIN := "Main",
	                MODE := 0,
	                DisableFlag := 0,
	                UseAsFolder := 0)
		TAG
			Acid_EU_HighLimit : REAL (Description := "Air MFC EU High Limit",
			            RADIX := Float,
			            Usage := Input) := 2.00000000e+003;
			Acid_EU_LowLimit : REAL (Description := "Air MFC EU Low Limit",
			            RADIX := Float,
			            Usage := Input) := 1.00000000e+002;
			Acid_PIDCV_HighLimit : REAL (Description := "Air MFC High PID CV Limit",
			            RADIX := Float,
			            Usage := Input) := 4.90000000e+001;
			Acid_PIDCV_LowLimit : REAL (Description := "Air MFC Low PID CV Limit",
			            RADIX := Float,
			            Usage := Input) := 0.00000000e+000;
			Acid_Scaler : SCALE  := [3,5.00000000e+001,4.90000000e+001,0.00000000e+000,1.00000000e+002,2.00000000e+003,3,1.00000000e+002
					,0,0.00000000e+000,4.90000000e+001,2.04081628e-002,1.00000000e+002];
			Acid_SP : REAL (Description := "Air MFC DO Control Setpoint",
			            RADIX := Float) := 1.00000000e+002;
			Base_EU_HighLimit : REAL (Description := "Agitator EU High Limit",
			            RADIX := Float,
			            Usage := Input) := 1.00000000e+001;
			Base_EU_LowLimit : REAL (Description := "Agitator EU Low Limit",
			            RADIX := Float,
			            Usage := Input) := 0.00000000e+000;
			Base_PIDCV_HighLimit : REAL (Description := "Agitator High PID CV Limit",
			            RADIX := Float,
			            Usage := Input) := 1.00000000e+002;
			Base_PIDCV_LowLimit : REAL (Description := "Agitator Low PID CV Limit",
			            RADIX := Float,
			            Usage := Input) := 5.10000000e+001;
			Base_Scaler : SCALE  := [3,5.00000000e+001,1.00000000e+002,5.10000000e+001,1.00000000e+001,0.00000000e+000,5,0.00000000e+000
					,0,0.00000000e+000,4.90000000e+001,2.04081628e-002,0.00000000e+000];
			Base_SP : REAL (Description := "Agitator DO Control Setpoint",
			            RADIX := Float) := 0.00000000e+000;
			Delay : TIMER  := [0,3000,0];
			EM OF EM_PHC (COMMENT.PSET_SP1 := "Agitator Speed Command");
			Enable_AcidCntl : BOOL (Description := "Enable Air MFC Control from the HMI",
			            RADIX := Decimal) := 1;
			Enable_BaseCntl : BOOL (Description := "Enable Agitator Control from the HMI",
			            RADIX := Decimal) := 1;
			HMI_OperEnable : BOOL (Description := "Operator EM Enable from HMI",
			            RADIX := Decimal) := 1;
			HMI_OperStart : BOOL (Description := "Start Command From HMI in Operator Mode",
			            RADIX := Decimal,
			            Usage := Public) := 0;
			HMI_OperStop : BOOL (Description := "Stop Command From HMI in Operator Mode",
			            RADIX := Decimal,
			            Usage := Public) := 0;
			LowerCntlLimit : REAL (RADIX := Float) := 7.50000000e+000;
			ONS : DINT (RADIX := Decimal) := 16;
			PIDCntl_MadeSetpoint : BOOL (Description := "PID Controller Made Setpoint",
			            RADIX := Decimal,
			            Usage := Output,
			            ExternalAccess := Read/Write) := 0;
			SP_Dev : REAL (Description := "Setpoint Deviation for PID to reach Setpoint",
			            RADIX := Float,
			            Usage := Input) := 5.00000000e-001;
			UpperCntlLimit : REAL (RADIX := Float) := 8.50000000e+000;
		END_TAG

		ROUTINE Main (Description := "DO Control")
				N: NOP();
				RC: "If the EM is being requested for ownership and the EM is not owned, move the resquested phase owner ID into the EM Owner ID value.$N"
				    "Once EM is Owned, Send the EM to Program Mode";
				N: XIC(EM.Cmd_Aquire)XIO(EM.Sts_EmOwned)GRT(EM.PSet_OwnerSel,0)MOV(EM.PSet_OwnerSel,EM.Val_Owner);
				N: GRT(EM.Val_Owner,0)[OTL(EM.Sts_EmOwned) OTU(EM.Cmd_Aquire) ,ONS(ONS.0) OTL(EM.PCmd_Prog) ];
				RC: "If the EM is being released fro ownership, move a 0 into the EM Owner ID value.";
				N: XIC(EM.Cmd_Release)MOV(0,EM.Val_Owner)OTU(EM.Sts_EmOwned)OTU(EM.Cmd_Release);
				RC: "If the requested state is equal to the current state, then the EM is in state";
				N: [EQU(EM.Val_State,EM.PSet_State) ,EQU(EM.PSet_State,0) ]OTE(EM.Sts_InState);
				N: XIO(EM.Sts_EmOwned)EQU(EM.PSet_State,1)[TON(Delay,?,?) ,XIC(Delay.DN) MOV(0,EM.PSet_State) RES(Delay) ];
				RC: "Mode Control - Lock the CMs associated with the EMwhen an EM Mode Lock is requested";
				N: [XIC(EM.PCmd_Lock) OTL(EM.Sts_Locked) ,XIO(EM.PCmd_Lock) OTU(EM.Sts_Locked) ];
				N: [[[XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ] ONS(ONS.1) ,XIC(EM.Sts_Locked) ] OTL(EM.Sts_ProgOper) ,[XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ] XIO(EM.Sts_Locked) ONS(ONS.2) OTU(EM.Sts_ProgOper) ];
				RC: "If the EM is in Program Mode, ONS Command the Owned CMs to Program Mode";
				N: [XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ,XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ][OTL(AIC0707.ProgProgReq) ,OTL(EM_MFC_CO2.PCmd_Prog) ,OTL(EM_Pump_Base.PCmd_Prog) ][OTU(EM.PCmd_Prog) ,OTU(EM.OCmd_Prog) ,OTU(EM.OCmd_Oper) ,OTU(EM.PCmd_Oper) ];
				RC: "If all owned CM interlocks are okay, then EM Interlock Okay is true";
				N: XIC(AIC0707_Intlk.Sts_IntlkOK)XIC(FIC0113_Intlk.Sts_IntlkOK)XIC(SIC0101_Intlk.Sts_IntlkOK)OTE(EM.Sts_CMInlksOK);
				RC: "Control Deviation Logic used to tell when the controller has reached setpoint +/- the deviation setpoint";
				N: [ADD(EM.PSet_SP1,SP_Dev,UpperCntlLimit) ,SUB(EM.PSet_SP1,SP_Dev,LowerCntlLimit) ];
				N: LIM(LowerCntlLimit,AT0707.Val,UpperCntlLimit)OTE(PIDCntl_MadeSetpoint);
				RC: "HMI Logic";
				N: [XIC(HMI_OperStop) MOV(1,EM.PSet_State) OTU(HMI_OperStop) ,XIC(HMI_OperStart) MOV(2,EM.PSet_State) OTU(HMI_OperStart) ];
				N: JSR(Operation,0);
				N: JSR(OutputScaling,0);
		END_ROUTINE

		ROUTINE Operation 
				RC: "This routine controls the state of all CMs.$N"
				    "When an EM is commanded to a state, the CMs are commanded to their state.$N"
				    "When the CMs are all confirmed to be in their commanded state, then the EM in state bit is set to true";
				N: NOP();
				RC: "Set the state value at beginning of scan to 9999";
				N: MOV(9999,EM.Val_State);
				RC: "State 0 is the default, Null state";
				N: EQU(EM.PSet_State,0)NOP();
				RC: "State 1 - The Idle State";
				N: EQU(EM.PSet_State,1)[[XIC(Enable_BaseCntl) MOV(1,EM_Pump_Base.PSet_State) ,MOV(0,EM_Pump_Base.PSet_SP2) ] ,[XIC(Enable_AcidCntl) MOV(1,EM_MFC_CO2.PSet_State) ,MOV(0,EM_MFC_CO2.PSet_SP2) ] ];
				RC: "Feedback logic for State 1 - Idle. $N"
				    "";
				N: EQU(EM.PSet_State,1)MOV(1,EM.Val_State);
				RC: "State 2 pH Control Active";
				N: EQU(EM.PSet_State,2)[ONS(ONS.3) OTE(AIC0707.CVInitReq) OTL(AIC0707.ProgProgReq) OTL(AIC0707.ProgAutoReq) ,MOV(EM.PSet_SP1,AIC0707.SPProg) ,[XIC(Enable_BaseCntl) MOV(5,EM_Pump_Base.PSet_State) ,MOV(Base_SP,EM_Pump_Base.PSet_SP2) ] ,[XIC(Enable_AcidCntl) MOV(3,EM_MFC_CO2.PSet_State) ,MOV(Acid_SP,EM_MFC_CO2.PSet_SP2) ] ];
				RC: "Feedback logic for State 2";
				N: EQU(EM.PSet_State,2)MOV(2,EM.Val_State);
		END_ROUTINE

		FBD_ROUTINE OutputScaling (Description := "Where the PID CV is scaled for each Slave Output",
		                           SheetSize := "Letter - 8.5 x 11 in",
		                           SheetOrientation := Landscape)
			SHEET  (Name := "Scale Slave Outputs")
				IREF  (ID := 0,
				       X := 220,
				       Y := 120,
				       Operand := "AIC0707.CVEU",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 1,
				       X := 220,
				       Y := 340,
				       Operand := "AIC0707.CVEU",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 2,
				       X := 220,
				       Y := 420,
				       Operand := "Acid_EU_HighLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 3,
				       X := 220,
				       Y := 400,
				       Operand := "Acid_EU_LowLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 4,
				       X := 240,
				       Y := 360,
				       Operand := "Acid_PIDCV_HighLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 5,
				       X := 240,
				       Y := 380,
				       Operand := "Acid_PIDCV_LowLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 6,
				       X := 220,
				       Y := 180,
				       Operand := "Base_EU_HighLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 7,
				       X := 220,
				       Y := 200,
				       Operand := "Base_EU_LowLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 8,
				       X := 220,
				       Y := 140,
				       Operand := "Base_PIDCV_HighLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 9,
				       X := 220,
				       Y := 160,
				       Operand := "Base_PIDCV_LowLimit",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 10,
				       X := 220,
				       Y := 320,
				       Operand := "Enable_AcidCntl",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 11,
				       X := 220,
				       Y := 100,
				       Operand := "Enable_BaseCntl",
				       HideDescription := No)
				END_IREF

				OREF  (ID := 12,
				       X := 600,
				       Y := 320,
				       Operand := "Acid_SP",
				       HideDescription := No)
				END_OREF

				OREF  (ID := 13,
				       X := 600,
				       Y := 100,
				       Operand := "Base_SP",
				       HideDescription := No)
				END_OREF

				SCL_BLOCK  (ID := 14,
				            X := 360,
				            Y := 260,
				            Operand := "Acid_Scaler",
				            VisiblePins := "EnableIn, In, InRawMax, InRawMin, InEUMax, InEUMin, Out",
				            HideDescription := No)
				END_SCL_BLOCK

				SCL_BLOCK  (ID := 15,
				            X := 360,
				            Y := 40,
				            Operand := "Base_Scaler",
				            VisiblePins := "EnableIn, In, InRawMax, InRawMin, InEUMax, InEUMin, Out",
				            HideDescription := No)
				END_SCL_BLOCK

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 1,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "InEUMin")
				END_WIRE

				WIRE  (FromElementID := 3,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "InEUMax")
				END_WIRE

				WIRE  (FromElementID := 4,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "InRawMax")
				END_WIRE

				WIRE  (FromElementID := 5,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "InRawMin")
				END_WIRE

				WIRE  (FromElementID := 6,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "InEUMax")
				END_WIRE

				WIRE  (FromElementID := 7,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "InEUMin")
				END_WIRE

				WIRE  (FromElementID := 8,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "InRawMax")
				END_WIRE

				WIRE  (FromElementID := 9,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "InRawMin")
				END_WIRE

				WIRE  (FromElementID := 10,
				       FromParameter := "",
				       ToElementID := 14,
				       ToParameter := "EnableIn")
				END_WIRE

				WIRE  (FromElementID := 11,
				       FromParameter := "",
				       ToElementID := 15,
				       ToParameter := "EnableIn")
				END_WIRE

				WIRE  (FromElementID := 14,
				       FromParameter := "Out",
				       ToElementID := 12,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 15,
				       FromParameter := "Out",
				       ToElementID := 13,
				       ToParameter := "")
				END_WIRE

			END_SHEET

		END_FBD_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM EM_Pump_Base (Description := "Base Pump Equipment Module",
	                      MAIN := "Main",
	                      MODE := 0,
	                      DisableFlag := 0,
	                      UseAsFolder := 0)
		TAG
			Delay : TIMER (Description := "EM State Reset Delay") := [0,3000,0];
			EM OF EM_Pump_Base ;
			ONS : DINT (RADIX := Decimal) := 8;
		END_TAG

		ROUTINE Main 
				N: NOP();
				RC: "If the EM is being requested for ownership and the EM is not owned, move the resquested phase owner ID into the EM Owner ID value.$N"
				    "Once EM is Owned, Send the EM to Program Mode";
				N: XIC(EM.Cmd_Aquire)XIO(EM.Sts_EmOwned)GRT(EM.PSet_OwnerSel,0)MOV(EM.PSet_OwnerSel,EM.Val_Owner)MOV(EM.Val_Owner,CM_SIC0101.OwnerID);
				N: EQU(EM.PSet_OwnerSel,CM_SIC0101.OwnerID)GRT(EM.Val_Owner,0)[OTL(EM.Sts_EmOwned) OTU(EM.Cmd_Aquire) ,ONS(ONS.0) OTL(EM.PCmd_Prog) ];
				RC: "If the EM is being released fro ownership, move a 0 into the EM Owner ID value.";
				N: XIC(EM.Cmd_Release)MOV(0,EM.Val_Owner)MOV(EM.Val_Owner,CM_SIC0101.OwnerID)OTU(EM.Sts_EmOwned)OTU(EM.Cmd_Release);
				RC: "If the requested state is equal to the current state, then the EM is in state";
				N: [EQU(EM.Val_State,EM.PSet_State) ,EQU(EM.PSet_State,0) ]OTE(EM.Sts_InState);
				N: XIO(EM.Sts_EmOwned)EQU(EM.PSet_State,1)[TON(Delay,?,?) ,XIC(Delay.DN) MOV(0,EM.PSet_State) RES(Delay) ];
				RC: "Mode Control - Lock the CMs associated with the EMwhen an EM Mode Lock is requested";
				N: [XIC(EM.PCmd_Lock) OTL(EM.Sts_Locked) ,XIO(EM.PCmd_Lock) OTU(EM.Sts_Locked) ];
				N: [[[XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ] ONS(ONS.1) ,XIC(EM.Sts_Locked) ] OTL(EM.Sts_ProgOper) ,[XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ] XIO(EM.Sts_Locked) ONS(ONS.2) OTU(EM.Sts_ProgOper) ];
				RC: "If the EM is in Program Mode, ONS Command the Owned CMs to Program Mode";
				N: [XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ,XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ]OTL(SIC0101.PCmd_Prog)[OTU(EM.PCmd_Prog) ,OTU(EM.OCmd_Prog) ,OTU(EM.OCmd_Oper) ,OTU(EM.PCmd_Oper) ];
				N: [XIC(EM.Sts_Locked) OTE(SIC0101.PCmd_Lock) ,XIO(EM.Sts_Locked) OTE(SIC0101.PCmd_Unlock) ];
				RC: "If all owned CM interlocks are okay, then EM Interlock Okay is true";
				N: XIC(SIC0101_Intlk.Sts_IntlkOK)OTE(EM.Sts_CMInlksOK);
				N: JSR(Operation,0);
		END_ROUTINE

		ROUTINE Operation 
				RC: "This routine controls the state of all CMs.$N"
				    "When an EM is commanded to a state, the CMs are commanded to their state.$N"
				    "When the CMs are all confirmed to be in their commanded state, then the EM in state bit is set to true";
				N: NOP();
				RC: "Set the state value at beginning of scan to 9999";
				N: MOV(9999,EM.Val_State);
				RC: "State 0 is the default, Null state";
				N: EQU(EM.PSet_State,0)NOP();
				RC: "State 1 - The Idle State";
				N: EQU(EM.PSet_State,1)[OTL(SIC0101.PCmd_Stop) ,MOV(0,SIC0101.PSet_SpeedRef) ];
				RC: "Feedback logic for State 1 - Idle. $N"
				    "";
				N: EQU(EM.PSet_State,1)XIC(SIC0101.Sts_Stopped)MOV(1,EM.Val_State);
				RC: "State 2 - Run Forward at Speed";
				N: EQU(EM.PSet_State,2)[GRT(SIC0101.PSet_SpeedRef,0) OTL(SIC0101.PCmd_StartFwd) ,LEQ(SIC0101.PSet_SpeedRef,0) OTL(SIC0101.PCmd_Stop) ,MOV(EM.PSet_SP1,SIC0101.PSet_SpeedRef) ];
				RC: "Feedback logic for State 2";
				N: EQU(EM.PSet_State,2)XIC(SIC0101.Sts_RunningFwd)XIC(CM_SIC0101.Sts_InPosition)MOV(2,EM.Val_State);
				RC: "State 3 - Run Reverse";
				N: EQU(EM.PSet_State,3)[GRT(SIC0101.PSet_SpeedRef,0) OTL(SIC0101.PCmd_StartRev) ,LEQ(SIC0101.PSet_SpeedRef,0) OTL(SIC0101.PCmd_Stop) ,MOV(EM.PSet_SP1,SIC0101.PSet_SpeedRef) ];
				RC: "Feedback logic for State 3";
				N: EQU(EM.PSet_State,3)XIC(SIC0101.Sts_RunningRev)XIC(CM_SIC0101.Sts_InPosition)MOV(3,EM.Val_State);
				RC: "State 5 - Run Forward at Speed for pH Control";
				N: EQU(EM.PSet_State,5)[GRT(SIC0101.PSet_SpeedRef,0) OTL(SIC0101.PCmd_StartFwd) ,LEQ(SIC0101.PSet_SpeedRef,0) OTL(SIC0101.PCmd_Stop) ,MOV(EM.PSet_SP2,SIC0101.PSet_SpeedRef) ];
				RC: "Feedback logic for State 5";
				N: EQU(EM.PSet_State,5)XIC(SIC0101.Sts_RunningFwd)XIC(CM_SIC0101.Sts_InPosition)MOV(5,EM.Val_State);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM EM_Pump_Feed (Description := "Feed Pump Equipment Module",
	                      MAIN := "Main",
	                      MODE := 0,
	                      DisableFlag := 0,
	                      UseAsFolder := 0)
		TAG
			Delay : TIMER (Description := "EM State Reset Delay") := [1079137,3000,0];
			EM OF EM_Pump_Feed ;
			ONS : DINT (RADIX := Decimal) := 0;
		END_TAG

		ROUTINE Main 
				N: NOP();
				RC: "If the EM is being requested for ownership and the EM is not owned, move the resquested phase owner ID into the EM Owner ID value.$N"
				    "Once EM is Owned, Send the EM to Program Mode";
				N: XIC(EM.Cmd_Aquire)XIO(EM.Sts_EmOwned)GRT(EM.PSet_OwnerSel,0)MOV(EM.PSet_OwnerSel,EM.Val_Owner)MOV(EM.Val_Owner,CM_SIC0102.OwnerID);
				N: EQU(EM.PSet_OwnerSel,CM_SIC0102.OwnerID)GRT(EM.Val_Owner,0)[OTL(EM.Sts_EmOwned) OTU(EM.Cmd_Aquire) ,ONS(ONS.0) OTL(EM.PCmd_Prog) ];
				RC: "If the EM is being released fro ownership, move a 0 into the EM Owner ID value.";
				N: XIC(EM.Cmd_Release)MOV(0,EM.Val_Owner)MOV(EM.Val_Owner,CM_SIC0102.OwnerID)OTU(EM.Sts_EmOwned)OTU(EM.Cmd_Release);
				RC: "If the requested state is equal to the current state, then the EM is in state";
				N: [EQU(EM.Val_State,EM.PSet_State) ,EQU(EM.PSet_State,0) ]OTE(EM.Sts_InState);
				N: XIO(EM.Sts_EmOwned)EQU(EM.PSet_State,1)[TON(Delay,?,?) ,XIC(Delay.DN) MOV(0,EM.PSet_State) RES(Delay) ];
				RC: "Mode Control - Lock the CMs associated with the EMwhen an EM Mode Lock is requested";
				N: [XIC(EM.PCmd_Lock) OTL(EM.Sts_Locked) ,XIO(EM.PCmd_Lock) OTU(EM.Sts_Locked) ];
				N: [[[XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ] ONS(ONS.1) ,XIC(EM.Sts_Locked) ] OTL(EM.Sts_ProgOper) ,[XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ] XIO(EM.Sts_Locked) ONS(ONS.2) OTU(EM.Sts_ProgOper) ];
				RC: "If the EM is in Program Mode, ONS Command the Owned CMs to Program Mode";
				N: [XIC(EM.PCmd_Prog) ,XIC(EM.OCmd_Prog) ,XIC(EM.OCmd_Oper) ,XIC(EM.PCmd_Oper) ]OTL(SIC0102.PCmd_Prog)[OTU(EM.PCmd_Prog) ,OTU(EM.OCmd_Prog) ,OTU(EM.OCmd_Oper) ,OTU(EM.PCmd_Oper) ];
				N: [XIC(EM.Sts_Locked) OTE(SIC0102.PCmd_Lock) ,XIO(EM.Sts_Locked) OTE(SIC0102.PCmd_Unlock) ];
				RC: "If all owned CM interlocks are okay, then EM Interlock Okay is true";
				N: XIC(SIC0102_Intlk.Sts_IntlkOK)OTE(EM.Sts_CMInlksOK);
				N: JSR(Operation,0);
		END_ROUTINE

		ROUTINE Operation 
				RC: "This routine controls the state of all CMs.$N"
				    "When an EM is commanded to a state, the CMs are commanded to their state.$N"
				    "When the CMs are all confirmed to be in their commanded state, then the EM in state bit is set to true";
				N: NOP();
				RC: "Set the state value at beginning of scan to 9999";
				N: MOV(9999,EM.Val_State);
				RC: "State 0 is the default, Null state";
				N: EQU(EM.PSet_State,0)NOP();
				RC: "State 1 - The Idle State";
				N: EQU(EM.PSet_State,1)[OTL(SIC0102.PCmd_Stop) ,MOV(0,SIC0102.PSet_SpeedRef) ];
				RC: "Feedback logic for State 1 - Idle. $N"
				    "";
				N: EQU(EM.PSet_State,1)XIC(SIC0102.Sts_Stopped)MOV(1,EM.Val_State);
				RC: "State 2 - Run Forward at Speed";
				N: EQU(EM.PSet_State,2)[GRT(SIC0102.PSet_SpeedRef,0) OTL(SIC0102.PCmd_StartFwd) ,LEQ(SIC0102.PSet_SpeedRef,0) OTL(SIC0102.PCmd_Stop) ,MOV(EM.PSet_SP1,SIC0102.PSet_SpeedRef) ];
				RC: "Feedback logic for State 2";
				N: EQU(EM.PSet_State,2)XIC(SIC0102.Sts_RunningFwd)XIC(CM_SIC0102.Sts_InPosition)MOV(2,EM.Val_State);
				RC: "State 3 - Run Reverse";
				N: EQU(EM.PSet_State,3)[GRT(SIC0102.PSet_SpeedRef,0) OTL(SIC0102.PCmd_StartRev) ,LEQ(SIC0102.PSet_SpeedRef,0) OTL(SIC0102.PCmd_Stop) ,MOV(EM.PSet_SP1,SIC0102.PSet_SpeedRef) ];
				RC: "Feedback logic for State 3";
				N: EQU(EM.PSet_State,3)XIC(SIC0102.Sts_RunningRev)XIC(CM_SIC0102.Sts_InPosition)MOV(3,EM.Val_State);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM Main (MAIN := "Main",
	              MODE := 0,
	              DisableFlag := 0,
	              UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE Main 
				N: JSR(Presens,0);
				N: JSR(WAGO_RIO,0);
		END_ROUTINE

		ROUTINE Presens 
				RC: "==============================================================$N"
				    "Presens Instrumentation$N"
				    "- Modbus RTU - Read And Write Data Initialization -$N"
				    "==============================================================";
				N: XIC(S:FS)OTL(Local:1:O00.Run);
		END_ROUTINE

		ROUTINE WAGO_RIO 
				RC: "===========================================================$N"
				    "Inputs$N"
				    "===========================================================";
				N: NOP();
				RC: "Slot 1 Analog Input";
				N: COP(Wago_RIO:I.Data[0],Slot1_AI_WAGO455_Inputs[0],8);
				N: WAGO_455(Slot1_AI_WAGO455,Slot1_AI_WAGO455_Inputs);
				RC: "Slot 2 Analog Input";
				N: COP(Wago_RIO:I.Data[8],Slot2_RTD_WAGO461_Inputs[0],4);
				N: WAGO_461(Slot2_RTD_WAGO461,Slot2_RTD_WAGO461_Inputs,0,0);
				RC: "===========================================================$N"
				    "Outputs$N"
				    "===========================================================";
				N: NOP();
				RC: "Slot 5 Analog Outputs";
				N: WAGO_555(Slot5_AO_WAGO555,Slot5_AO_WAGO555_Outputs);
				N: COP(Slot5_AO_WAGO555_Outputs[0],Wago_RIO:O.Data[4],8);
				RC: "Slot 3 Analog Outputs";
				N: WAGO_550(Slot3_AO_WAGO550,Slot3_AO_WAGO550_Outputs);
				N: COP(Slot3_AO_WAGO550_Outputs[0],Wago_RIO:O.Data[0],4);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM MainProgram (MAIN := "Main",
	                     MODE := 0,
	                     DisableFlag := 0,
	                     UseAsFolder := 0)
		TAG
			Cmd_Oper : BOOL (Description := "Global Operator Command",
			            RADIX := Decimal) := 0;
			Cmd_Prog : BOOL (Description := "Program Mode Command",
			            RADIX := Decimal) := 0;
			TIMER : TIMER[8] (COMMENT[0] := "Cmd Oper Timer",
			            COMMENT[1] := "Cmd Prog Timer") := [[-1606653174,5000,5000],[2927887,5000,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]];
		END_TAG

		ROUTINE Device_Interface 
				RC: "==============================================================$N"
				    "Logic Used To Enable The eWON Cosy VPN Connection From The Panelview$N"
				    "==============================================================";
				N: XIC(HMI_VPN_Accept_Val_PB)[OTL(HMI_VPN_Activate) ,MUL(HMI_VPN_Enable_TON_User_Input,3600000,HMI_VPN_Enable_TON.PRE) ,MOV(0,HMI_VPN_Enable_TON.ACC) ];
				N: XIC(HMI_VPN_Activate)XIO(HMI_VPN_Enable_TON.DN)[TON(HMI_VPN_Enable_TON,?,?) ,XIC(HMI_VPN_Enable_TON.EN) OTE(Wago_RIO:O.Data[12].5) ];
				N: [XIC(HMI_VPN_Disable_PB) ,XIC(HMI_VPN_Enable_TON.DN) ]OTU(HMI_VPN_Activate);
		END_ROUTINE

		ST_ROUTINE GlobalProgOper 
			'//====================================================================================
			'// Used to set program and operator mode globally when the global CMD button is pressed on the HMI
			'//====================================================================================
			'
			'// Global Program Command
			'if Cmd_Prog Then
			'
			'AIC0706.ProgProgReq [:=] 1;
			'AIC0707.ProgProgReq [:=] 1;
			'TIC0705.ProgProgReq [:=] 1;
			'FIC0111.PCmd_Prog [:=] 1;
			'FIC0112.PCmd_Prog [:=] 1;
			'FIC0113.PCmd_Prog [:=] 1;
			'FV0111.PCmd_Prog [:=] 1;
			'FV0112.PCmd_Prog [:=] 1;
			'FV0113.PCmd_Prog [:=] 1;
			'SIC0101.PCmd_Prog [:=] 1;
			'SIC0102.PCmd_Prog [:=] 1;
			'TC0705.PCmd_Prog [:=] 1;
			'
			'end_if;
			'
			'
			'// Global Operator Command
			'if Cmd_Oper Then
			'
			'AIC0706.ProgOperReq [:=] 1;
			'AIC0707.ProgOperReq [:=] 1;
			'TIC0705.ProgOperReq [:=] 1;
			'FIC0111.PCmd_Prog [:=] 1;
			'FIC0112.PCmd_Prog [:=] 1;
			'FIC0113.PCmd_Prog [:=] 1;
			'FV0111.PCmd_Prog [:=] 1;
			'FV0112.PCmd_Prog [:=] 1;
			'FV0113.PCmd_Prog [:=] 1;
			'SIC0101.PCmd_Prog [:=] 1;
			'SIC0102.PCmd_Prog [:=] 1;
			'TC0705.PCmd_Prog [:=] 1;
			'
			'end_if;
		END_ST_ROUTINE

		ST_ROUTINE GlobalReset 
			'//====================================================================================
			'//Used to reset everything when the global reset button is pressed on the HMI
			'//====================================================================================
			'
			'
			'if GlobalReset.Out_Reset Then
			'
			'AT0706.PCmd_Reset [:=] 1;
			'AT0707.PCmd_Reset [:=] 1;
			'TT0705.PCmd_Reset [:=] 1;
			'SIC0401_Angle.PCmd_Reset [:=] 1;
			'SIC0401_Speed.PCmd_Reset [:=] 1;
			'YZ0901.PCmd_Reset [:=] 1;
			'YZ0902.PCmd_Reset [:=] 1;
			'TC0705.PCmd_Reset [:=] 1;
			'XC0702.PCmd_Reset [:=] 1;
			'AIC0706_Intlk.PCmd_Reset [:=] 1;
			'AIC0707_Intlk.PCmd_Reset [:=] 1;
			'FIC0111_Intlk.PCmd_Reset [:=] 1;
			'FIC0112_Intlk.PCmd_Reset [:=] 1;
			'FIC0113_Intlk.PCmd_Reset [:=] 1;
			'FV0111_Intlk.PCmd_Reset [:=] 1;
			'FV0112_Intlk.PCmd_Reset [:=] 1;
			'FV0113_Intlk.PCmd_Reset [:=] 1;
			'SIC0101_Intlk.PCmd_Reset [:=] 1;
			'SIC0102_Intlk.PCmd_Reset [:=] 1;
			'SIC0401_Intlk.PCmd_Reset [:=] 1;
			'TIC0705_Intlk.PCmd_Reset [:=] 1;
			'SIC0401_Motor.PCmd_Reset [:=] 1;
			'FIC0111.PCmd_Reset [:=] 1;
			'FIC0112.PCmd_Reset [:=] 1;
			'FIC0113.PCmd_Reset [:=] 1;
			'FV0111.PCmd_Reset [:=] 1;
			'FV0112.PCmd_Reset [:=] 1;
			'FV0113.PCmd_Reset [:=] 1;
			'SIC0101.PCmd_Reset [:=] 1;
			'SIC0102.PCmd_Reset [:=] 1;
			'XA0202A.PCmd_Reset [:=] 1;
			'XA0202B.PCmd_Reset [:=] 1;
			'
			'end_if;
		END_ST_ROUTINE

		ROUTINE Main 
				N: NOP();
				RC: "PLC Date and Time";
				N: GSV(WallClockTime,,LocalDateTime,PLCStatus.LocalDateTime[0]);
				N: [COP(PLCStatus.LocalDateTime[0],LocalDateTimeRef.Yr,1) ,COP(PLCStatus.LocalDateTime[1],LocalDateTimeRef.Mo,1) ,COP(PLCStatus.LocalDateTime[2],LocalDateTimeRef.Da,1) ,COP(PLCStatus.LocalDateTime[3],LocalDateTimeRef.Hr,1) ,COP(PLCStatus.LocalDateTime[4],LocalDateTimeRef.Min,1) ,COP(PLCStatus.LocalDateTime[5],LocalDateTimeRef.Sec,1) ,COP(PLCStatus.LocalDateTime[6],LocalDateTimeRef.uSec,1) ,T_TtoS(LocalDateTimeTtoS,LocalDateTimeRef,LocalDateTimeString) ];
				N: OTL(PV_DataStore_Plus_Trigger);
				N: P_Reset(GlobalReset);
				N: P_CmdSrc(GlobalCmdSrc);
				N: [[XIC(GlobalCmdSrc.Sts_Oper) TON(TIMER[0],?,?) ,XIC(GlobalCmdSrc.Sts_Prog) TON(TIMER[1],?,?) ] ,[XIC(GlobalCmdSrc.Sts_Oper) XIO(TIMER[0].DN) OTE(Cmd_Oper) ,XIC(GlobalCmdSrc.Sts_Prog) XIO(TIMER[1].DN) OTE(Cmd_Prog) ] ];
				N: JSR(GlobalProgOper,0);
				N: JSR(GlobalReset,0);
				N: JSR(Device_Interface,0);
				N: JSR(Startup,0);
		END_ROUTINE

		ROUTINE Startup 
				RC: "Startup$N"
				    "Enable popup for the user to select Auto Resume, Manual Resume, or Shutdown";
				N: XIC(s:fs)OTL(Startup_Active)MOV(0,SIC0401_MsgDINTs[5])CLR(ONS);
				RC: "For Auto Startup after Power Loss:$N"
				    "Resume all previous CMs, EMs according to previous setpoints; Phase steps/commands are in hold until “Resume Phase” is selected ";
				N: XIC(Startup_Active)XIC(Startup_Auto_Resume_PB)MOV(1,SIC0401_MsgDINTs[5])OTL(XC0702.PCmd_Oper)OTL(GlobalCmdSrc.PCmd_Prog)OTL(GlobalReset.PCmd_Reset)OTU(Startup_Active)OTU(Startup_Auto_Resume_PB);
				RC: "For Manual Startup after Power Loss:$N"
				    "Shutdown Everything";
				N: XIC(Startup_Active)XIC(Startup_Shutdown_PB)MOV(1,SIC0401_MsgDINTs[5])OTU(Harvest_Mode)OTL(Stop_Rocker)OTL(\EM_DOC.HMI_OperStop)OTL(\EM_PHC.HMI_OperStop)OTL(XC0702.PCmd_Off)OTL(GlobalCmdSrc.PCmd_Prog)OTL(GlobalReset.PCmd_Reset)OTU(Startup_Active)OTU(Startup_Shutdown_PB);
				RC: "If the popup doesn$'t show on the screen, a reset on the HMI will clear this bit";
				N: XIC(GlobalReset.Out_Reset)OTU(Startup_Active);
				RC: "Rocker Motor Startup Delay for Rocking";
				N: XIO(Startup_Active)[EQU(SIC0401_MsgDINTs[5],1) TON(StartupTON,?,?) ,XIC(StartupTON.DN) MOV(0,SIC0401_MsgDINTs[5]) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM PIDs (MAIN := "Main",
	              MODE := 0,
	              DisableFlag := 0,
	              UseAsFolder := 0)
		TAG
			GRT_01 : FBD_COMPARE  := [1,0.00000000e+000,0.00000000e+000];
			OSRI_01 : FBD_ONESHOT  := [1,0,5.60519386e-045];
			PIDE_01 : PID_ENHANCED  := [1,8192,0.00000000e+000,1.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,1.00000000e+002,0.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e+002
					,0.00000000e+000,1.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,3.40282347e+038
					,3.40282347e+038,-3.40282347e+038,-3.40282347e+038,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,3.40282347e+038,3.40282347e+038,3.40282347e+038,3.40282347e+038,0.00000000e+000
					,0,0.00000000e+000,1,0,0,0,0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0,0,5.60519386e-045
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					];
			PIDE_02 : PID_ENHANCED  := [1,8192,0.00000000e+000,1.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,1.00000000e+002,0.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000,1.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.00000000e+002
					,0.00000000e+000,1.00000000e+002,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,3.40282347e+038
					,3.40282347e+038,-3.40282347e+038,-3.40282347e+038,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,3.40282347e+038,3.40282347e+038,3.40282347e+038,3.40282347e+038,0.00000000e+000
					,0,0.00000000e+000,1,0,0,0,0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0,0,5.60519386e-045
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					];
			SCL_01 : SCALE  := [1,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000
					,0,5.60519386e-045,0.00000000e+000,0.00000000e+000,0.00000000e+000];
		END_TAG

		FBD_ROUTINE AIC0706 (SheetSize := "Tabloid - 11 x 17 in",
		                     SheetOrientation := Landscape)
			SHEET  (Name := "")
				IREF  (ID := 0,
				       X := 140,
				       Y := 80,
				       Operand := "AT0706.Val",
				       HideDescription := No)
				END_IREF

				PIDE_BLOCK  (ID := 1,
				             X := 300,
				             Y := 20,
				             Operand := "AIC0706",
				             VisiblePins := "PV, SPProg, SPCascade, RatioProg, CVProg, FF, HandFB, ProgProgReq, ProgOperReq, ProgCasRatReq, ProgAutoReq, ProgManualReq, ProgOverrideReq, ProgHandReq, CVEU, SP, PVHHAlarm, PVHAlarm, PVLAlarm, PVLLAlarm, PVROCPosAlarm, PVROCNegAlarm, DevHHAlarm, DevHAlarm, DevLAlarm, DevLLAlarm, ProgOper, CasRat, Auto, Manual, Override, Hand",
				             HideDescription := No,
				             AutotuneTag := "")
				END_PIDE_BLOCK

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 1,
				       ToParameter := "PV")
				END_WIRE

			END_SHEET

		END_FBD_ROUTINE

		FBD_ROUTINE AIC0707 (SheetSize := "Tabloid - 11 x 17 in",
		                     SheetOrientation := Landscape)
			SHEET  (Name := "")
				IREF  (ID := 0,
				       X := 120,
				       Y := 80,
				       Operand := "AT0707.Val",
				       HideDescription := No)
				END_IREF

				PIDE_BLOCK  (ID := 1,
				             X := 300,
				             Y := 20,
				             Operand := "AIC0707",
				             VisiblePins := "PV, SPProg, SPCascade, RatioProg, CVProg, FF, HandFB, ProgProgReq, ProgOperReq, ProgCasRatReq, ProgAutoReq, ProgManualReq, ProgOverrideReq, ProgHandReq, CVEU, SP, PVHHAlarm, PVHAlarm, PVLAlarm, PVLLAlarm, PVROCPosAlarm, PVROCNegAlarm, DevHHAlarm, DevHAlarm, DevLAlarm, DevLLAlarm, ProgOper, CasRat, Auto, Manual, Override, Hand",
				             HideDescription := No,
				             AutotuneTag := "")
				END_PIDE_BLOCK

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 1,
				       ToParameter := "PV")
				END_WIRE

			END_SHEET

		END_FBD_ROUTINE

		ROUTINE GasControl 
				N: XIC(GasControl_ON)ONS(GasOnOns)[OTU(FIC140.PCmd_Unlock) OTU(FIC130.PCmd_Unlock) OTU(FIC120.PCmd_Unlock) OTU(FIC110.PCmd_Unlock) ,OTL(FIC140.PCmd_Lock) OTL(FIC130.PCmd_Lock) OTL(FIC120.PCmd_Lock) OTL(FIC110.PCmd_Lock) ];
				N: XIO(GasControl_ON)ONS(GasOffOns)[OTU(FIC110.PCmd_Lock) OTU(FIC120.PCmd_Lock) OTU(FIC130.PCmd_Lock) OTU(FIC140.PCmd_Lock) ,OTL(FIC110.PCmd_Unlock) OTL(FIC120.PCmd_Unlock) OTL(FIC130.PCmd_Unlock) OTL(FIC140.PCmd_Unlock) ];
				N: CPT(O2MaxCalc,FIC120.Cfg_CVEUMax /TotalFlowSP);
				N: CPT(N2MaxCalc,FIC140.Cfg_CVEUMax/TotalFlowSP);
				N: CPT(CO2MaxCalc,FIC130.Cfg_CVEUMax/TotalFlowSP);
				N: CPT(CCAMaxCalc,FIC110.Cfg_CVEUMax/TotalFlowSP);
				N: XIC(CO2ProgOper)MOV(CO2ManualSP,CO2PercentOut);
				N: XIO(CO2ProgOper)MOV(C02Scaler.Out,CO2PercentOut);
				N: XIC(O2ProgOper)CMP(( O2ManualSP + CO2PercentOut ) <= 1)MOV(O2ManualSP,O2PercentOut);
				N: XIC(O2ProgOper)CMP(( O2ManualSP + CO2PercentOut) > 1)CPT(O2PercentOut,O2ManualSP-( O2ManualSP + CO2PercentOut - 1));
				N: XIO(O2ProgOper)CMP(( O2Scaler.Out + CO2PercentOut) > 1)CPT(O2PercentOut,O2Scaler.Out-( O2Scaler.Out + CO2PercentOut - 1));
				N: XIO(O2ProgOper)CMP(( O2Scaler.Out + CO2PercentOut) <= 1)MOV(O2Scaler.Out,O2PercentOut);
				N: XIO(N2ProgOper)CMP(( O2PercentOut + CO2PercentOut + N2Scaler.Out) > 1)CPT(N2PercentOut,N2Scaler.Out-( O2PercentOut + CO2PercentOut + N2Scaler.Out - 1));
				N: XIO(N2ProgOper)CMP(( O2PercentOut + CO2PercentOut + N2Scaler.Out) <= 1)MOV(N2Scaler.Out,N2PercentOut);
				N: XIC(N2ProgOper)CMP(( O2ManualSP + CO2PercentOut + N2ManualSP ) <= 1)MOV(N2ManualSP,N2PercentOut);
				N: XIC(N2ProgOper)CMP(( O2ManualSP + CO2PercentOut + N2ManualSP) > 1)CPT(N2PercentOut,N2ManualSP-( N2ManualSP + CO2PercentOut + O2PercentOut- 1));
				N: XIC(AirProgOper)CMP(( O2PercentOut + N2PercentOut + CO2PercentOut + AirManualSP) <= 1)MOV(AirManualSP,AirPercentOut);
				N: XIO(AirProgOper)CMP(( O2PercentOut + CO2PercentOut + N2PercentOut ) < 1)CPT(AirPercentOut,1- ( N2PercentOut + O2PercentOut + CO2PercentOut ));
				N: XIO(AirProgOper)CMP(( O2PercentOut + CO2PercentOut + N2PercentOut ) = 1)MOV(0,AirPercentOut);
				N: XIC(AirProgOper)CMP(( O2PercentOut + CO2PercentOut + N2PercentOut + AirManualSP) > 1)CPT(AirPercentOut,AirManualSP-( N2PercentOut + CO2PercentOut + O2PercentOut + AirManualSP - 1));
				N: XIC(GasControl_ON)MUL(N2PercentOut,TotalFlowSP,FIC140.PSet_CV)MUL(CO2PercentOut,TotalFlowSP,FIC130.PSet_CV)MUL(AirPercentOut,TotalFlowSP,FIC110.PSet_CV)MUL(O2PercentOut,TotalFlowSP,FIC120.PSet_CV);
				N: XIO(GasControl_ON)MUL(N2PercentOut,0,FIC140.PSet_CV)MUL(CO2PercentOut,0,FIC130.PSet_CV)MUL(AirPercentOut,0,FIC110.PSet_CV)MUL(O2PercentOut,0,FIC120.PSet_CV);
				N: [GRT(O2EUMax,O2MaxCalc) MOV(O2MaxCalc,O2EUMax) ,GRT(N2EUMin,N2MaxCalc) MOV(N2MaxCalc,N2EUMin) ,GRT(CO2EUMax,CO2MaxCalc) MOV(CO2MaxCalc,CO2EUMax) ];
		END_ROUTINE

		ROUTINE Main 
				N: JSR(AIC0706,0);
				N: JSR(AIC0707,0);
				N: JSR(PBS,0);
				N: JSR(GasControl,0);
		END_ROUTINE

		FBD_ROUTINE PBS (SheetSize := "Tabloid - 11 x 17 in",
		                 SheetOrientation := Landscape)
			SHEET  (Name := "")
				IREF  (ID := 0,
				       X := 120,
				       Y := 280,
				       Operand := "0",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 1,
				       X := 540,
				       Y := 280,
				       Operand := "0",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 2,
				       X := 160,
				       Y := 460,
				       Operand := "1",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 3,
				       X := 580,
				       Y := 420,
				       Operand := "1",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 4,
				       X := 960,
				       Y := 500,
				       Operand := "CO2CVMax",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 5,
				       X := 960,
				       Y := 520,
				       Operand := "CO2CVMin",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 6,
				       X := 980,
				       Y := 540,
				       Operand := "CO2EUMax",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 7,
				       X := 960,
				       Y := 560,
				       Operand := "CO2EUMin",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 8,
				       X := 120,
				       Y := 260,
				       Operand := "DOPID_INITIALIZE",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 9,
				       X := 100,
				       Y := 140,
				       Operand := "DO_ON",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 10,
				       X := 240,
				       Y := 740,
				       Operand := "DO_PID_AUTOREQ",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 11,
				       X := 140,
				       Y := 180,
				       Operand := "DOtestPV",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 12,
				       X := 140,
				       Y := 320,
				       Operand := "ManualDO_CV",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 13,
				       X := 580,
				       Y := 320,
				       Operand := "ManualpH_CV",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 14,
				       X := 960,
				       Y := 340,
				       Operand := "N2CVMax",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 15,
				       X := 960,
				       Y := 360,
				       Operand := "N2CVMin",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 16,
				       X := 960,
				       Y := 380,
				       Operand := "N2EUMax",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 17,
				       X := 960,
				       Y := 400,
				       Operand := "N2EUMin",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 18,
				       X := 960,
				       Y := 180,
				       Operand := "O2CVMax",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 19,
				       X := 960,
				       Y := 200,
				       Operand := "O2CVMin",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 20,
				       X := 960,
				       Y := 220,
				       Operand := "O2EUMax",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 21,
				       X := 960,
				       Y := 240,
				       Operand := "O2EUMin",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 22,
				       X := 560,
				       Y := 160,
				       Operand := "PH_On",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 23,
				       X := 540,
				       Y := 260,
				       Operand := "pH_Initialize",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 24,
				       X := 660,
				       Y := 700,
				       Operand := "pH_PID_AUTOREQ",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 25,
				       X := 580,
				       Y := 180,
				       Operand := "pHtestPV",
				       HideDescription := No)
				END_IREF

				PIDE_BLOCK  (ID := 26,
				             X := 200,
				             Y := 100,
				             Operand := "DOpbs",
				             VisiblePins := "EnableIn, PV, SPProg, SPCascade, RatioProg, CVInitReq, CVInitValue, CVProg, CVOper, CVPrevious, CVSetPrevious, CVEUMax, CVEUMin, FF, HandFB, ProgProgReq, ProgOperReq, ProgCasRatReq, ProgAutoReq, ProgManualReq, ProgOverrideReq, ProgHandReq, OperProgReq, OperOperReq, OperAutoReq, OperManualReq, CVEU, CVHAlarm, CVLAlarm, SP, PVHHAlarm, PVHAlarm, PVLAlarm, PVLLAlarm, PVROCPosAlarm, PVROCNegAlarm, DevHHAlarm, DevHAlarm, DevLAlarm, DevLLAlarm, ProgOper, CasRat, Auto, Manual, Override, Hand",
				             HideDescription := No,
				             AutotuneTag := "")
				END_PIDE_BLOCK

				PIDE_BLOCK  (ID := 27,
				             X := 620,
				             Y := 100,
				             Operand := "PHpbs",
				             VisiblePins := "EnableIn, PV, SPProg, SPCascade, RatioProg, CVInitReq, CVInitValue, CVProg, CVOper, CVPrevious, CVSetPrevious, FF, HandFB, ProgProgReq, ProgOperReq, ProgCasRatReq, ProgAutoReq, ProgManualReq, ProgOverrideReq, ProgHandReq, OperProgReq, OperOperReq, OperAutoReq, OperManualReq, CVEU, SP, PVHHAlarm, PVHAlarm, PVLAlarm, PVLLAlarm, PVROCPosAlarm, PVROCNegAlarm, DevHHAlarm, DevHAlarm, DevLAlarm, DevLLAlarm, ProgOper, CasRat, Auto, Manual, Override, Hand",
				             HideDescription := No,
				             AutotuneTag := "")
				END_PIDE_BLOCK

				SCL_BLOCK  (ID := 28,
				            X := 1040,
				            Y := 420,
				            Operand := "C02Scaler",
				            VisiblePins := "In, InRawMax, InRawMin, InEUMax, InEUMin, Out",
				            HideDescription := No)
				END_SCL_BLOCK

				SCL_BLOCK  (ID := 29,
				            X := 1040,
				            Y := 260,
				            Operand := "N2Scaler",
				            VisiblePins := "In, InRawMax, InRawMin, InEUMax, InEUMin, Out",
				            HideDescription := No)
				END_SCL_BLOCK

				SCL_BLOCK  (ID := 30,
				            X := 1040,
				            Y := 100,
				            Operand := "O2Scaler",
				            VisiblePins := "In, InRawMax, InRawMin, InEUMax, InEUMin, Out",
				            HideDescription := No)
				END_SCL_BLOCK

				BNOT_FUNCTION  (ID := 31,
				                X := 80,
				                Y := 600)
				END_BNOT_FUNCTION

				BNOT_FUNCTION  (ID := 32,
				                X := 720,
				                Y := 700)
				END_BNOT_FUNCTION

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 26,
				       ToParameter := "CVInitValue")
				END_WIRE

				WIRE  (FromElementID := 1,
				       FromParameter := "",
				       ToElementID := 27,
				       ToParameter := "CVInitValue")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 26,
				       ToParameter := "ProgOperReq")
				END_WIRE

				WIRE  (FromElementID := 3,
				       FromParameter := "",
				       ToElementID := 27,
				       ToParameter := "ProgOperReq")
				END_WIRE

				WIRE  (FromElementID := 4,
				       FromParameter := "",
				       ToElementID := 28,
				       ToParameter := "InRawMax")
				END_WIRE

				WIRE  (FromElementID := 5,
				       FromParameter := "",
				       ToElementID := 28,
				       ToParameter := "InRawMin")
				END_WIRE

				WIRE  (FromElementID := 6,
				       FromParameter := "",
				       ToElementID := 28,
				       ToParameter := "InEUMax")
				END_WIRE

				WIRE  (FromElementID := 7,
				       FromParameter := "",
				       ToElementID := 28,
				       ToParameter := "InEUMin")
				END_WIRE

				WIRE  (FromElementID := 8,
				       FromParameter := "",
				       ToElementID := 26,
				       ToParameter := "CVInitReq")
				END_WIRE

				WIRE  (FromElementID := 9,
				       FromParameter := "",
				       ToElementID := 26,
				       ToParameter := "EnableIn")
				END_WIRE

				WIRE  (FromElementID := 10,
				       FromParameter := "",
				       ToElementID := 26,
				       ToParameter := "OperAutoReq")
				END_WIRE

				WIRE  (FromElementID := 10,
				       FromParameter := "",
				       ToElementID := 31,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 11,
				       FromParameter := "",
				       ToElementID := 26,
				       ToParameter := "PV")
				END_WIRE

				WIRE  (FromElementID := 12,
				       FromParameter := "",
				       ToElementID := 26,
				       ToParameter := "CVOper")
				END_WIRE

				WIRE  (FromElementID := 13,
				       FromParameter := "",
				       ToElementID := 27,
				       ToParameter := "CVOper")
				END_WIRE

				WIRE  (FromElementID := 14,
				       FromParameter := "",
				       ToElementID := 29,
				       ToParameter := "InRawMax")
				END_WIRE

				WIRE  (FromElementID := 15,
				       FromParameter := "",
				       ToElementID := 29,
				       ToParameter := "InRawMin")
				END_WIRE

				WIRE  (FromElementID := 16,
				       FromParameter := "",
				       ToElementID := 29,
				       ToParameter := "InEUMax")
				END_WIRE

				WIRE  (FromElementID := 17,
				       FromParameter := "",
				       ToElementID := 29,
				       ToParameter := "InEUMin")
				END_WIRE

				WIRE  (FromElementID := 18,
				       FromParameter := "",
				       ToElementID := 30,
				       ToParameter := "InRawMax")
				END_WIRE

				WIRE  (FromElementID := 19,
				       FromParameter := "",
				       ToElementID := 30,
				       ToParameter := "InRawMin")
				END_WIRE

				WIRE  (FromElementID := 20,
				       FromParameter := "",
				       ToElementID := 30,
				       ToParameter := "InEUMax")
				END_WIRE

				WIRE  (FromElementID := 21,
				       FromParameter := "",
				       ToElementID := 30,
				       ToParameter := "InEUMin")
				END_WIRE

				WIRE  (FromElementID := 22,
				       FromParameter := "",
				       ToElementID := 27,
				       ToParameter := "EnableIn")
				END_WIRE

				WIRE  (FromElementID := 23,
				       FromParameter := "",
				       ToElementID := 27,
				       ToParameter := "CVInitReq")
				END_WIRE

				WIRE  (FromElementID := 24,
				       FromParameter := "",
				       ToElementID := 27,
				       ToParameter := "OperAutoReq")
				END_WIRE

				WIRE  (FromElementID := 24,
				       FromParameter := "",
				       ToElementID := 32,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 25,
				       FromParameter := "",
				       ToElementID := 27,
				       ToParameter := "PV")
				END_WIRE

				WIRE  (FromElementID := 26,
				       FromParameter := "CVEU",
				       ToElementID := 29,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 26,
				       FromParameter := "CVEU",
				       ToElementID := 30,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 27,
				       FromParameter := "CVEU",
				       ToElementID := 28,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 31,
				       FromParameter := "Out",
				       ToElementID := 26,
				       ToParameter := "OperManualReq")
				END_WIRE

				WIRE  (FromElementID := 32,
				       FromParameter := "Out",
				       ToElementID := 27,
				       ToParameter := "OperManualReq")
				END_WIRE

			END_SHEET

		END_FBD_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM Temp_Control (MAIN := "Main",
	                      MODE := 0,
	                      DisableFlag := 0,
	                      UseAsFolder := 0)
		TAG
			GRT_01 : FBD_COMPARE  := [3,0.00000000e+000,0.00000000e+000];
			OSRI_01 : FBD_ONESHOT  := [1,1,0.00000000e+000];
			P_Intlk_01 : P_Intlk  := [2433,0,0,0,0,0,0,[[20,'Enter Description #0'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					]],0,0,0,0,0,0,0,0,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'
					],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					]],[6,'RA-BAS$00$00$00$00$00$00'],0,[6,'area01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					]];
			TC0702_FailTime : TIMER (Description := "Temp Output Failed Timer") := [3018663,300000,0];
			TIC0705_PV_HLimit : REAL (RADIX := Float) := 2.33042374e+001;
			TIC0705_PV_LLimit : REAL (RADIX := Float) := 2.10847874e+001;
			TIC0705_PV_Snapshot : REAL (RADIX := Float) := 2.21945133e+001;
		END_TAG

		ROUTINE Main 
				N: NOP();
				RC: "Alarm Handling for HMI";
				N: [[XIC(TIC0705.DevHHAlarm) ,XIC(TIC0705.DevHAlarm) ,XIC(TIC0705.DevLAlarm) ,XIC(TIC0705.DevLLAlarm) ] OTE(TIC0705_Status.Alm) ,XIO(TIC0705_Intlk.Sts_IntlkOK) OTE(TIC0705_Status.Intlk) ];
				N: [XIC(TIC0705.OperManualReq) OTU(HMI_TempCntl) ,XIC(TIC0705.OperAutoReq) OTL(HMI_TempCntl) ];
				N: XIO(TIC0705_Intlk.Sts_IntlkOK)MOV(0,TIC0705.CVOper);
				RC: "Temp Output Failed Monitoring Logic";
				N: XIC(HMI_TempCntl)CMP(TIC0705.PV < (TIC0705.SP * 0.9))LIM(TIC0705_PV_HLimit,TIC0705.PV,TIC0705_PV_LLimit)TON(TC0702_FailTime,?,?);
				N: [XIC(TC0702_FailTime.DN) OTL(TC0702_FAIL) OTU(HMI_TempCntl) ,XIC(GlobalReset.Out_Reset) XIO(TC0702_FailTime.DN) OTU(TC0702_FAIL) ];
				N: [XIC(HMI_TempCntl) ONS(ONS.2) MOV(TIC0705.PV,TIC0705_PV_Snapshot) ,MUL(TIC0705_PV_Snapshot,1.05,TIC0705_PV_HLimit) MUL(TIC0705_PV_Snapshot,0.95,TIC0705_PV_LLimit) ];
				N: JSR(TIC0705,0);
				N: XIC(TY0705.HeatOut)ONS(ONS.3)OTE(TC0705.PCmd_On);
				N: XIO(TY0705.HeatOut)ONS(ONS.8)OTE(TC0705.PCmd_Off);
		END_ROUTINE

		FBD_ROUTINE TIC0705 (SheetSize := "Tabloid - 11 x 17 in",
		                     SheetOrientation := Landscape)
			SHEET  (Name := "")
				IREF  (ID := 0,
				       X := 660,
				       Y := 820,
				       Operand := "GlobalReset.Out_Reset",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 1,
				       X := 580,
				       Y := 760,
				       Operand := "Global_HICritTemp",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 2,
				       X := 60,
				       Y := 320,
				       Operand := "HMI_TempCntl",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 3,
				       X := 660,
				       Y := 700,
				       Operand := "SIC0401_Motor.Sts_Stopped",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 4,
				       X := 660,
				       Y := 720,
				       Operand := "Startup_Active",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 5,
				       X := 660,
				       Y := 740,
				       Operand := "TC0705.Alm_IOFault",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 6,
				       X := 140,
				       Y := 520,
				       Operand := "TIC0705_Intlk.Sts_IntlkOK",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 7,
				       X := 120,
				       Y := 80,
				       Operand := "TT0705.Val",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 8,
				       X := 100,
				       Y := 120,
				       Operand := "TT0705.Val_PVEUMax",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 9,
				       X := 100,
				       Y := 140,
				       Operand := "TT0705.Val_PVEUMin",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 10,
				       X := 660,
				       Y := 660,
				       Operand := "XA0202A.Alm_TgtDisagree",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 11,
				       X := 660,
				       Y := 620,
				       Operand := "YZ0901.Alm_TgtDisagree",
				       HideDescription := No)
				END_IREF

				IREF  (ID := 12,
				       X := 660,
				       Y := 640,
				       Operand := "YZ0902.Alm_TgtDisagree",
				       HideDescription := No)
				END_IREF

				OREF  (ID := 13,
				       X := 1180,
				       Y := 300,
				       Operand := "TC0705.PCmd_Prog",
				       HideDescription := No)
				END_OREF

				GRT_BLOCK  (ID := 14,
				            X := 800,
				            Y := 220,
				            Operand := "GRT_01",
				            VisiblePins := "SourceA, SourceB, Dest",
				            HideDescription := No)
				END_GRT_BLOCK

				OSRI_BLOCK  (ID := 15,
				             X := 960,
				             Y := 240,
				             Operand := "OSRI_01",
				             VisiblePins := "InputBit, OutputBit",
				             HideDescription := No)
				END_OSRI_BLOCK

				PIDE_BLOCK  (ID := 16,
				             X := 460,
				             Y := 20,
				             Operand := "TIC0705",
				             VisiblePins := "PV, PVEUMax, PVEUMin, SPOper, SPHLimit, SPLLimit, CVInitReq, CVOper, OperProgReq, OperOperReq, OperAutoReq, OperManualReq, CVEU, SP, PVHHAlarm, PVHAlarm, PVLAlarm, PVLLAlarm, PVROCPosAlarm, PVROCNegAlarm, DevHHAlarm, DevHAlarm, DevLAlarm, DevLLAlarm, ProgOper, CasRat, Auto, Manual, Override, Hand",
				             HideDescription := No,
				             AutotuneTag := "")
				END_PIDE_BLOCK

				SRTP_BLOCK  (ID := 17,
				             X := 780,
				             Y := 20,
				             Operand := "TY0705",
				             VisiblePins := "In, HeatOut, HeatTimePercent, CoolTimePercent, CycleTimeInv, HeatSpanInv, CoolSpanInv",
				             HideDescription := No)
				END_SRTP_BLOCK

				BNOT_FUNCTION  (ID := 18,
				                X := 60,
				                Y := 260)
				END_BNOT_FUNCTION

				BNOT_FUNCTION  (ID := 19,
				                X := 120,
				                Y := 200)
				END_BNOT_FUNCTION

				BOR_FUNCTION  (ID := 20,
				               X := 220,
				               Y := 220)
				END_BOR_FUNCTION

				BAND_FUNCTION  (ID := 21,
				                X := 220,
				                Y := 340)
				END_BAND_FUNCTION

				ADD_ON_INSTRUCTION P_Intlk (ID := 22,
				                            X := 760,
				                            Y := 560,
				                            Operand := "TIC0705_Intlk",
				                            VisiblePins := "Inp_Intlk00, Inp_Intlk01, Inp_Intlk02, Inp_Intlk03, Inp_Intlk04, Inp_Intlk05, Inp_Intlk06, Inp_Intlk07, Inp_BypActive, Inp_LatchDefeat, Inp_Reset, Sts_IntlkOK, Sts_NBIntlkOK, Sts_Intlk, Sts_FirstOut",
				                            HideDescription := "No")
				END_ADD_ON_INSTRUCTION

				WIRE  (FromElementID := 0,
				       FromParameter := "",
				       ToElementID := 22,
				       ToParameter := "Inp_Reset")
				END_WIRE

				WIRE  (FromElementID := 1,
				       FromParameter := "",
				       ToElementID := 22,
				       ToParameter := "Inp_Intlk07")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 19,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 2,
				       FromParameter := "",
				       ToElementID := 21,
				       ToParameter := "In1")
				END_WIRE

				WIRE  (FromElementID := 3,
				       FromParameter := "",
				       ToElementID := 22,
				       ToParameter := "Inp_Intlk04")
				END_WIRE

				WIRE  (FromElementID := 4,
				       FromParameter := "",
				       ToElementID := 22,
				       ToParameter := "Inp_Intlk05")
				END_WIRE

				WIRE  (FromElementID := 5,
				       FromParameter := "",
				       ToElementID := 22,
				       ToParameter := "Inp_Intlk06")
				END_WIRE

				WIRE  (FromElementID := 6,
				       FromParameter := "",
				       ToElementID := 18,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 6,
				       FromParameter := "",
				       ToElementID := 21,
				       ToParameter := "In2")
				END_WIRE

				WIRE  (FromElementID := 7,
				       FromParameter := "",
				       ToElementID := 16,
				       ToParameter := "PV")
				END_WIRE

				WIRE  (FromElementID := 8,
				       FromParameter := "",
				       ToElementID := 16,
				       ToParameter := "PVEUMax")
				END_WIRE

				WIRE  (FromElementID := 8,
				       FromParameter := "",
				       ToElementID := 16,
				       ToParameter := "SPHLimit")
				END_WIRE

				WIRE  (FromElementID := 9,
				       FromParameter := "",
				       ToElementID := 16,
				       ToParameter := "PVEUMin")
				END_WIRE

				WIRE  (FromElementID := 9,
				       FromParameter := "",
				       ToElementID := 16,
				       ToParameter := "SPLLimit")
				END_WIRE

				WIRE  (FromElementID := 10,
				       FromParameter := "",
				       ToElementID := 22,
				       ToParameter := "Inp_Intlk02")
				END_WIRE

				WIRE  (FromElementID := 11,
				       FromParameter := "",
				       ToElementID := 22,
				       ToParameter := "Inp_Intlk00")
				END_WIRE

				WIRE  (FromElementID := 12,
				       FromParameter := "",
				       ToElementID := 22,
				       ToParameter := "Inp_Intlk01")
				END_WIRE

				WIRE  (FromElementID := 14,
				       FromParameter := "Dest",
				       ToElementID := 15,
				       ToParameter := "InputBit")
				END_WIRE

				WIRE  (FromElementID := 15,
				       FromParameter := "OutputBit",
				       ToElementID := 13,
				       ToParameter := "")
				END_WIRE

				WIRE  (FromElementID := 16,
				       FromParameter := "CVEU",
				       ToElementID := 14,
				       ToParameter := "SourceA")
				END_WIRE

				WIRE  (FromElementID := 16,
				       FromParameter := "CVEU",
				       ToElementID := 17,
				       ToParameter := "In")
				END_WIRE

				WIRE  (FromElementID := 18,
				       FromParameter := "Out",
				       ToElementID := 20,
				       ToParameter := "In2")
				END_WIRE

				WIRE  (FromElementID := 19,
				       FromParameter := "Out",
				       ToElementID := 20,
				       ToParameter := "In1")
				END_WIRE

				WIRE  (FromElementID := 20,
				       FromParameter := "Out",
				       ToElementID := 16,
				       ToParameter := "CVInitReq")
				END_WIRE

				WIRE  (FromElementID := 21,
				       FromParameter := "Out",
				       ToElementID := 16,
				       ToParameter := "OperAutoReq")
				END_WIRE

				WIRE  (FromElementID := 21,
				       FromParameter := "Out",
				       ToElementID := 16,
				       ToParameter := "OperOperReq")
				END_WIRE

			END_SHEET

		END_FBD_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	TASK CMs_100ms (Type := PERIODIC,
	                Rate := 100,
	                Priority := 10,
	                Watchdog := 500,
	                DisableUpdateOutputs := No,
	                InhibitTask := No)
			CM_IO;
			CM_Valves;
			CM_Motors;
			CM_PBS;
	END_TASK

	TASK CM_Cntl_250ms (Type := PERIODIC,
	                    Rate := 250,
	                    Priority := 10,
	                    Watchdog := 1500,
	                    DisableUpdateOutputs := No,
	                    InhibitTask := No)
			CM_Cntl;
	END_TASK

	TASK Comms_100ms (Type := PERIODIC,
	                  Rate := 100,
	                  Priority := 10,
	                  Watchdog := 500,
	                  DisableUpdateOutputs := No,
	                  InhibitTask := No)
			Main;
	END_TASK

	TASK EMs_175ms (Type := PERIODIC,
	                Rate := 175,
	                Priority := 10,
	                Watchdog := 1000,
	                DisableUpdateOutputs := No,
	                InhibitTask := No)
			EM_MFC_Air;
			EM_MFC_O2;
			EM_MFC_CO2;
			EM_Pump_Base;
			EM_Pump_Feed;
			EM_DOC;
			EM_PHC;
	END_TASK

	TASK PIDs_1000ms (Type := PERIODIC,
	                  Rate := 1000,
	                  Priority := 10,
	                  Watchdog := 10000,
	                  DisableUpdateOutputs := No,
	                  InhibitTask := No)
			PIDs;
	END_TASK

	TASK Task_Misc_500ms (Type := PERIODIC,
	                      Rate := 500,
	                      Priority := 10,
	                      Watchdog := 5000,
	                      DisableUpdateOutputs := No,
	                      InhibitTask := No)
			MainProgram;
	END_TASK

	TASK TempControl_250ms (Type := PERIODIC,
	                        Rate := 250,
	                        Priority := 10,
	                        Watchdog := 500,
	                        DisableUpdateOutputs := No,
	                        InhibitTask := No)
			Temp_Control;
	END_TASK

CONFIG CST(SystemTimeMasterID := 0) END_CONFIG

CONFIG EthernetPort1(Label := "A1",
	                             PortEnabled := 1) END_CONFIG

CONFIG EthernetPort2(Label := "A2",
	                             PortEnabled := 0) END_CONFIG

CONFIG TimeSynchronize(Priority1 := 128,
	                                 Priority2 := 128,
	                                 PTPEnable := 0) END_CONFIG

CONFIG WallClockTime(LocalTimeAdjustment := 0,
	                     TimeZone := 0) END_CONFIG

END_CONTROLLER

